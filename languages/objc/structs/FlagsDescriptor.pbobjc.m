// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/FlagsDescriptor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "structs/FlagsDescriptor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FlagsDescriptorRoot

@implementation FlagsDescriptorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FlagsDescriptorRoot_FileDescriptor

static GPBFileDescriptor *FlagsDescriptorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ProductFlag

GPBEnumDescriptor *ProductFlag_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Visible\000Premium\000Featured\000Lastchance\000Inho"
        "use\000";
    static const int32_t values[] = {
        ProductFlag_Visible,
        ProductFlag_Premium,
        ProductFlag_Featured,
        ProductFlag_Lastchance,
        ProductFlag_Inhouse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProductFlag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ProductFlag_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ProductFlag_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProductFlag_Visible:
    case ProductFlag_Premium:
    case ProductFlag_Featured:
    case ProductFlag_Lastchance:
    case ProductFlag_Inhouse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ProductFlagValue

@implementation ProductFlagValue

@dynamic type;
@dynamic value;

typedef struct ProductFlagValue__storage_ {
  uint32_t _has_storage_[1];
  ProductFlag type;
} ProductFlagValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ProductFlag_EnumDescriptor,
        .number = ProductFlagValue_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProductFlagValue__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ProductFlagValue_FieldNumber_Value,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProductFlagValue class]
                                     rootClass:[FlagsDescriptorRoot class]
                                          file:FlagsDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProductFlagValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProductFlagValue_Type_RawValue(ProductFlagValue *message) {
  GPBDescriptor *descriptor = [ProductFlagValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProductFlagValue_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetProductFlagValue_Type_RawValue(ProductFlagValue *message, int32_t value) {
  GPBDescriptor *descriptor = [ProductFlagValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProductFlagValue_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ProductFlagset

@implementation ProductFlagset

@dynamic flagsArray, flagsArray_Count;

typedef struct ProductFlagset__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *flagsArray;
} ProductFlagset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flagsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ProductFlagValue),
        .number = ProductFlagset_FieldNumber_FlagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProductFlagset__storage_, flagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProductFlagset class]
                                     rootClass:[FlagsDescriptorRoot class]
                                          file:FlagsDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProductFlagset__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FlagsDescriptor

@implementation FlagsDescriptor

@dynamic visible;
@dynamic premium;
@dynamic featured;
@dynamic lastchance;
@dynamic inhouse;

typedef struct FlagsDescriptor__storage_ {
  uint32_t _has_storage_[1];
} FlagsDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "visible",
        .dataTypeSpecific.className = NULL,
        .number = FlagsDescriptor_FieldNumber_Visible,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "premium",
        .dataTypeSpecific.className = NULL,
        .number = FlagsDescriptor_FieldNumber_Premium,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "featured",
        .dataTypeSpecific.className = NULL,
        .number = FlagsDescriptor_FieldNumber_Featured,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lastchance",
        .dataTypeSpecific.className = NULL,
        .number = FlagsDescriptor_FieldNumber_Lastchance,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "inhouse",
        .dataTypeSpecific.className = NULL,
        .number = FlagsDescriptor_FieldNumber_Inhouse,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FlagsDescriptor class]
                                     rootClass:[FlagsDescriptorRoot class]
                                          file:FlagsDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlagsDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
