// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/pricing/PricingDescriptor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "structs/pricing/PricingDescriptor.pbobjc.h"
 #import "structs/pricing/SaleDescriptor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PricingDescriptorRoot

@implementation PricingDescriptorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PricingDescriptorRoot_FileDescriptor

static GPBFileDescriptor *PricingDescriptorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PricingType

GPBEnumDescriptor *PricingType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unit\000Weighted\000Freebie\000";
    static const int32_t values[] = {
        PricingType_Unit,
        PricingType_Weighted,
        PricingType_Freebie,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PricingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PricingType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PricingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PricingType_Unit:
    case PricingType_Weighted:
    case PricingType_Freebie:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PricingWeightTier

GPBEnumDescriptor *PricingWeightTier_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Other\000Gram\000Halfgram\000Quartergram\000Dub\000Eigh"
        "th\000Quarter\000Half\000Ounce\000Pound\000";
    static const int32_t values[] = {
        PricingWeightTier_Other,
        PricingWeightTier_Gram,
        PricingWeightTier_Halfgram,
        PricingWeightTier_Quartergram,
        PricingWeightTier_Dub,
        PricingWeightTier_Eighth,
        PricingWeightTier_Quarter,
        PricingWeightTier_Half,
        PricingWeightTier_Ounce,
        PricingWeightTier_Pound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PricingWeightTier)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PricingWeightTier_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PricingWeightTier_IsValidValue(int32_t value__) {
  switch (value__) {
    case PricingWeightTier_Other:
    case PricingWeightTier_Gram:
    case PricingWeightTier_Halfgram:
    case PricingWeightTier_Quartergram:
    case PricingWeightTier_Dub:
    case PricingWeightTier_Eighth:
    case PricingWeightTier_Quarter:
    case PricingWeightTier_Half:
    case PricingWeightTier_Ounce:
    case PricingWeightTier_Pound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PricingTierAvailability

@implementation PricingTierAvailability

@dynamic offered;
@dynamic available;

typedef struct PricingTierAvailability__storage_ {
  uint32_t _has_storage_[1];
} PricingTierAvailability__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offered",
        .dataTypeSpecific.className = NULL,
        .number = PricingTierAvailability_FieldNumber_Offered,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "available",
        .dataTypeSpecific.className = NULL,
        .number = PricingTierAvailability_FieldNumber_Available,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PricingTierAvailability class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PricingTierAvailability__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnitPricingDescriptor

@implementation UnitPricingDescriptor

@dynamic priceValue;
@dynamic hasStatus, status;
@dynamic discountsArray, discountsArray_Count;

typedef struct UnitPricingDescriptor__storage_ {
  uint32_t _has_storage_[1];
  float priceValue;
  PricingTierAvailability *status;
  NSMutableArray *discountsArray;
} UnitPricingDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "priceValue",
        .dataTypeSpecific.className = NULL,
        .number = UnitPricingDescriptor_FieldNumber_PriceValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnitPricingDescriptor__storage_, priceValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(PricingTierAvailability),
        .number = UnitPricingDescriptor_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnitPricingDescriptor__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SaleDescriptor),
        .number = UnitPricingDescriptor_FieldNumber_DiscountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UnitPricingDescriptor__storage_, discountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnitPricingDescriptor class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnitPricingDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WeightedPricingDescriptor

@implementation WeightedPricingDescriptor

@dynamic weight;
@dynamic hasTier, tier;
@dynamic weightInGrams;

typedef struct WeightedPricingDescriptor__storage_ {
  uint32_t _has_storage_[1];
  PricingWeightTier weight;
  float weightInGrams;
  UnitPricingDescriptor *tier;
} WeightedPricingDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "weight",
        .dataTypeSpecific.enumDescFunc = PricingWeightTier_EnumDescriptor,
        .number = WeightedPricingDescriptor_FieldNumber_Weight,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WeightedPricingDescriptor__storage_, weight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tier",
        .dataTypeSpecific.className = GPBStringifySymbol(UnitPricingDescriptor),
        .number = WeightedPricingDescriptor_FieldNumber_Tier,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WeightedPricingDescriptor__storage_, tier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weightInGrams",
        .dataTypeSpecific.className = NULL,
        .number = WeightedPricingDescriptor_FieldNumber_WeightInGrams,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WeightedPricingDescriptor__storage_, weightInGrams),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WeightedPricingDescriptor class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WeightedPricingDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WeightedPricingDescriptor_Weight_RawValue(WeightedPricingDescriptor *message) {
  GPBDescriptor *descriptor = [WeightedPricingDescriptor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeightedPricingDescriptor_FieldNumber_Weight];
  return GPBGetMessageInt32Field(message, field);
}

void SetWeightedPricingDescriptor_Weight_RawValue(WeightedPricingDescriptor *message, int32_t value) {
  GPBDescriptor *descriptor = [WeightedPricingDescriptor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WeightedPricingDescriptor_FieldNumber_Weight];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FreebiePricingDescriptor

@implementation FreebiePricingDescriptor


typedef struct FreebiePricingDescriptor__storage_ {
  uint32_t _has_storage_[1];
} FreebiePricingDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FreebiePricingDescriptor class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(FreebiePricingDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PricingDescriptor

@implementation PricingDescriptor

@dynamic type;
@dynamic hasUnit, unit;
@dynamic hasWeighted, weighted;
@dynamic hasFreebie, freebie;

typedef struct PricingDescriptor__storage_ {
  uint32_t _has_storage_[1];
  PricingType type;
  UnitPricingDescriptor *unit;
  WeightedPricingDescriptor *weighted;
  FreebiePricingDescriptor *freebie;
} PricingDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PricingType_EnumDescriptor,
        .number = PricingDescriptor_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PricingDescriptor__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = GPBStringifySymbol(UnitPricingDescriptor),
        .number = PricingDescriptor_FieldNumber_Unit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PricingDescriptor__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "weighted",
        .dataTypeSpecific.className = GPBStringifySymbol(WeightedPricingDescriptor),
        .number = PricingDescriptor_FieldNumber_Weighted,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PricingDescriptor__storage_, weighted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "freebie",
        .dataTypeSpecific.className = GPBStringifySymbol(FreebiePricingDescriptor),
        .number = PricingDescriptor_FieldNumber_Freebie,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PricingDescriptor__storage_, freebie),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PricingDescriptor class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PricingDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PricingDescriptor_Type_RawValue(PricingDescriptor *message) {
  GPBDescriptor *descriptor = [PricingDescriptor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PricingDescriptor_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPricingDescriptor_Type_RawValue(PricingDescriptor *message, int32_t value) {
  GPBDescriptor *descriptor = [PricingDescriptor descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PricingDescriptor_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ProductPricing

@implementation ProductPricing

@dynamic discountsArray, discountsArray_Count;
@dynamic manifestArray, manifestArray_Count;

typedef struct ProductPricing__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *discountsArray;
  NSMutableArray *manifestArray;
} ProductPricing__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "discountsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SaleDescriptor),
        .number = ProductPricing_FieldNumber_DiscountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProductPricing__storage_, discountsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "manifestArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PricingDescriptor),
        .number = ProductPricing_FieldNumber_ManifestArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProductPricing__storage_, manifestArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProductPricing class]
                                     rootClass:[PricingDescriptorRoot class]
                                          file:PricingDescriptorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProductPricing__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
