// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/MaterialsData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "content/MaterialsData.pbobjc.h"
 #import "structs/Grow.pbobjc.h"
 #import "structs/Species.pbobjc.h"
 #import "structs/Genetics.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MaterialsDataRoot

@implementation MaterialsDataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MaterialsDataRoot_FileDescriptor

static GPBFileDescriptor *MaterialsDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MaterialsData

@implementation MaterialsData

@dynamic ingredientsArray, ingredientsArray_Count;
@dynamic grow;
@dynamic species;
@dynamic hasGenetics, genetics;

typedef struct MaterialsData__storage_ {
  uint32_t _has_storage_[1];
  Grow grow;
  Species species;
  NSMutableArray *ingredientsArray;
  Genetics *genetics;
} MaterialsData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ingredientsArray",
        .dataTypeSpecific.className = NULL,
        .number = MaterialsData_FieldNumber_IngredientsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MaterialsData__storage_, ingredientsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "grow",
        .dataTypeSpecific.enumDescFunc = Grow_EnumDescriptor,
        .number = MaterialsData_FieldNumber_Grow,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MaterialsData__storage_, grow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "species",
        .dataTypeSpecific.enumDescFunc = Species_EnumDescriptor,
        .number = MaterialsData_FieldNumber_Species,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MaterialsData__storage_, species),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "genetics",
        .dataTypeSpecific.className = GPBStringifySymbol(Genetics),
        .number = MaterialsData_FieldNumber_Genetics,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MaterialsData__storage_, genetics),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MaterialsData class]
                                     rootClass:[MaterialsDataRoot class]
                                          file:MaterialsDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MaterialsData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MaterialsData_Grow_RawValue(MaterialsData *message) {
  GPBDescriptor *descriptor = [MaterialsData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MaterialsData_FieldNumber_Grow];
  return GPBGetMessageInt32Field(message, field);
}

void SetMaterialsData_Grow_RawValue(MaterialsData *message, int32_t value) {
  GPBDescriptor *descriptor = [MaterialsData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MaterialsData_FieldNumber_Grow];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MaterialsData_Species_RawValue(MaterialsData *message) {
  GPBDescriptor *descriptor = [MaterialsData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MaterialsData_FieldNumber_Species];
  return GPBGetMessageInt32Field(message, field);
}

void SetMaterialsData_Species_RawValue(MaterialsData *message, int32_t value) {
  GPBDescriptor *descriptor = [MaterialsData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MaterialsData_FieldNumber_Species];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
