// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/ProductContent.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "content/ProductContent.pbobjc.h"
 #import "content/Name.pbobjc.h"
 #import "content/Content.pbobjc.h"
 #import "content/Brand.pbobjc.h"
 #import "media/MediaItem.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProductContentRoot

@implementation ProductContentRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ProductContentRoot_FileDescriptor

static GPBFileDescriptor *ProductContentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ProductContent

@implementation ProductContent

@dynamic hasName, name;
@dynamic hasSummary, summary;
@dynamic hasBrand, brand;
@dynamic mediaArray, mediaArray_Count;
@dynamic hasUsage, usage;
@dynamic hasDosage, dosage;
@dynamic hasAdvice, advice;

typedef struct ProductContent__storage_ {
  uint32_t _has_storage_[1];
  Name *name;
  Content *summary;
  Brand *brand;
  NSMutableArray *mediaArray;
  Content *usage;
  Content *dosage;
  Content *advice;
} ProductContent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(Name),
        .number = ProductContent_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProductContent__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = ProductContent_FieldNumber_Summary,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ProductContent__storage_, summary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "brand",
        .dataTypeSpecific.className = GPBStringifySymbol(Brand),
        .number = ProductContent_FieldNumber_Brand,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ProductContent__storage_, brand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MediaItem),
        .number = ProductContent_FieldNumber_MediaArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProductContent__storage_, mediaArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "usage",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = ProductContent_FieldNumber_Usage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ProductContent__storage_, usage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dosage",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = ProductContent_FieldNumber_Dosage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ProductContent__storage_, dosage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "advice",
        .dataTypeSpecific.className = GPBStringifySymbol(Content),
        .number = ProductContent_FieldNumber_Advice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ProductContent__storage_, advice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProductContent class]
                                     rootClass:[ProductContentRoot class]
                                          file:ProductContentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProductContent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
