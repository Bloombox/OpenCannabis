// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/Content.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Compression;
GPB_ENUM_FWD_DECLARE(Language);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Content_Type

typedef GPB_ENUM(Content_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Content_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Content_Type_Text = 0,
  Content_Type_Markdown = 1,
  Content_Type_Html = 2,
};

GPBEnumDescriptor *Content_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Content_Type_IsValidValue(int32_t value);

#pragma mark - Enum Content_Encoding

typedef GPB_ENUM(Content_Encoding) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Content_Encoding_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Content_Encoding_Utf8 = 0,
};

GPBEnumDescriptor *Content_Encoding_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Content_Encoding_IsValidValue(int32_t value);

#pragma mark - ContentRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ContentRoot : GPBRootObject
@end

#pragma mark - Content

typedef GPB_ENUM(Content_FieldNumber) {
  Content_FieldNumber_Type = 1,
  Content_FieldNumber_Encoding = 2,
  Content_FieldNumber_Content = 3,
  Content_FieldNumber_Language = 4,
  Content_FieldNumber_Compression = 5,
};

@interface Content : GPBMessage

@property(nonatomic, readwrite) Content_Type type;

@property(nonatomic, readwrite) Content_Encoding encoding;

@property(nonatomic, readwrite, copy, null_resettable) NSData *content;

@property(nonatomic, readwrite) enum Language language;

@property(nonatomic, readwrite, strong, null_resettable) Compression *compression;
/** Test to see if @c compression has been set. */
@property(nonatomic, readwrite) BOOL hasCompression;

@end

/**
 * Fetches the raw value of a @c Content's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Content_Type_RawValue(Content *message);
/**
 * Sets the raw value of an @c Content's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetContent_Type_RawValue(Content *message, int32_t value);

/**
 * Fetches the raw value of a @c Content's @c encoding property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Content_Encoding_RawValue(Content *message);
/**
 * Sets the raw value of an @c Content's @c encoding property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetContent_Encoding_RawValue(Content *message, int32_t value);

/**
 * Fetches the raw value of a @c Content's @c language property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Content_Language_RawValue(Content *message);
/**
 * Sets the raw value of an @c Content's @c language property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetContent_Language_RawValue(Content *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
