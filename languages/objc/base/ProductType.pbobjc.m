// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/ProductType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "base/ProductType.pbobjc.h"
 #import "base/ProductKind.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProductTypeRoot

@implementation ProductTypeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ProductTypeRoot_FileDescriptor

static GPBFileDescriptor *ProductTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ProductType

@implementation ProductType

@dynamic kind;

typedef struct ProductType__storage_ {
  uint32_t _has_storage_[1];
  ProductKind kind;
} ProductType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = ProductKind_EnumDescriptor,
        .number = ProductType_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ProductType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProductType class]
                                     rootClass:[ProductTypeRoot class]
                                          file:ProductTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProductType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProductType_Kind_RawValue(ProductType *message) {
  GPBDescriptor *descriptor = [ProductType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProductType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetProductType_Kind_RawValue(ProductType *message, int32_t value) {
  GPBDescriptor *descriptor = [ProductType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProductType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
