// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaType.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "media/MediaType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MediaTypeRoot

@implementation MediaTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MediaTypeRoot_FileDescriptor

static GPBFileDescriptor *MediaTypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MediaType

@implementation MediaType

@dynamic kind;
@dynamic hasImageType, imageType;
@dynamic hasDocumentType, documentType;
@dynamic hasVideoType, videoType;

typedef struct MediaType__storage_ {
  uint32_t _has_storage_[1];
  MediaType_Kind kind;
  ImageType *imageType;
  DocumentType *documentType;
  VideoType *videoType;
} MediaType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = MediaType_Kind_EnumDescriptor,
        .number = MediaType_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MediaType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "imageType",
        .dataTypeSpecific.className = GPBStringifySymbol(ImageType),
        .number = MediaType_FieldNumber_ImageType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MediaType__storage_, imageType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "documentType",
        .dataTypeSpecific.className = GPBStringifySymbol(DocumentType),
        .number = MediaType_FieldNumber_DocumentType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MediaType__storage_, documentType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoType",
        .dataTypeSpecific.className = GPBStringifySymbol(VideoType),
        .number = MediaType_FieldNumber_VideoType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MediaType__storage_, videoType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MediaType class]
                                     rootClass:[MediaTypeRoot class]
                                          file:MediaTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MediaType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MediaType_Kind_RawValue(MediaType *message) {
  GPBDescriptor *descriptor = [MediaType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MediaType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetMediaType_Kind_RawValue(MediaType *message, int32_t value) {
  GPBDescriptor *descriptor = [MediaType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MediaType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum MediaType_Kind

GPBEnumDescriptor *MediaType_Kind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Link\000Image\000Document\000Video\000";
    static const int32_t values[] = {
        MediaType_Kind_Link,
        MediaType_Kind_Image,
        MediaType_Kind_Document,
        MediaType_Kind_Video,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MediaType_Kind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MediaType_Kind_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MediaType_Kind_IsValidValue(int32_t value__) {
  switch (value__) {
    case MediaType_Kind_Link:
    case MediaType_Kind_Image:
    case MediaType_Kind_Document:
    case MediaType_Kind_Video:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ImageType

@implementation ImageType

@dynamic kind;

typedef struct ImageType__storage_ {
  uint32_t _has_storage_[1];
  ImageType_ImageKind kind;
} ImageType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = ImageType_ImageKind_EnumDescriptor,
        .number = ImageType_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImageType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImageType class]
                                     rootClass:[MediaTypeRoot class]
                                          file:MediaTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImageType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ImageType_Kind_RawValue(ImageType *message) {
  GPBDescriptor *descriptor = [ImageType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetImageType_Kind_RawValue(ImageType *message, int32_t value) {
  GPBDescriptor *descriptor = [ImageType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ImageType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ImageType_ImageKind

GPBEnumDescriptor *ImageType_ImageKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Png\000Jpg\000Gif\000Svg\000Webp\000";
    static const int32_t values[] = {
        ImageType_ImageKind_Png,
        ImageType_ImageKind_Jpg,
        ImageType_ImageKind_Gif,
        ImageType_ImageKind_Svg,
        ImageType_ImageKind_Webp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ImageType_ImageKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ImageType_ImageKind_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ImageType_ImageKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case ImageType_ImageKind_Png:
    case ImageType_ImageKind_Jpg:
    case ImageType_ImageKind_Gif:
    case ImageType_ImageKind_Svg:
    case ImageType_ImageKind_Webp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DocumentType

@implementation DocumentType

@dynamic kind;
@dynamic compressed;

typedef struct DocumentType__storage_ {
  uint32_t _has_storage_[1];
  DocumentType_DocumentKind kind;
} DocumentType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = DocumentType_DocumentKind_EnumDescriptor,
        .number = DocumentType_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DocumentType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "compressed",
        .dataTypeSpecific.className = NULL,
        .number = DocumentType_FieldNumber_Compressed,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DocumentType class]
                                     rootClass:[MediaTypeRoot class]
                                          file:MediaTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DocumentType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DocumentType_Kind_RawValue(DocumentType *message) {
  GPBDescriptor *descriptor = [DocumentType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DocumentType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetDocumentType_Kind_RawValue(DocumentType *message, int32_t value) {
  GPBDescriptor *descriptor = [DocumentType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DocumentType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DocumentType_DocumentKind

GPBEnumDescriptor *DocumentType_DocumentKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Txt\000Html\000Pdf\000Markdown\000";
    static const int32_t values[] = {
        DocumentType_DocumentKind_Txt,
        DocumentType_DocumentKind_Html,
        DocumentType_DocumentKind_Pdf,
        DocumentType_DocumentKind_Markdown,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DocumentType_DocumentKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DocumentType_DocumentKind_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DocumentType_DocumentKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case DocumentType_DocumentKind_Txt:
    case DocumentType_DocumentKind_Html:
    case DocumentType_DocumentKind_Pdf:
    case DocumentType_DocumentKind_Markdown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VideoType

@implementation VideoType

@dynamic kind;

typedef struct VideoType__storage_ {
  uint32_t _has_storage_[1];
  VideoType_VideoKind kind;
} VideoType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = VideoType_VideoKind_EnumDescriptor,
        .number = VideoType_FieldNumber_Kind,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoType__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoType class]
                                     rootClass:[MediaTypeRoot class]
                                          file:MediaTypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VideoType_Kind_RawValue(VideoType *message) {
  GPBDescriptor *descriptor = [VideoType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VideoType_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetVideoType_Kind_RawValue(VideoType *message, int32_t value) {
  GPBDescriptor *descriptor = [VideoType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VideoType_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum VideoType_VideoKind

GPBEnumDescriptor *VideoType_VideoKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Mp4\000Flv\000Hls\000";
    static const int32_t values[] = {
        VideoType_VideoKind_Mp4,
        VideoType_VideoKind_Flv,
        VideoType_VideoKind_Hls,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VideoType_VideoKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VideoType_VideoKind_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VideoType_VideoKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case VideoType_VideoKind_Mp4:
    case VideoType_VideoKind_Flv:
    case VideoType_VideoKind_Hls:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
