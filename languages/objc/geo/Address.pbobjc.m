// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo/Address.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "geo/Address.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AddressRoot

@implementation AddressRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AddressRoot_FileDescriptor

static GPBFileDescriptor *AddressRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Address

@implementation Address

@dynamic firstLine;
@dynamic secondLine;
@dynamic city;
@dynamic state;
@dynamic zipcode;
@dynamic country;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *firstLine;
  NSString *secondLine;
  NSString *city;
  NSString *state;
  NSString *zipcode;
  NSString *country;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstLine",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_FirstLine,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, firstLine),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secondLine",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_SecondLine,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, secondLine),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_City,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_State,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zipcode",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Zipcode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, zipcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Country,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Address__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[AddressRoot class]
                                          file:AddressRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
