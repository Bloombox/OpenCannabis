// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/FlagsDescriptor.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from structs/FlagsDescriptor.proto</summary>
public static partial class FlagsDescriptorReflection {

  #region Descriptor
  /// <summary>File descriptor for structs/FlagsDescriptor.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FlagsDescriptorReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch1zdHJ1Y3RzL0ZsYWdzRGVzY3JpcHRvci5wcm90byI9ChBQcm9kdWN0Rmxh",
          "Z1ZhbHVlEhoKBHR5cGUYASABKA4yDC5Qcm9kdWN0RmxhZxINCgV2YWx1ZRgC",
          "IAEoCCIyCg5Qcm9kdWN0RmxhZ3NldBIgCgVmbGFncxgBIAMoCzIRLlByb2R1",
          "Y3RGbGFnVmFsdWUiagoPRmxhZ3NEZXNjcmlwdG9yEg8KB3Zpc2libGUYASAB",
          "KAgSDwoHcHJlbWl1bRgCIAEoCBIQCghmZWF0dXJlZBgDIAEoCBISCgpsYXN0",
          "Y2hhbmNlGAQgASgIEg8KB2luaG91c2UYBSABKAgqUgoLUHJvZHVjdEZsYWcS",
          "CwoHVklTSUJMRRAAEgsKB1BSRU1JVU0QARIMCghGRUFUVVJFRBACEg4KCkxB",
          "U1RDSEFOQ0UQAxILCgdJTkhPVVNFEARCJQohaW8uYmxvb21ib3guc2NoZW1h",
          "LnByb2R1Y3Quc3RydWN0UAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProductFlag), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProductFlagValue), global::ProductFlagValue.Parser, new[]{ "Type", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProductFlagset), global::ProductFlagset.Parser, new[]{ "Flags" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FlagsDescriptor), global::FlagsDescriptor.Parser, new[]{ "Visible", "Premium", "Featured", "Lastchance", "Inhouse" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ProductFlag {
  [pbr::OriginalName("VISIBLE")] Visible = 0,
  [pbr::OriginalName("PREMIUM")] Premium = 1,
  [pbr::OriginalName("FEATURED")] Featured = 2,
  [pbr::OriginalName("LASTCHANCE")] Lastchance = 3,
  [pbr::OriginalName("INHOUSE")] Inhouse = 4,
}

#endregion

#region Messages
public sealed partial class ProductFlagValue : pb::IMessage<ProductFlagValue> {
  private static readonly pb::MessageParser<ProductFlagValue> _parser = new pb::MessageParser<ProductFlagValue>(() => new ProductFlagValue());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProductFlagValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FlagsDescriptorReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagValue(ProductFlagValue other) : this() {
    type_ = other.type_;
    value_ = other.value_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagValue Clone() {
    return new ProductFlagValue(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::ProductFlag type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProductFlag Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private bool value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProductFlagValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProductFlagValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Value != other.Value) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Value != false) hash ^= Value.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Value != false) {
      output.WriteRawTag(16);
      output.WriteBool(Value);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Value != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProductFlagValue other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Value != false) {
      Value = other.Value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::ProductFlag) input.ReadEnum();
          break;
        }
        case 16: {
          Value = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class ProductFlagset : pb::IMessage<ProductFlagset> {
  private static readonly pb::MessageParser<ProductFlagset> _parser = new pb::MessageParser<ProductFlagset>(() => new ProductFlagset());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProductFlagset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FlagsDescriptorReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagset(ProductFlagset other) : this() {
    flags_ = other.flags_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductFlagset Clone() {
    return new ProductFlagset(this);
  }

  /// <summary>Field number for the "flags" field.</summary>
  public const int FlagsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ProductFlagValue> _repeated_flags_codec
      = pb::FieldCodec.ForMessage(10, global::ProductFlagValue.Parser);
  private readonly pbc::RepeatedField<global::ProductFlagValue> flags_ = new pbc::RepeatedField<global::ProductFlagValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductFlagValue> Flags {
    get { return flags_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProductFlagset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProductFlagset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!flags_.Equals(other.flags_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= flags_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    flags_.WriteTo(output, _repeated_flags_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += flags_.CalculateSize(_repeated_flags_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProductFlagset other) {
    if (other == null) {
      return;
    }
    flags_.Add(other.flags_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          flags_.AddEntriesFrom(input, _repeated_flags_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class FlagsDescriptor : pb::IMessage<FlagsDescriptor> {
  private static readonly pb::MessageParser<FlagsDescriptor> _parser = new pb::MessageParser<FlagsDescriptor>(() => new FlagsDescriptor());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FlagsDescriptor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FlagsDescriptorReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlagsDescriptor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlagsDescriptor(FlagsDescriptor other) : this() {
    visible_ = other.visible_;
    premium_ = other.premium_;
    featured_ = other.featured_;
    lastchance_ = other.lastchance_;
    inhouse_ = other.inhouse_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FlagsDescriptor Clone() {
    return new FlagsDescriptor(this);
  }

  /// <summary>Field number for the "visible" field.</summary>
  public const int VisibleFieldNumber = 1;
  private bool visible_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Visible {
    get { return visible_; }
    set {
      visible_ = value;
    }
  }

  /// <summary>Field number for the "premium" field.</summary>
  public const int PremiumFieldNumber = 2;
  private bool premium_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Premium {
    get { return premium_; }
    set {
      premium_ = value;
    }
  }

  /// <summary>Field number for the "featured" field.</summary>
  public const int FeaturedFieldNumber = 3;
  private bool featured_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Featured {
    get { return featured_; }
    set {
      featured_ = value;
    }
  }

  /// <summary>Field number for the "lastchance" field.</summary>
  public const int LastchanceFieldNumber = 4;
  private bool lastchance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Lastchance {
    get { return lastchance_; }
    set {
      lastchance_ = value;
    }
  }

  /// <summary>Field number for the "inhouse" field.</summary>
  public const int InhouseFieldNumber = 5;
  private bool inhouse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Inhouse {
    get { return inhouse_; }
    set {
      inhouse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FlagsDescriptor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FlagsDescriptor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Visible != other.Visible) return false;
    if (Premium != other.Premium) return false;
    if (Featured != other.Featured) return false;
    if (Lastchance != other.Lastchance) return false;
    if (Inhouse != other.Inhouse) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Visible != false) hash ^= Visible.GetHashCode();
    if (Premium != false) hash ^= Premium.GetHashCode();
    if (Featured != false) hash ^= Featured.GetHashCode();
    if (Lastchance != false) hash ^= Lastchance.GetHashCode();
    if (Inhouse != false) hash ^= Inhouse.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Visible != false) {
      output.WriteRawTag(8);
      output.WriteBool(Visible);
    }
    if (Premium != false) {
      output.WriteRawTag(16);
      output.WriteBool(Premium);
    }
    if (Featured != false) {
      output.WriteRawTag(24);
      output.WriteBool(Featured);
    }
    if (Lastchance != false) {
      output.WriteRawTag(32);
      output.WriteBool(Lastchance);
    }
    if (Inhouse != false) {
      output.WriteRawTag(40);
      output.WriteBool(Inhouse);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Visible != false) {
      size += 1 + 1;
    }
    if (Premium != false) {
      size += 1 + 1;
    }
    if (Featured != false) {
      size += 1 + 1;
    }
    if (Lastchance != false) {
      size += 1 + 1;
    }
    if (Inhouse != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FlagsDescriptor other) {
    if (other == null) {
      return;
    }
    if (other.Visible != false) {
      Visible = other.Visible;
    }
    if (other.Premium != false) {
      Premium = other.Premium;
    }
    if (other.Featured != false) {
      Featured = other.Featured;
    }
    if (other.Lastchance != false) {
      Lastchance = other.Lastchance;
    }
    if (other.Inhouse != false) {
      Inhouse = other.Inhouse;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Visible = input.ReadBool();
          break;
        }
        case 16: {
          Premium = input.ReadBool();
          break;
        }
        case 24: {
          Featured = input.ReadBool();
          break;
        }
        case 32: {
          Lastchance = input.ReadBool();
          break;
        }
        case 40: {
          Inhouse = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
