// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/Content.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from content/Content.proto</summary>
public static partial class ContentReflection {

  #region Descriptor
  /// <summary>File descriptor for content/Content.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ContentReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVjb250ZW50L0NvbnRlbnQucHJvdG8aE2Jhc2UvTGFuZ3VhZ2UucHJvdG8a",
          "FmJhc2UvQ29tcHJlc3Npb24ucHJvdG8i3AEKB0NvbnRlbnQSGwoEdHlwZRgB",
          "IAEoDjINLkNvbnRlbnQuVHlwZRIjCghlbmNvZGluZxgCIAEoDjIRLkNvbnRl",
          "bnQuRW5jb2RpbmcSDwoHY29udGVudBgDIAEoDBIbCghsYW5ndWFnZRgEIAEo",
          "DjIJLkxhbmd1YWdlEiEKC2NvbXByZXNzaW9uGAUgASgLMgwuQ29tcHJlc3Np",
          "b24iKAoEVHlwZRIICgRURVhUEAASDAoITUFSS0RPV04QARIICgRIVE1MEAIi",
          "FAoIRW5jb2RpbmcSCAoEVVRGOBAAQi4KGmlvLmJsb29tYm94LnNjaGVtYS5j",
          "b250ZW50Qg5HZW5lcmljQ29udGVudFABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::LanguageReflection.Descriptor, global::CompressionReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Content), global::Content.Parser, new[]{ "Type", "Encoding", "Content_", "Language", "Compression" }, null, new[]{ typeof(global::Content.Types.Type), typeof(global::Content.Types.Encoding) }, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Content : pb::IMessage<Content> {
  private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Content> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ContentReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Content() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Content(Content other) : this() {
    type_ = other.type_;
    encoding_ = other.encoding_;
    content_ = other.content_;
    language_ = other.language_;
    Compression = other.compression_ != null ? other.Compression.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Content Clone() {
    return new Content(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Content.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Content.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "encoding" field.</summary>
  public const int EncodingFieldNumber = 2;
  private global::Content.Types.Encoding encoding_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Content.Types.Encoding Encoding {
    get { return encoding_; }
    set {
      encoding_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int Content_FieldNumber = 3;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content_ {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "language" field.</summary>
  public const int LanguageFieldNumber = 4;
  private global::Language language_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Language Language {
    get { return language_; }
    set {
      language_ = value;
    }
  }

  /// <summary>Field number for the "compression" field.</summary>
  public const int CompressionFieldNumber = 5;
  private global::Compression compression_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Compression Compression {
    get { return compression_; }
    set {
      compression_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Content);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Content other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Encoding != other.Encoding) return false;
    if (Content_ != other.Content_) return false;
    if (Language != other.Language) return false;
    if (!object.Equals(Compression, other.Compression)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Encoding != 0) hash ^= Encoding.GetHashCode();
    if (Content_.Length != 0) hash ^= Content_.GetHashCode();
    if (Language != 0) hash ^= Language.GetHashCode();
    if (compression_ != null) hash ^= Compression.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Encoding != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Encoding);
    }
    if (Content_.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Content_);
    }
    if (Language != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Language);
    }
    if (compression_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Compression);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Encoding != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
    }
    if (Content_.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content_);
    }
    if (Language != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Language);
    }
    if (compression_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compression);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Content other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Encoding != 0) {
      Encoding = other.Encoding;
    }
    if (other.Content_.Length != 0) {
      Content_ = other.Content_;
    }
    if (other.Language != 0) {
      Language = other.Language;
    }
    if (other.compression_ != null) {
      if (compression_ == null) {
        compression_ = new global::Compression();
      }
      Compression.MergeFrom(other.Compression);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Content.Types.Type) input.ReadEnum();
          break;
        }
        case 16: {
          encoding_ = (global::Content.Types.Encoding) input.ReadEnum();
          break;
        }
        case 26: {
          Content_ = input.ReadBytes();
          break;
        }
        case 32: {
          language_ = (global::Language) input.ReadEnum();
          break;
        }
        case 42: {
          if (compression_ == null) {
            compression_ = new global::Compression();
          }
          input.ReadMessage(compression_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Content message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("TEXT")] Text = 0,
      [pbr::OriginalName("MARKDOWN")] Markdown = 1,
      [pbr::OriginalName("HTML")] Html = 2,
    }

    public enum Encoding {
      [pbr::OriginalName("UTF8")] Utf8 = 0,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
