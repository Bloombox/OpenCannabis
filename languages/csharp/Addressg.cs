// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo/Address.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from geo/Address.proto</summary>
public static partial class AddressReflection {

  #region Descriptor
  /// <summary>File descriptor for geo/Address.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static AddressReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFnZW8vQWRkcmVzcy5wcm90byJxCgdBZGRyZXNzEhIKCmZpcnN0X2xpbmUY",
          "ASABKAkSEwoLc2Vjb25kX2xpbmUYAiABKAkSDAoEY2l0eRgDIAEoCRINCgVz",
          "dGF0ZRgEIAEoCRIPCgd6aXBjb2RlGAUgASgJEg8KB2NvdW50cnkYBiABKAlC",
          "HAoWaW8uYmxvb21ib3guc2NoZW1hLmdlb0gBUAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Address), global::Address.Parser, new[]{ "FirstLine", "SecondLine", "City", "State", "Zipcode", "Country" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Address : pb::IMessage<Address> {
  private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Address> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::AddressReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Address() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Address(Address other) : this() {
    firstLine_ = other.firstLine_;
    secondLine_ = other.secondLine_;
    city_ = other.city_;
    state_ = other.state_;
    zipcode_ = other.zipcode_;
    country_ = other.country_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Address Clone() {
    return new Address(this);
  }

  /// <summary>Field number for the "first_line" field.</summary>
  public const int FirstLineFieldNumber = 1;
  private string firstLine_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirstLine {
    get { return firstLine_; }
    set {
      firstLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "second_line" field.</summary>
  public const int SecondLineFieldNumber = 2;
  private string secondLine_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SecondLine {
    get { return secondLine_; }
    set {
      secondLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "city" field.</summary>
  public const int CityFieldNumber = 3;
  private string city_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string City {
    get { return city_; }
    set {
      city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private string state_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string State {
    get { return state_; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "zipcode" field.</summary>
  public const int ZipcodeFieldNumber = 5;
  private string zipcode_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Zipcode {
    get { return zipcode_; }
    set {
      zipcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "country" field.</summary>
  public const int CountryFieldNumber = 6;
  private string country_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Country {
    get { return country_; }
    set {
      country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Address);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Address other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FirstLine != other.FirstLine) return false;
    if (SecondLine != other.SecondLine) return false;
    if (City != other.City) return false;
    if (State != other.State) return false;
    if (Zipcode != other.Zipcode) return false;
    if (Country != other.Country) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FirstLine.Length != 0) hash ^= FirstLine.GetHashCode();
    if (SecondLine.Length != 0) hash ^= SecondLine.GetHashCode();
    if (City.Length != 0) hash ^= City.GetHashCode();
    if (State.Length != 0) hash ^= State.GetHashCode();
    if (Zipcode.Length != 0) hash ^= Zipcode.GetHashCode();
    if (Country.Length != 0) hash ^= Country.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FirstLine.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FirstLine);
    }
    if (SecondLine.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SecondLine);
    }
    if (City.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(City);
    }
    if (State.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(State);
    }
    if (Zipcode.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Zipcode);
    }
    if (Country.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Country);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FirstLine.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstLine);
    }
    if (SecondLine.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondLine);
    }
    if (City.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
    }
    if (State.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
    }
    if (Zipcode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Zipcode);
    }
    if (Country.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Address other) {
    if (other == null) {
      return;
    }
    if (other.FirstLine.Length != 0) {
      FirstLine = other.FirstLine;
    }
    if (other.SecondLine.Length != 0) {
      SecondLine = other.SecondLine;
    }
    if (other.City.Length != 0) {
      City = other.City;
    }
    if (other.State.Length != 0) {
      State = other.State;
    }
    if (other.Zipcode.Length != 0) {
      Zipcode = other.Zipcode;
    }
    if (other.Country.Length != 0) {
      Country = other.Country;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          FirstLine = input.ReadString();
          break;
        }
        case 18: {
          SecondLine = input.ReadString();
          break;
        }
        case 26: {
          City = input.ReadString();
          break;
        }
        case 34: {
          State = input.ReadString();
          break;
        }
        case 42: {
          Zipcode = input.ReadString();
          break;
        }
        case 50: {
          Country = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
