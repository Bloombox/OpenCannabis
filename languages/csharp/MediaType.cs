// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaType.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from media/MediaType.proto</summary>
public static partial class MediaTypeReflection {

  #region Descriptor
  /// <summary>File descriptor for media/MediaType.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MediaTypeReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVtZWRpYS9NZWRpYVR5cGUucHJvdG8iyAEKCU1lZGlhVHlwZRIdCgRraW5k",
          "GAEgASgOMg8uTWVkaWFUeXBlLktpbmQSHgoKaW1hZ2VfdHlwZRhlIAEoCzIK",
          "LkltYWdlVHlwZRIlCg1kb2N1bWVudF90eXBlGMkBIAEoCzINLkRvY3VtZW50",
          "VHlwZRIfCgp2aWRlb190eXBlGK0CIAEoCzIKLlZpZGVvVHlwZSI0CgRLaW5k",
          "EggKBExJTksQABIJCgVJTUFHRRABEgwKCERPQ1VNRU5UEAISCQoFVklERU8Q",
          "AyJqCglJbWFnZVR5cGUSIgoEa2luZBgBIAEoDjIULkltYWdlVHlwZS5JbWFn",
          "ZUtpbmQiOQoJSW1hZ2VLaW5kEgcKA1BORxAAEgcKA0pQRxABEgcKA0dJRhAC",
          "EgcKA1NWRxADEggKBFdFQlAQBCKGAQoMRG9jdW1lbnRUeXBlEigKBGtpbmQY",
          "ASABKA4yGi5Eb2N1bWVudFR5cGUuRG9jdW1lbnRLaW5kEhIKCmNvbXByZXNz",
          "ZWQYAiABKAgiOAoMRG9jdW1lbnRLaW5kEgcKA1RYVBAAEggKBEhUTUwQARIH",
          "CgNQREYQAhIMCghNQVJLRE9XThADIlcKCVZpZGVvVHlwZRIiCgRraW5kGAEg",
          "ASgOMhQuVmlkZW9UeXBlLlZpZGVvS2luZCImCglWaWRlb0tpbmQSBwoDTVA0",
          "EAASBwoDRkxWEAESBwoDSExTEAJCKwoYaW8uYmxvb21ib3guc2NoZW1hLm1l",
          "ZGlhQg1NZWRpYUl0ZW1UeXBlUAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MediaType), global::MediaType.Parser, new[]{ "Kind", "ImageType", "DocumentType", "VideoType" }, null, new[]{ typeof(global::MediaType.Types.Kind) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ImageType), global::ImageType.Parser, new[]{ "Kind" }, null, new[]{ typeof(global::ImageType.Types.ImageKind) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DocumentType), global::DocumentType.Parser, new[]{ "Kind", "Compressed" }, null, new[]{ typeof(global::DocumentType.Types.DocumentKind) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VideoType), global::VideoType.Parser, new[]{ "Kind" }, null, new[]{ typeof(global::VideoType.Types.VideoKind) }, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// -- Media Type: Top-level -- //
/// </summary>
public sealed partial class MediaType : pb::IMessage<MediaType> {
  private static readonly pb::MessageParser<MediaType> _parser = new pb::MessageParser<MediaType>(() => new MediaType());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MediaType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MediaTypeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MediaType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MediaType(MediaType other) : this() {
    kind_ = other.kind_;
    ImageType = other.imageType_ != null ? other.ImageType.Clone() : null;
    DocumentType = other.documentType_ != null ? other.DocumentType.Clone() : null;
    VideoType = other.videoType_ != null ? other.VideoType.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MediaType Clone() {
    return new MediaType(this);
  }

  /// <summary>Field number for the "kind" field.</summary>
  public const int KindFieldNumber = 1;
  private global::MediaType.Types.Kind kind_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MediaType.Types.Kind Kind {
    get { return kind_; }
    set {
      kind_ = value;
    }
  }

  /// <summary>Field number for the "image_type" field.</summary>
  public const int ImageTypeFieldNumber = 101;
  private global::ImageType imageType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ImageType ImageType {
    get { return imageType_; }
    set {
      imageType_ = value;
    }
  }

  /// <summary>Field number for the "document_type" field.</summary>
  public const int DocumentTypeFieldNumber = 201;
  private global::DocumentType documentType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DocumentType DocumentType {
    get { return documentType_; }
    set {
      documentType_ = value;
    }
  }

  /// <summary>Field number for the "video_type" field.</summary>
  public const int VideoTypeFieldNumber = 301;
  private global::VideoType videoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VideoType VideoType {
    get { return videoType_; }
    set {
      videoType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MediaType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MediaType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Kind != other.Kind) return false;
    if (!object.Equals(ImageType, other.ImageType)) return false;
    if (!object.Equals(DocumentType, other.DocumentType)) return false;
    if (!object.Equals(VideoType, other.VideoType)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Kind != 0) hash ^= Kind.GetHashCode();
    if (imageType_ != null) hash ^= ImageType.GetHashCode();
    if (documentType_ != null) hash ^= DocumentType.GetHashCode();
    if (videoType_ != null) hash ^= VideoType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Kind != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Kind);
    }
    if (imageType_ != null) {
      output.WriteRawTag(170, 6);
      output.WriteMessage(ImageType);
    }
    if (documentType_ != null) {
      output.WriteRawTag(202, 12);
      output.WriteMessage(DocumentType);
    }
    if (videoType_ != null) {
      output.WriteRawTag(234, 18);
      output.WriteMessage(VideoType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Kind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
    }
    if (imageType_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageType);
    }
    if (documentType_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DocumentType);
    }
    if (videoType_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(VideoType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MediaType other) {
    if (other == null) {
      return;
    }
    if (other.Kind != 0) {
      Kind = other.Kind;
    }
    if (other.imageType_ != null) {
      if (imageType_ == null) {
        imageType_ = new global::ImageType();
      }
      ImageType.MergeFrom(other.ImageType);
    }
    if (other.documentType_ != null) {
      if (documentType_ == null) {
        documentType_ = new global::DocumentType();
      }
      DocumentType.MergeFrom(other.DocumentType);
    }
    if (other.videoType_ != null) {
      if (videoType_ == null) {
        videoType_ = new global::VideoType();
      }
      VideoType.MergeFrom(other.VideoType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          kind_ = (global::MediaType.Types.Kind) input.ReadEnum();
          break;
        }
        case 810: {
          if (imageType_ == null) {
            imageType_ = new global::ImageType();
          }
          input.ReadMessage(imageType_);
          break;
        }
        case 1610: {
          if (documentType_ == null) {
            documentType_ = new global::DocumentType();
          }
          input.ReadMessage(documentType_);
          break;
        }
        case 2410: {
          if (videoType_ == null) {
            videoType_ = new global::VideoType();
          }
          input.ReadMessage(videoType_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the MediaType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Kind {
      [pbr::OriginalName("LINK")] Link = 0,
      [pbr::OriginalName("IMAGE")] Image = 1,
      [pbr::OriginalName("DOCUMENT")] Document = 2,
      [pbr::OriginalName("VIDEO")] Video = 3,
    }

  }
  #endregion

}

/// <summary>
/// -- Media Type: Images -- //
/// </summary>
public sealed partial class ImageType : pb::IMessage<ImageType> {
  private static readonly pb::MessageParser<ImageType> _parser = new pb::MessageParser<ImageType>(() => new ImageType());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ImageType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MediaTypeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageType(ImageType other) : this() {
    kind_ = other.kind_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageType Clone() {
    return new ImageType(this);
  }

  /// <summary>Field number for the "kind" field.</summary>
  public const int KindFieldNumber = 1;
  private global::ImageType.Types.ImageKind kind_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ImageType.Types.ImageKind Kind {
    get { return kind_; }
    set {
      kind_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ImageType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ImageType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Kind != other.Kind) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Kind != 0) hash ^= Kind.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Kind != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Kind);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Kind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ImageType other) {
    if (other == null) {
      return;
    }
    if (other.Kind != 0) {
      Kind = other.Kind;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          kind_ = (global::ImageType.Types.ImageKind) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ImageType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ImageKind {
      [pbr::OriginalName("PNG")] Png = 0,
      [pbr::OriginalName("JPG")] Jpg = 1,
      [pbr::OriginalName("GIF")] Gif = 2,
      [pbr::OriginalName("SVG")] Svg = 3,
      [pbr::OriginalName("WEBP")] Webp = 4,
    }

  }
  #endregion

}

/// <summary>
/// -- Media Type: Document -- //
/// </summary>
public sealed partial class DocumentType : pb::IMessage<DocumentType> {
  private static readonly pb::MessageParser<DocumentType> _parser = new pb::MessageParser<DocumentType>(() => new DocumentType());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DocumentType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MediaTypeReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DocumentType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DocumentType(DocumentType other) : this() {
    kind_ = other.kind_;
    compressed_ = other.compressed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DocumentType Clone() {
    return new DocumentType(this);
  }

  /// <summary>Field number for the "kind" field.</summary>
  public const int KindFieldNumber = 1;
  private global::DocumentType.Types.DocumentKind kind_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DocumentType.Types.DocumentKind Kind {
    get { return kind_; }
    set {
      kind_ = value;
    }
  }

  /// <summary>Field number for the "compressed" field.</summary>
  public const int CompressedFieldNumber = 2;
  private bool compressed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Compressed {
    get { return compressed_; }
    set {
      compressed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DocumentType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DocumentType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Kind != other.Kind) return false;
    if (Compressed != other.Compressed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Kind != 0) hash ^= Kind.GetHashCode();
    if (Compressed != false) hash ^= Compressed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Kind != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Kind);
    }
    if (Compressed != false) {
      output.WriteRawTag(16);
      output.WriteBool(Compressed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Kind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
    }
    if (Compressed != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DocumentType other) {
    if (other == null) {
      return;
    }
    if (other.Kind != 0) {
      Kind = other.Kind;
    }
    if (other.Compressed != false) {
      Compressed = other.Compressed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          kind_ = (global::DocumentType.Types.DocumentKind) input.ReadEnum();
          break;
        }
        case 16: {
          Compressed = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the DocumentType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum DocumentKind {
      [pbr::OriginalName("TXT")] Txt = 0,
      [pbr::OriginalName("HTML")] Html = 1,
      [pbr::OriginalName("PDF")] Pdf = 2,
      [pbr::OriginalName("MARKDOWN")] Markdown = 3,
    }

  }
  #endregion

}

/// <summary>
/// -- Media Type: Video -- //
/// </summary>
public sealed partial class VideoType : pb::IMessage<VideoType> {
  private static readonly pb::MessageParser<VideoType> _parser = new pb::MessageParser<VideoType>(() => new VideoType());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VideoType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MediaTypeReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoType(VideoType other) : this() {
    kind_ = other.kind_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VideoType Clone() {
    return new VideoType(this);
  }

  /// <summary>Field number for the "kind" field.</summary>
  public const int KindFieldNumber = 1;
  private global::VideoType.Types.VideoKind kind_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::VideoType.Types.VideoKind Kind {
    get { return kind_; }
    set {
      kind_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VideoType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VideoType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Kind != other.Kind) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Kind != 0) hash ^= Kind.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Kind != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Kind);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Kind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VideoType other) {
    if (other == null) {
      return;
    }
    if (other.Kind != 0) {
      Kind = other.Kind;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          kind_ = (global::VideoType.Types.VideoKind) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the VideoType message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum VideoKind {
      [pbr::OriginalName("MP4")] Mp4 = 0,
      [pbr::OriginalName("FLV")] Flv = 1,
      [pbr::OriginalName("HLS")] Hls = 2,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
