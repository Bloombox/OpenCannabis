// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: content/ProductContent.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ProductContent: SwiftProtobuf.Message {
  public static let protoMessageName: String = "ProductContent"

  /// -- Basic Properties
  public var name: Name {
    get {return _storage._name ?? Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  /// narrative summary
  public var summary: Content {
    get {return _storage._summary ?? Content()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {_storage._summary = nil}

  /// product's brand
  public var brand: Brand {
    get {return _storage._brand ?? Brand()}
    set {_uniqueStorage()._brand = newValue}
  }
  /// Returns true if `brand` has been explicitly set.
  public var hasBrand: Bool {return _storage._brand != nil}
  /// Clears the value of `brand`. Subsequent reads from it will return its default value.
  public mutating func clearBrand() {_storage._brand = nil}

  /// -- Media
  public var media: [MediaItem] {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  /// -- Extended Attributes
  public var usage: Content {
    get {return _storage._usage ?? Content()}
    set {_uniqueStorage()._usage = newValue}
  }
  /// Returns true if `usage` has been explicitly set.
  public var hasUsage: Bool {return _storage._usage != nil}
  /// Clears the value of `usage`. Subsequent reads from it will return its default value.
  public mutating func clearUsage() {_storage._usage = nil}

  /// dosage advice
  public var dosage: Content {
    get {return _storage._dosage ?? Content()}
    set {_uniqueStorage()._dosage = newValue}
  }
  /// Returns true if `dosage` has been explicitly set.
  public var hasDosage: Bool {return _storage._dosage != nil}
  /// Clears the value of `dosage`. Subsequent reads from it will return its default value.
  public mutating func clearDosage() {_storage._dosage = nil}

  /// internal advice
  public var advice: Content {
    get {return _storage._advice ?? Content()}
    set {_uniqueStorage()._advice = newValue}
  }
  /// Returns true if `advice` has been explicitly set.
  public var hasAdvice: Bool {return _storage._advice != nil}
  /// Clears the value of `advice`. Subsequent reads from it will return its default value.
  public mutating func clearAdvice() {_storage._advice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._summary)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._brand)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._media)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._usage)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._dosage)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._advice)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._summary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._brand {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._media.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._media, fieldNumber: 20)
      }
      if let v = _storage._usage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._dosage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._advice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProductContent: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "summary"),
    3: .same(proto: "brand"),
    20: .same(proto: "media"),
    30: .same(proto: "usage"),
    31: .same(proto: "dosage"),
    32: .same(proto: "advice"),
  ]

  fileprivate class _StorageClass {
    var _name: Name? = nil
    var _summary: Content? = nil
    var _brand: Brand? = nil
    var _media: [MediaItem] = []
    var _usage: Content? = nil
    var _dosage: Content? = nil
    var _advice: Content? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _summary = source._summary
      _brand = source._brand
      _media = source._media
      _usage = source._usage
      _dosage = source._dosage
      _advice = source._advice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: ProductContent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._summary != other_storage._summary {return false}
        if _storage._brand != other_storage._brand {return false}
        if _storage._media != other_storage._media {return false}
        if _storage._usage != other_storage._usage {return false}
        if _storage._dosage != other_storage._dosage {return false}
        if _storage._advice != other_storage._advice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
