// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: media/MediaType.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// -- Media Type: Top-level -- //
public struct MediaType: SwiftProtobuf.Message {
  public static let protoMessageName: String = "MediaType"

  public var kind: MediaType.Kind {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  public var imageType: ImageType {
    get {return _storage._imageType ?? ImageType()}
    set {_uniqueStorage()._imageType = newValue}
  }
  /// Returns true if `imageType` has been explicitly set.
  public var hasImageType: Bool {return _storage._imageType != nil}
  /// Clears the value of `imageType`. Subsequent reads from it will return its default value.
  public mutating func clearImageType() {_storage._imageType = nil}

  public var documentType: DocumentType {
    get {return _storage._documentType ?? DocumentType()}
    set {_uniqueStorage()._documentType = newValue}
  }
  /// Returns true if `documentType` has been explicitly set.
  public var hasDocumentType: Bool {return _storage._documentType != nil}
  /// Clears the value of `documentType`. Subsequent reads from it will return its default value.
  public mutating func clearDocumentType() {_storage._documentType = nil}

  public var videoType: VideoType {
    get {return _storage._videoType ?? VideoType()}
    set {_uniqueStorage()._videoType = newValue}
  }
  /// Returns true if `videoType` has been explicitly set.
  public var hasVideoType: Bool {return _storage._videoType != nil}
  /// Clears the value of `videoType`. Subsequent reads from it will return its default value.
  public mutating func clearVideoType() {_storage._videoType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Kind: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case link // = 0
    case image // = 1
    case document // = 2
    case video // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .link
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .link
      case 1: self = .image
      case 2: self = .document
      case 3: self = .video
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .link: return 0
      case .image: return 1
      case .document: return 2
      case .video: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._kind)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._imageType)
        case 201: try decoder.decodeSingularMessageField(value: &_storage._documentType)
        case 301: try decoder.decodeSingularMessageField(value: &_storage._videoType)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._kind != .link {
        try visitor.visitSingularEnumField(value: _storage._kind, fieldNumber: 1)
      }
      if let v = _storage._imageType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
      if let v = _storage._documentType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
      }
      if let v = _storage._videoType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 301)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// -- Media Type: Images -- //
public struct ImageType: SwiftProtobuf.Message {
  public static let protoMessageName: String = "ImageType"

  public var kind: ImageType.ImageKind = .png

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum ImageKind: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case png // = 0
    case jpg // = 1
    case gif // = 2
    case svg // = 3
    case webp // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .png
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .png
      case 1: self = .jpg
      case 2: self = .gif
      case 3: self = .svg
      case 4: self = .webp
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .png: return 0
      case .jpg: return 1
      case .gif: return 2
      case .svg: return 3
      case .webp: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .png {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Media Type: Document -- //
public struct DocumentType: SwiftProtobuf.Message {
  public static let protoMessageName: String = "DocumentType"

  public var kind: DocumentType.DocumentKind = .txt

  public var compressed: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum DocumentKind: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case txt // = 0
    case html // = 1
    case pdf // = 2
    case markdown // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .txt
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .txt
      case 1: self = .html
      case 2: self = .pdf
      case 3: self = .markdown
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .txt: return 0
      case .html: return 1
      case .pdf: return 2
      case .markdown: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      case 2: try decoder.decodeSingularBoolField(value: &self.compressed)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .txt {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if self.compressed != false {
      try visitor.visitSingularBoolField(value: self.compressed, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Media Type: Video -- //
public struct VideoType: SwiftProtobuf.Message {
  public static let protoMessageName: String = "VideoType"

  public var kind: VideoType.VideoKind = .mp4

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum VideoKind: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case mp4 // = 0
    case flv // = 1
    case hls // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .mp4
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mp4
      case 1: self = .flv
      case 2: self = .hls
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .mp4: return 0
      case .flv: return 1
      case .hls: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .mp4 {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MediaType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    101: .standard(proto: "image_type"),
    201: .standard(proto: "document_type"),
    301: .standard(proto: "video_type"),
  ]

  fileprivate class _StorageClass {
    var _kind: MediaType.Kind = .link
    var _imageType: ImageType? = nil
    var _documentType: DocumentType? = nil
    var _videoType: VideoType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _kind = source._kind
      _imageType = source._imageType
      _documentType = source._documentType
      _videoType = source._videoType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: MediaType) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._kind != other_storage._kind {return false}
        if _storage._imageType != other_storage._imageType {return false}
        if _storage._documentType != other_storage._documentType {return false}
        if _storage._videoType != other_storage._videoType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MediaType.Kind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LINK"),
    1: .same(proto: "IMAGE"),
    2: .same(proto: "DOCUMENT"),
    3: .same(proto: "VIDEO"),
  ]
}

extension ImageType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
  ]

  public func _protobuf_generated_isEqualTo(other: ImageType) -> Bool {
    if self.kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ImageType.ImageKind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PNG"),
    1: .same(proto: "JPG"),
    2: .same(proto: "GIF"),
    3: .same(proto: "SVG"),
    4: .same(proto: "WEBP"),
  ]
}

extension DocumentType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "compressed"),
  ]

  public func _protobuf_generated_isEqualTo(other: DocumentType) -> Bool {
    if self.kind != other.kind {return false}
    if self.compressed != other.compressed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentType.DocumentKind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TXT"),
    1: .same(proto: "HTML"),
    2: .same(proto: "PDF"),
    3: .same(proto: "MARKDOWN"),
  ]
}

extension VideoType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
  ]

  public func _protobuf_generated_isEqualTo(other: VideoType) -> Bool {
    if self.kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension VideoType.VideoKind: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MP4"),
    1: .same(proto: "FLV"),
    2: .same(proto: "HLS"),
  ]
}
