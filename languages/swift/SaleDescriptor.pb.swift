// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/pricing/SaleDescriptor.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum SaleType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case percentage // = 0
  case bogo // = 1
  case loyalty // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .percentage
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .percentage
    case 1: self = .bogo
    case 2: self = .loyalty
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .percentage: return 0
    case .bogo: return 1
    case .loyalty: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct SaleDescriptor: SwiftProtobuf.Message {
  public static let protoMessageName: String = "SaleDescriptor"

  /// sale metadata
  public var type: SaleType = .percentage

  public var effective: UInt64 = 0

  public var expiration: UInt64 = 0

  /// sale amount and trigger properties
  public var percentageAmount: UInt32 = 0

  public var bogoTrigger: UInt32 = 0

  public var bogoReward: UInt32 = 0

  public var loyaltyTrigger: UInt32 = 0

  public var loyaltyReward: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.effective)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.expiration)
      case 20: try decoder.decodeSingularUInt32Field(value: &self.percentageAmount)
      case 21: try decoder.decodeSingularUInt32Field(value: &self.bogoTrigger)
      case 22: try decoder.decodeSingularUInt32Field(value: &self.bogoReward)
      case 23: try decoder.decodeSingularUInt32Field(value: &self.loyaltyTrigger)
      case 24: try decoder.decodeSingularUInt32Field(value: &self.loyaltyReward)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .percentage {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.effective != 0 {
      try visitor.visitSingularUInt64Field(value: self.effective, fieldNumber: 2)
    }
    if self.expiration != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiration, fieldNumber: 3)
    }
    if self.percentageAmount != 0 {
      try visitor.visitSingularUInt32Field(value: self.percentageAmount, fieldNumber: 20)
    }
    if self.bogoTrigger != 0 {
      try visitor.visitSingularUInt32Field(value: self.bogoTrigger, fieldNumber: 21)
    }
    if self.bogoReward != 0 {
      try visitor.visitSingularUInt32Field(value: self.bogoReward, fieldNumber: 22)
    }
    if self.loyaltyTrigger != 0 {
      try visitor.visitSingularUInt32Field(value: self.loyaltyTrigger, fieldNumber: 23)
    }
    if self.loyaltyReward != 0 {
      try visitor.visitSingularUInt32Field(value: self.loyaltyReward, fieldNumber: 24)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SaleType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERCENTAGE"),
    1: .same(proto: "BOGO"),
    2: .same(proto: "LOYALTY"),
  ]
}

extension SaleDescriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "effective"),
    3: .same(proto: "expiration"),
    20: .standard(proto: "percentage_amount"),
    21: .standard(proto: "bogo_trigger"),
    22: .standard(proto: "bogo_reward"),
    23: .standard(proto: "loyalty_trigger"),
    24: .standard(proto: "loyalty_reward"),
  ]

  public func _protobuf_generated_isEqualTo(other: SaleDescriptor) -> Bool {
    if self.type != other.type {return false}
    if self.effective != other.effective {return false}
    if self.expiration != other.expiration {return false}
    if self.percentageAmount != other.percentageAmount {return false}
    if self.bogoTrigger != other.bogoTrigger {return false}
    if self.bogoReward != other.bogoReward {return false}
    if self.loyaltyTrigger != other.loyaltyTrigger {return false}
    if self.loyaltyReward != other.loyaltyReward {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
