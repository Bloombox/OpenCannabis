// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/pricing/PricingDescriptor.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// -- Pricing: Objects
public enum PricingType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unit // = 0
  case weighted // = 1
  case freebie // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unit
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unit
    case 1: self = .weighted
    case 2: self = .freebie
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unit: return 0
    case .weighted: return 1
    case .freebie: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum PricingWeightTier: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case other // = 0
  case gram // = 1
  case halfgram // = 2
  case quartergram // = 3
  case dub // = 4
  case eighth // = 5
  case quarter // = 6
  case half // = 7
  case ounce // = 8
  case pound // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .other
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .other
    case 1: self = .gram
    case 2: self = .halfgram
    case 3: self = .quartergram
    case 4: self = .dub
    case 5: self = .eighth
    case 6: self = .quarter
    case 7: self = .half
    case 8: self = .ounce
    case 9: self = .pound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .other: return 0
    case .gram: return 1
    case .halfgram: return 2
    case .quartergram: return 3
    case .dub: return 4
    case .eighth: return 5
    case .quarter: return 6
    case .half: return 7
    case .ounce: return 8
    case .pound: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct PricingTierAvailability: SwiftProtobuf.Message {
  public static let protoMessageName: String = "PricingTierAvailability"

  public var offered: Bool = false

  public var available: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.offered)
      case 2: try decoder.decodeSingularBoolField(value: &self.available)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offered != false {
      try visitor.visitSingularBoolField(value: self.offered, fieldNumber: 1)
    }
    if self.available != false {
      try visitor.visitSingularBoolField(value: self.available, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Pricing: Typed Descriptors
public struct UnitPricingDescriptor: SwiftProtobuf.Message {
  public static let protoMessageName: String = "UnitPricingDescriptor"

  public var priceValue: Float {
    get {return _storage._priceValue}
    set {_uniqueStorage()._priceValue = newValue}
  }

  public var status: PricingTierAvailability {
    get {return _storage._status ?? PricingTierAvailability()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_storage._status = nil}

  public var discounts: [SaleDescriptor] {
    get {return _storage._discounts}
    set {_uniqueStorage()._discounts = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFloatField(value: &_storage._priceValue)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._status)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._discounts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._priceValue != 0 {
        try visitor.visitSingularFloatField(value: _storage._priceValue, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._discounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._discounts, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct WeightedPricingDescriptor: SwiftProtobuf.Message {
  public static let protoMessageName: String = "WeightedPricingDescriptor"

  public var weight: PricingWeightTier {
    get {return _storage._weight}
    set {_uniqueStorage()._weight = newValue}
  }

  public var tier: UnitPricingDescriptor {
    get {return _storage._tier ?? UnitPricingDescriptor()}
    set {_uniqueStorage()._tier = newValue}
  }
  /// Returns true if `tier` has been explicitly set.
  public var hasTier: Bool {return _storage._tier != nil}
  /// Clears the value of `tier`. Subsequent reads from it will return its default value.
  public mutating func clearTier() {_storage._tier = nil}

  public var weightInGrams: Float {
    get {return _storage._weightInGrams}
    set {_uniqueStorage()._weightInGrams = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._weight)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tier)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._weightInGrams)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._weight != .other {
        try visitor.visitSingularEnumField(value: _storage._weight, fieldNumber: 1)
      }
      if let v = _storage._tier {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._weightInGrams != 0 {
        try visitor.visitSingularFloatField(value: _storage._weightInGrams, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct FreebiePricingDescriptor: SwiftProtobuf.Message {
  public static let protoMessageName: String = "FreebiePricingDescriptor"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Pricing: Main Descriptor
public struct PricingDescriptor: SwiftProtobuf.Message {
  public static let protoMessageName: String = "PricingDescriptor"

  public var type: PricingType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// -- descriptors
  public var unit: UnitPricingDescriptor {
    get {return _storage._unit ?? UnitPricingDescriptor()}
    set {_uniqueStorage()._unit = newValue}
  }
  /// Returns true if `unit` has been explicitly set.
  public var hasUnit: Bool {return _storage._unit != nil}
  /// Clears the value of `unit`. Subsequent reads from it will return its default value.
  public mutating func clearUnit() {_storage._unit = nil}

  public var weighted: WeightedPricingDescriptor {
    get {return _storage._weighted ?? WeightedPricingDescriptor()}
    set {_uniqueStorage()._weighted = newValue}
  }
  /// Returns true if `weighted` has been explicitly set.
  public var hasWeighted: Bool {return _storage._weighted != nil}
  /// Clears the value of `weighted`. Subsequent reads from it will return its default value.
  public mutating func clearWeighted() {_storage._weighted = nil}

  public var freebie: FreebiePricingDescriptor {
    get {return _storage._freebie ?? FreebiePricingDescriptor()}
    set {_uniqueStorage()._freebie = newValue}
  }
  /// Returns true if `freebie` has been explicitly set.
  public var hasFreebie: Bool {return _storage._freebie != nil}
  /// Clears the value of `freebie`. Subsequent reads from it will return its default value.
  public mutating func clearFreebie() {_storage._freebie = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._unit)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._weighted)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._freebie)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unit {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._unit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._weighted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._freebie {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// -- Pricing: Product-level Object
public struct ProductPricing: SwiftProtobuf.Message {
  public static let protoMessageName: String = "ProductPricing"

  public var discounts: [SaleDescriptor] = []

  public var manifest: [PricingDescriptor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.discounts)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.manifest)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.discounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discounts, fieldNumber: 1)
    }
    if !self.manifest.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.manifest, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PricingType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNIT"),
    1: .same(proto: "WEIGHTED"),
    2: .same(proto: "FREEBIE"),
  ]
}

extension PricingWeightTier: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "GRAM"),
    2: .same(proto: "HALFGRAM"),
    3: .same(proto: "QUARTERGRAM"),
    4: .same(proto: "DUB"),
    5: .same(proto: "EIGHTH"),
    6: .same(proto: "QUARTER"),
    7: .same(proto: "HALF"),
    8: .same(proto: "OUNCE"),
    9: .same(proto: "POUND"),
  ]
}

extension PricingTierAvailability: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offered"),
    2: .same(proto: "available"),
  ]

  public func _protobuf_generated_isEqualTo(other: PricingTierAvailability) -> Bool {
    if self.offered != other.offered {return false}
    if self.available != other.available {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension UnitPricingDescriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "price_value"),
    2: .same(proto: "status"),
    3: .same(proto: "discounts"),
  ]

  fileprivate class _StorageClass {
    var _priceValue: Float = 0
    var _status: PricingTierAvailability? = nil
    var _discounts: [SaleDescriptor] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _priceValue = source._priceValue
      _status = source._status
      _discounts = source._discounts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: UnitPricingDescriptor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._priceValue != other_storage._priceValue {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._discounts != other_storage._discounts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension WeightedPricingDescriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weight"),
    2: .same(proto: "tier"),
    3: .same(proto: "weightInGrams"),
  ]

  fileprivate class _StorageClass {
    var _weight: PricingWeightTier = .other
    var _tier: UnitPricingDescriptor? = nil
    var _weightInGrams: Float = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _weight = source._weight
      _tier = source._tier
      _weightInGrams = source._weightInGrams
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: WeightedPricingDescriptor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._weight != other_storage._weight {return false}
        if _storage._tier != other_storage._tier {return false}
        if _storage._weightInGrams != other_storage._weightInGrams {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension FreebiePricingDescriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: FreebiePricingDescriptor) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PricingDescriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    20: .same(proto: "unit"),
    21: .same(proto: "weighted"),
    22: .same(proto: "freebie"),
  ]

  fileprivate class _StorageClass {
    var _type: PricingType = .unit
    var _unit: UnitPricingDescriptor? = nil
    var _weighted: WeightedPricingDescriptor? = nil
    var _freebie: FreebiePricingDescriptor? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _unit = source._unit
      _weighted = source._weighted
      _freebie = source._freebie
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: PricingDescriptor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._unit != other_storage._unit {return false}
        if _storage._weighted != other_storage._weighted {return false}
        if _storage._freebie != other_storage._freebie {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProductPricing: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "discounts"),
    2: .same(proto: "manifest"),
  ]

  public func _protobuf_generated_isEqualTo(other: ProductPricing) -> Bool {
    if self.discounts != other.discounts {return false}
    if self.manifest != other.manifest {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
