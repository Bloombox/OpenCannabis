// Generated by the protocol buffer compiler.  DO NOT EDIT!

package io.bloombox.schema.content.nano;

@SuppressWarnings("hiding")
public final class Content extends
    com.google.protobuf.nano.MessageNano {

  // enum Type
  public static final int TEXT = 0;
  public static final int MARKDOWN = 1;
  public static final int HTML = 2;

  // enum Encoding
  public static final int UTF8 = 0;

  private static volatile Content[] _emptyArray;
  public static Content[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new Content[0];
        }
      }
    }
    return _emptyArray;
  }

  // .Content.Type type = 1;
  public int type;

  // .Content.Encoding encoding = 2;
  public int encoding;

  // bytes content = 3;
  public byte[] content;

  // .Language language = 4;
  public int language;

  // .Compression compression = 5;
  public io.bloombox.schema.base.nano.Compression compression;

  public Content() {
    clear();
  }

  public Content clear() {
    type = io.bloombox.schema.content.nano.Content.TEXT;
    encoding = io.bloombox.schema.content.nano.Content.UTF8;
    content = com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES;
    language = io.bloombox.schema.base.nano.BaseLanguage.ENGLISH;
    compression = null;
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (this.type != io.bloombox.schema.content.nano.Content.TEXT) {
      output.writeInt32(1, this.type);
    }
    if (this.encoding != io.bloombox.schema.content.nano.Content.UTF8) {
      output.writeInt32(2, this.encoding);
    }
    if (!java.util.Arrays.equals(this.content, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      output.writeBytes(3, this.content);
    }
    if (this.language != io.bloombox.schema.base.nano.BaseLanguage.ENGLISH) {
      output.writeInt32(4, this.language);
    }
    if (this.compression != null) {
      output.writeMessage(5, this.compression);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (this.type != io.bloombox.schema.content.nano.Content.TEXT) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(1, this.type);
    }
    if (this.encoding != io.bloombox.schema.content.nano.Content.UTF8) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(2, this.encoding);
    }
    if (!java.util.Arrays.equals(this.content, com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES)) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeBytesSize(3, this.content);
    }
    if (this.language != io.bloombox.schema.base.nano.BaseLanguage.ENGLISH) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(4, this.language);
    }
    if (this.compression != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeMessageSize(5, this.compression);
    }
    return size;
  }

  @Override
  public Content mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 8: {
          int value = input.readInt32();
          switch (value) {
            case io.bloombox.schema.content.nano.Content.TEXT:
            case io.bloombox.schema.content.nano.Content.MARKDOWN:
            case io.bloombox.schema.content.nano.Content.HTML:
              this.type = value;
              break;
          }
          break;
        }
        case 16: {
          int value = input.readInt32();
          switch (value) {
            case io.bloombox.schema.content.nano.Content.UTF8:
              this.encoding = value;
              break;
          }
          break;
        }
        case 26: {
          this.content = input.readBytes();
          break;
        }
        case 32: {
          int value = input.readInt32();
          switch (value) {
            case io.bloombox.schema.base.nano.BaseLanguage.ENGLISH:
            case io.bloombox.schema.base.nano.BaseLanguage.SPANISH:
            case io.bloombox.schema.base.nano.BaseLanguage.FRENCH:
              this.language = value;
              break;
          }
          break;
        }
        case 42: {
          if (this.compression == null) {
            this.compression = new io.bloombox.schema.base.nano.Compression();
          }
          input.readMessage(this.compression);
          break;
        }
      }
    }
  }

  public static Content parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new Content(), data);
  }

  public static Content parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new Content().mergeFrom(input);
  }
}
