// Generated by the protocol buffer compiler.  DO NOT EDIT!

package io.bloombox.schema.content.nano;

@SuppressWarnings("hiding")
public final class MaterialsData extends
    com.google.protobuf.nano.MessageNano {

  private static volatile MaterialsData[] _emptyArray;
  public static MaterialsData[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new MaterialsData[0];
        }
      }
    }
    return _emptyArray;
  }

  // repeated string ingredients = 1;
  public java.lang.String[] ingredients;

  // .Grow grow = 2;
  public int grow;

  // .Species species = 3;
  public int species;

  // .Genetics genetics = 4;
  public io.bloombox.schema.product.struct.nano.Genetics genetics;

  public MaterialsData() {
    clear();
  }

  public MaterialsData clear() {
    ingredients = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
    grow = io.bloombox.schema.product.struct.nano.MaterialGrow.GENERIC;
    species = io.bloombox.schema.product.struct.nano.MaterialSpecies.UNSPECIFIED;
    genetics = null;
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (this.ingredients != null && this.ingredients.length > 0) {
      for (int i = 0; i < this.ingredients.length; i++) {
        java.lang.String element = this.ingredients[i];
        if (element != null) {
          output.writeString(1, element);
        }
      }
    }
    if (this.grow != io.bloombox.schema.product.struct.nano.MaterialGrow.GENERIC) {
      output.writeInt32(2, this.grow);
    }
    if (this.species != io.bloombox.schema.product.struct.nano.MaterialSpecies.UNSPECIFIED) {
      output.writeInt32(3, this.species);
    }
    if (this.genetics != null) {
      output.writeMessage(4, this.genetics);
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (this.ingredients != null && this.ingredients.length > 0) {
      int dataCount = 0;
      int dataSize = 0;
      for (int i = 0; i < this.ingredients.length; i++) {
        java.lang.String element = this.ingredients[i];
        if (element != null) {
          dataCount++;
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSizeNoTag(element);
        }
      }
      size += dataSize;
      size += 1 * dataCount;
    }
    if (this.grow != io.bloombox.schema.product.struct.nano.MaterialGrow.GENERIC) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(2, this.grow);
    }
    if (this.species != io.bloombox.schema.product.struct.nano.MaterialSpecies.UNSPECIFIED) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeInt32Size(3, this.species);
    }
    if (this.genetics != null) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
        .computeMessageSize(4, this.genetics);
    }
    return size;
  }

  @Override
  public MaterialsData mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 10: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 10);
          int i = this.ingredients == null ? 0 : this.ingredients.length;
          java.lang.String[] newArray = new java.lang.String[i + arrayLength];
          if (i != 0) {
            java.lang.System.arraycopy(this.ingredients, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = input.readString();
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = input.readString();
          this.ingredients = newArray;
          break;
        }
        case 16: {
          int value = input.readInt32();
          switch (value) {
            case io.bloombox.schema.product.struct.nano.MaterialGrow.GENERIC:
            case io.bloombox.schema.product.struct.nano.MaterialGrow.INDOOR:
            case io.bloombox.schema.product.struct.nano.MaterialGrow.GREENHOUSE:
            case io.bloombox.schema.product.struct.nano.MaterialGrow.OUTDOOR:
              this.grow = value;
              break;
          }
          break;
        }
        case 24: {
          int value = input.readInt32();
          switch (value) {
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.UNSPECIFIED:
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.SATIVA:
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.HYBRID_SATIVA:
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.HYBRID:
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.HYBRID_INDICA:
            case io.bloombox.schema.product.struct.nano.MaterialSpecies.INDICA:
              this.species = value;
              break;
          }
          break;
        }
        case 34: {
          if (this.genetics == null) {
            this.genetics = new io.bloombox.schema.product.struct.nano.Genetics();
          }
          input.readMessage(this.genetics);
          break;
        }
      }
    }
  }

  public static MaterialsData parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new MaterialsData(), data);
  }

  public static MaterialsData parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new MaterialsData().mergeFrom(input);
  }
}
