/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.Address');
goog.provide('proto.Brand');
goog.provide('proto.Compression');
goog.provide('proto.Compression.Type');
goog.provide('proto.Content');
goog.provide('proto.Content.Encoding');
goog.provide('proto.Content.Type');
goog.provide('proto.DocumentType');
goog.provide('proto.DocumentType.DocumentKind');
goog.provide('proto.FlagsDescriptor');
goog.provide('proto.Flower');
goog.provide('proto.FreebiePricingDescriptor');
goog.provide('proto.Genetics');
goog.provide('proto.Grow');
goog.provide('proto.ImageType');
goog.provide('proto.ImageType.ImageKind');
goog.provide('proto.Language');
goog.provide('proto.MaterialsData');
goog.provide('proto.MediaItem');
goog.provide('proto.MediaKey');
goog.provide('proto.MediaType');
goog.provide('proto.MediaType.Kind');
goog.provide('proto.Name');
goog.provide('proto.PricingDescriptor');
goog.provide('proto.PricingTierAvailability');
goog.provide('proto.PricingType');
goog.provide('proto.PricingWeightTier');
goog.provide('proto.Product');
goog.provide('proto.ProductContent');
goog.provide('proto.ProductFlag');
goog.provide('proto.ProductFlagValue');
goog.provide('proto.ProductFlagset');
goog.provide('proto.ProductKey');
goog.provide('proto.ProductKind');
goog.provide('proto.ProductPricing');
goog.provide('proto.ProductType');
goog.provide('proto.SaleDescriptor');
goog.provide('proto.SaleType');
goog.provide('proto.Species');
goog.provide('proto.UnitPricingDescriptor');
goog.provide('proto.VideoType');
goog.provide('proto.VideoType.VideoKind');
goog.provide('proto.WeightedPricingDescriptor');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Any');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProductKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductKey.displayName = 'proto.ProductKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductKey.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductKey}
 */
proto.ProductKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductKey;
  return proto.ProductKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductKey}
 */
proto.ProductKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ProductKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ProductKey.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ProductKind = {
  FLOWERS: 0,
  EDIBLES: 1,
  EXTRACTS: 2,
  PREROLLS: 3,
  APOTHECARY: 4,
  CARTRIDGES: 5,
  PLANTS: 6,
  MERCHANDISE: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProductType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductType.displayName = 'proto.ProductType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductType.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductType}
 */
proto.ProductType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductType;
  return proto.ProductType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductType}
 */
proto.ProductType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProductKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ProductKind kind = 1;
 * @return {!proto.ProductKind}
 */
proto.ProductType.prototype.getKind = function() {
  return /** @type {!proto.ProductKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ProductKind} value */
proto.ProductType.prototype.setKind = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Product.displayName = 'proto.Product';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.ProductKey.toObject(includeInstance, f),
    type: (f = msg.getType()) && proto.ProductType.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.google.protobuf.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Product;
  return proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProductKey;
      reader.readMessage(value,proto.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.ProductType;
      reader.readMessage(value,proto.ProductType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 3:
      var value = new proto.google.protobuf.Any;
      reader.readMessage(value,proto.google.protobuf.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProductType.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.google.protobuf.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProductKey key = 1;
 * @return {?proto.ProductKey}
 */
proto.Product.prototype.getKey = function() {
  return /** @type{?proto.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.ProductKey, 1));
};


/** @param {?proto.ProductKey|undefined} value */
proto.Product.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Product.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Product.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductType type = 2;
 * @return {?proto.ProductType}
 */
proto.Product.prototype.getType = function() {
  return /** @type{?proto.ProductType} */ (
    jspb.Message.getWrapperField(this, proto.ProductType, 2));
};


/** @param {?proto.ProductType|undefined} value */
proto.Product.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Product.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Product.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.Product.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.Product.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Product.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Product.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Compression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Compression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Compression.displayName = 'proto.Compression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Compression.prototype.toObject = function(opt_includeInstance) {
  return proto.Compression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Compression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Compression.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getFieldWithDefault(msg, 1, false),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Compression}
 */
proto.Compression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Compression;
  return proto.Compression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Compression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Compression}
 */
proto.Compression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {!proto.Compression.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Compression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Compression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Compression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Compression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Compression.Type = {
  GZIP: 0
};

/**
 * optional bool enabled = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Compression.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Compression.prototype.setEnabled = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.Compression.Type}
 */
proto.Compression.prototype.getType = function() {
  return /** @type {!proto.Compression.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Compression.Type} value */
proto.Compression.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.Language = {
  ENGLISH: 0,
  SPANISH: 1,
  FRENCH: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Name = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Name, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Name.displayName = 'proto.Name';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Name.prototype.toObject = function(opt_includeInstance) {
  return proto.Name.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Name} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Name.toObject = function(includeInstance, msg) {
  var f, obj = {
    primary: jspb.Message.getFieldWithDefault(msg, 1, ""),
    display: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Name}
 */
proto.Name.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Name;
  return proto.Name.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Name} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Name}
 */
proto.Name.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrimary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Name.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Name.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Name} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Name.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimary();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplay();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string primary = 1;
 * @return {string}
 */
proto.Name.prototype.getPrimary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Name.prototype.setPrimary = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string display = 2;
 * @return {string}
 */
proto.Name.prototype.getDisplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Name.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Content.displayName = 'proto.Content';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encoding: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: msg.getContent_asB64(),
    language: jspb.Message.getFieldWithDefault(msg, 4, 0),
    compression: (f = msg.getCompression()) && proto.Compression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Content}
 */
proto.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Content;
  return proto.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Content}
 */
proto.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Content.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.Content.Encoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {!proto.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 5:
      var value = new proto.Compression;
      reader.readMessage(value,proto.Compression.deserializeBinaryFromReader);
      msg.setCompression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCompression();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Compression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Content.Type = {
  TEXT: 0,
  MARKDOWN: 1,
  HTML: 2
};

/**
 * @enum {number}
 */
proto.Content.Encoding = {
  UTF8: 0
};

/**
 * optional Type type = 1;
 * @return {!proto.Content.Type}
 */
proto.Content.prototype.getType = function() {
  return /** @type {!proto.Content.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Content.Type} value */
proto.Content.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Encoding encoding = 2;
 * @return {!proto.Content.Encoding}
 */
proto.Content.prototype.getEncoding = function() {
  return /** @type {!proto.Content.Encoding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Content.Encoding} value */
proto.Content.prototype.setEncoding = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes content = 3;
 * @return {string}
 */
proto.Content.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.Content.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.Content.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.Content.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Language language = 4;
 * @return {!proto.Language}
 */
proto.Content.prototype.getLanguage = function() {
  return /** @type {!proto.Language} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Language} value */
proto.Content.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Compression compression = 5;
 * @return {?proto.Compression}
 */
proto.Content.prototype.getCompression = function() {
  return /** @type{?proto.Compression} */ (
    jspb.Message.getWrapperField(this, proto.Compression, 5));
};


/** @param {?proto.Compression|undefined} value */
proto.Content.prototype.setCompression = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Content.prototype.clearCompression = function() {
  this.setCompression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Content.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MediaKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MediaKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MediaKey.displayName = 'proto.MediaKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MediaKey.prototype.toObject = function(opt_includeInstance) {
  return proto.MediaKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MediaKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MediaKey}
 */
proto.MediaKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MediaKey;
  return proto.MediaKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MediaKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MediaKey}
 */
proto.MediaKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MediaKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MediaKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MediaKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.MediaKey.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MediaKey.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MediaType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MediaType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MediaType.displayName = 'proto.MediaType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MediaType.prototype.toObject = function(opt_includeInstance) {
  return proto.MediaType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MediaType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    imageType: (f = msg.getImageType()) && proto.ImageType.toObject(includeInstance, f),
    documentType: (f = msg.getDocumentType()) && proto.DocumentType.toObject(includeInstance, f),
    videoType: (f = msg.getVideoType()) && proto.VideoType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MediaType}
 */
proto.MediaType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MediaType;
  return proto.MediaType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MediaType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MediaType}
 */
proto.MediaType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.MediaType.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 101:
      var value = new proto.ImageType;
      reader.readMessage(value,proto.ImageType.deserializeBinaryFromReader);
      msg.setImageType(value);
      break;
    case 201:
      var value = new proto.DocumentType;
      reader.readMessage(value,proto.DocumentType.deserializeBinaryFromReader);
      msg.setDocumentType(value);
      break;
    case 301:
      var value = new proto.VideoType;
      reader.readMessage(value,proto.VideoType.deserializeBinaryFromReader);
      msg.setVideoType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MediaType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MediaType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MediaType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImageType();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.ImageType.serializeBinaryToWriter
    );
  }
  f = message.getDocumentType();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.DocumentType.serializeBinaryToWriter
    );
  }
  f = message.getVideoType();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.VideoType.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MediaType.Kind = {
  LINK: 0,
  IMAGE: 1,
  DOCUMENT: 2,
  VIDEO: 3
};

/**
 * optional Kind kind = 1;
 * @return {!proto.MediaType.Kind}
 */
proto.MediaType.prototype.getKind = function() {
  return /** @type {!proto.MediaType.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.MediaType.Kind} value */
proto.MediaType.prototype.setKind = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ImageType image_type = 101;
 * @return {?proto.ImageType}
 */
proto.MediaType.prototype.getImageType = function() {
  return /** @type{?proto.ImageType} */ (
    jspb.Message.getWrapperField(this, proto.ImageType, 101));
};


/** @param {?proto.ImageType|undefined} value */
proto.MediaType.prototype.setImageType = function(value) {
  jspb.Message.setWrapperField(this, 101, value);
};


proto.MediaType.prototype.clearImageType = function() {
  this.setImageType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MediaType.prototype.hasImageType = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional DocumentType document_type = 201;
 * @return {?proto.DocumentType}
 */
proto.MediaType.prototype.getDocumentType = function() {
  return /** @type{?proto.DocumentType} */ (
    jspb.Message.getWrapperField(this, proto.DocumentType, 201));
};


/** @param {?proto.DocumentType|undefined} value */
proto.MediaType.prototype.setDocumentType = function(value) {
  jspb.Message.setWrapperField(this, 201, value);
};


proto.MediaType.prototype.clearDocumentType = function() {
  this.setDocumentType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MediaType.prototype.hasDocumentType = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional VideoType video_type = 301;
 * @return {?proto.VideoType}
 */
proto.MediaType.prototype.getVideoType = function() {
  return /** @type{?proto.VideoType} */ (
    jspb.Message.getWrapperField(this, proto.VideoType, 301));
};


/** @param {?proto.VideoType|undefined} value */
proto.MediaType.prototype.setVideoType = function(value) {
  jspb.Message.setWrapperField(this, 301, value);
};


proto.MediaType.prototype.clearVideoType = function() {
  this.setVideoType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MediaType.prototype.hasVideoType = function() {
  return jspb.Message.getField(this, 301) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ImageType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ImageType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ImageType.displayName = 'proto.ImageType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ImageType.prototype.toObject = function(opt_includeInstance) {
  return proto.ImageType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ImageType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ImageType}
 */
proto.ImageType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ImageType;
  return proto.ImageType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ImageType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ImageType}
 */
proto.ImageType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ImageType.ImageKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ImageType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ImageType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ImageType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ImageType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ImageType.ImageKind = {
  PNG: 0,
  JPG: 1,
  GIF: 2,
  SVG: 3,
  WEBP: 4
};

/**
 * optional ImageKind kind = 1;
 * @return {!proto.ImageType.ImageKind}
 */
proto.ImageType.prototype.getKind = function() {
  return /** @type {!proto.ImageType.ImageKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ImageType.ImageKind} value */
proto.ImageType.prototype.setKind = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DocumentType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DocumentType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DocumentType.displayName = 'proto.DocumentType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DocumentType.prototype.toObject = function(opt_includeInstance) {
  return proto.DocumentType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DocumentType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DocumentType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compressed: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DocumentType}
 */
proto.DocumentType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DocumentType;
  return proto.DocumentType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DocumentType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DocumentType}
 */
proto.DocumentType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DocumentType.DocumentKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompressed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DocumentType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DocumentType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DocumentType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DocumentType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCompressed();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.DocumentType.DocumentKind = {
  TXT: 0,
  HTML: 1,
  PDF: 2,
  MARKDOWN: 3
};

/**
 * optional DocumentKind kind = 1;
 * @return {!proto.DocumentType.DocumentKind}
 */
proto.DocumentType.prototype.getKind = function() {
  return /** @type {!proto.DocumentType.DocumentKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DocumentType.DocumentKind} value */
proto.DocumentType.prototype.setKind = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool compressed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DocumentType.prototype.getCompressed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.DocumentType.prototype.setCompressed = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VideoType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VideoType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.VideoType.displayName = 'proto.VideoType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VideoType.prototype.toObject = function(opt_includeInstance) {
  return proto.VideoType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VideoType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VideoType.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VideoType}
 */
proto.VideoType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VideoType;
  return proto.VideoType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VideoType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VideoType}
 */
proto.VideoType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VideoType.VideoKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VideoType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VideoType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VideoType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VideoType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VideoType.VideoKind = {
  MP4: 0,
  FLV: 1,
  HLS: 2
};

/**
 * optional VideoKind kind = 1;
 * @return {!proto.VideoType.VideoKind}
 */
proto.VideoType.prototype.getKind = function() {
  return /** @type {!proto.VideoType.VideoKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.VideoType.VideoKind} value */
proto.VideoType.prototype.setKind = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MediaItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MediaItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MediaItem.displayName = 'proto.MediaItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MediaItem.prototype.toObject = function(opt_includeInstance) {
  return proto.MediaItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MediaItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.MediaKey.toObject(includeInstance, f),
    type: (f = msg.getType()) && proto.MediaType.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MediaItem}
 */
proto.MediaItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MediaItem;
  return proto.MediaItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MediaItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MediaItem}
 */
proto.MediaItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MediaKey;
      reader.readMessage(value,proto.MediaKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.MediaType;
      reader.readMessage(value,proto.MediaType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MediaItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MediaItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MediaItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MediaItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MediaKey.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MediaType.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional MediaKey key = 1;
 * @return {?proto.MediaKey}
 */
proto.MediaItem.prototype.getKey = function() {
  return /** @type{?proto.MediaKey} */ (
    jspb.Message.getWrapperField(this, proto.MediaKey, 1));
};


/** @param {?proto.MediaKey|undefined} value */
proto.MediaItem.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MediaItem.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MediaItem.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MediaType type = 2;
 * @return {?proto.MediaType}
 */
proto.MediaItem.prototype.getType = function() {
  return /** @type{?proto.MediaType} */ (
    jspb.Message.getWrapperField(this, proto.MediaType, 2));
};


/** @param {?proto.MediaType|undefined} value */
proto.MediaItem.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MediaItem.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MediaItem.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.MediaItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MediaItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Brand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Brand.repeatedFields_, null);
};
goog.inherits(proto.Brand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Brand.displayName = 'proto.Brand';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Brand.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Brand.prototype.toObject = function(opt_includeInstance) {
  return proto.Brand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Brand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Brand.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.Name.toObject(includeInstance, f),
    parent: (f = msg.getParent()) && proto.Brand.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.Content.toObject(includeInstance, f),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.MediaItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Brand}
 */
proto.Brand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Brand;
  return proto.Brand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Brand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Brand}
 */
proto.Brand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Name;
      reader.readMessage(value,proto.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Brand;
      reader.readMessage(value,proto.Brand.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 3:
      var value = new proto.Content;
      reader.readMessage(value,proto.Content.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 20:
      var value = new proto.MediaItem;
      reader.readMessage(value,proto.MediaItem.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Brand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Brand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Brand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Brand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Name.serializeBinaryToWriter
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Brand.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Content.serializeBinaryToWriter
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.MediaItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.Name}
 */
proto.Brand.prototype.getName = function() {
  return /** @type{?proto.Name} */ (
    jspb.Message.getWrapperField(this, proto.Name, 1));
};


/** @param {?proto.Name|undefined} value */
proto.Brand.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Brand.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Brand.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Brand parent = 2;
 * @return {?proto.Brand}
 */
proto.Brand.prototype.getParent = function() {
  return /** @type{?proto.Brand} */ (
    jspb.Message.getWrapperField(this, proto.Brand, 2));
};


/** @param {?proto.Brand|undefined} value */
proto.Brand.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Brand.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Brand.prototype.hasParent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Content summary = 3;
 * @return {?proto.Content}
 */
proto.Brand.prototype.getSummary = function() {
  return /** @type{?proto.Content} */ (
    jspb.Message.getWrapperField(this, proto.Content, 3));
};


/** @param {?proto.Content|undefined} value */
proto.Brand.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Brand.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Brand.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MediaItem media = 20;
 * @return {!Array.<!proto.MediaItem>}
 */
proto.Brand.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.MediaItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MediaItem, 20));
};


/** @param {!Array.<!proto.MediaItem>} value */
proto.Brand.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.MediaItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MediaItem}
 */
proto.Brand.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.MediaItem, opt_index);
};


proto.Brand.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * @enum {number}
 */
proto.Grow = {
  GENERIC: 0,
  INDOOR: 1,
  GREENHOUSE: 2,
  OUTDOOR: 3
};

/**
 * @enum {number}
 */
proto.Species = {
  UNSPECIFIED: 0,
  SATIVA: 1,
  HYBRID_SATIVA: 2,
  HYBRID: 3,
  HYBRID_INDICA: 4,
  INDICA: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Genetics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Genetics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Genetics.displayName = 'proto.Genetics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Genetics.prototype.toObject = function(opt_includeInstance) {
  return proto.Genetics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Genetics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Genetics.toObject = function(includeInstance, msg) {
  var f, obj = {
    male: (f = msg.getMale()) && proto.Name.toObject(includeInstance, f),
    female: (f = msg.getFemale()) && proto.Name.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Genetics}
 */
proto.Genetics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Genetics;
  return proto.Genetics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Genetics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Genetics}
 */
proto.Genetics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Name;
      reader.readMessage(value,proto.Name.deserializeBinaryFromReader);
      msg.setMale(value);
      break;
    case 2:
      var value = new proto.Name;
      reader.readMessage(value,proto.Name.deserializeBinaryFromReader);
      msg.setFemale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Genetics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Genetics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Genetics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Genetics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMale();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Name.serializeBinaryToWriter
    );
  }
  f = message.getFemale();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Name.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name male = 1;
 * @return {?proto.Name}
 */
proto.Genetics.prototype.getMale = function() {
  return /** @type{?proto.Name} */ (
    jspb.Message.getWrapperField(this, proto.Name, 1));
};


/** @param {?proto.Name|undefined} value */
proto.Genetics.prototype.setMale = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Genetics.prototype.clearMale = function() {
  this.setMale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Genetics.prototype.hasMale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Name female = 2;
 * @return {?proto.Name}
 */
proto.Genetics.prototype.getFemale = function() {
  return /** @type{?proto.Name} */ (
    jspb.Message.getWrapperField(this, proto.Name, 2));
};


/** @param {?proto.Name|undefined} value */
proto.Genetics.prototype.setFemale = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Genetics.prototype.clearFemale = function() {
  this.setFemale(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Genetics.prototype.hasFemale = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MaterialsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MaterialsData.repeatedFields_, null);
};
goog.inherits(proto.MaterialsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MaterialsData.displayName = 'proto.MaterialsData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MaterialsData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MaterialsData.prototype.toObject = function(opt_includeInstance) {
  return proto.MaterialsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MaterialsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MaterialsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    ingredientsList: jspb.Message.getRepeatedField(msg, 1),
    grow: jspb.Message.getFieldWithDefault(msg, 2, 0),
    species: jspb.Message.getFieldWithDefault(msg, 3, 0),
    genetics: (f = msg.getGenetics()) && proto.Genetics.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MaterialsData}
 */
proto.MaterialsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MaterialsData;
  return proto.MaterialsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MaterialsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MaterialsData}
 */
proto.MaterialsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIngredients(value);
      break;
    case 2:
      var value = /** @type {!proto.Grow} */ (reader.readEnum());
      msg.setGrow(value);
      break;
    case 3:
      var value = /** @type {!proto.Species} */ (reader.readEnum());
      msg.setSpecies(value);
      break;
    case 4:
      var value = new proto.Genetics;
      reader.readMessage(value,proto.Genetics.deserializeBinaryFromReader);
      msg.setGenetics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MaterialsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MaterialsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MaterialsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MaterialsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIngredientsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getGrow();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSpecies();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGenetics();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Genetics.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string ingredients = 1;
 * @return {!Array.<string>}
 */
proto.MaterialsData.prototype.getIngredientsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.MaterialsData.prototype.setIngredientsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.MaterialsData.prototype.addIngredients = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.MaterialsData.prototype.clearIngredientsList = function() {
  this.setIngredientsList([]);
};


/**
 * optional Grow grow = 2;
 * @return {!proto.Grow}
 */
proto.MaterialsData.prototype.getGrow = function() {
  return /** @type {!proto.Grow} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Grow} value */
proto.MaterialsData.prototype.setGrow = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Species species = 3;
 * @return {!proto.Species}
 */
proto.MaterialsData.prototype.getSpecies = function() {
  return /** @type {!proto.Species} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Species} value */
proto.MaterialsData.prototype.setSpecies = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Genetics genetics = 4;
 * @return {?proto.Genetics}
 */
proto.MaterialsData.prototype.getGenetics = function() {
  return /** @type{?proto.Genetics} */ (
    jspb.Message.getWrapperField(this, proto.Genetics, 4));
};


/** @param {?proto.Genetics|undefined} value */
proto.MaterialsData.prototype.setGenetics = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.MaterialsData.prototype.clearGenetics = function() {
  this.setGenetics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MaterialsData.prototype.hasGenetics = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProductContent.repeatedFields_, null);
};
goog.inherits(proto.ProductContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductContent.displayName = 'proto.ProductContent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProductContent.repeatedFields_ = [20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductContent.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = msg.getName()) && proto.Name.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.Content.toObject(includeInstance, f),
    brand: (f = msg.getBrand()) && proto.Brand.toObject(includeInstance, f),
    mediaList: jspb.Message.toObjectList(msg.getMediaList(),
    proto.MediaItem.toObject, includeInstance),
    usage: (f = msg.getUsage()) && proto.Content.toObject(includeInstance, f),
    dosage: (f = msg.getDosage()) && proto.Content.toObject(includeInstance, f),
    advice: (f = msg.getAdvice()) && proto.Content.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductContent}
 */
proto.ProductContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductContent;
  return proto.ProductContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductContent}
 */
proto.ProductContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Name;
      reader.readMessage(value,proto.Name.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Content;
      reader.readMessage(value,proto.Content.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 3:
      var value = new proto.Brand;
      reader.readMessage(value,proto.Brand.deserializeBinaryFromReader);
      msg.setBrand(value);
      break;
    case 20:
      var value = new proto.MediaItem;
      reader.readMessage(value,proto.MediaItem.deserializeBinaryFromReader);
      msg.addMedia(value);
      break;
    case 30:
      var value = new proto.Content;
      reader.readMessage(value,proto.Content.deserializeBinaryFromReader);
      msg.setUsage(value);
      break;
    case 31:
      var value = new proto.Content;
      reader.readMessage(value,proto.Content.deserializeBinaryFromReader);
      msg.setDosage(value);
      break;
    case 32:
      var value = new proto.Content;
      reader.readMessage(value,proto.Content.deserializeBinaryFromReader);
      msg.setAdvice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Name.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Content.serializeBinaryToWriter
    );
  }
  f = message.getBrand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Brand.serializeBinaryToWriter
    );
  }
  f = message.getMediaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.MediaItem.serializeBinaryToWriter
    );
  }
  f = message.getUsage();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.Content.serializeBinaryToWriter
    );
  }
  f = message.getDosage();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.Content.serializeBinaryToWriter
    );
  }
  f = message.getAdvice();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.Content.serializeBinaryToWriter
    );
  }
};


/**
 * optional Name name = 1;
 * @return {?proto.Name}
 */
proto.ProductContent.prototype.getName = function() {
  return /** @type{?proto.Name} */ (
    jspb.Message.getWrapperField(this, proto.Name, 1));
};


/** @param {?proto.Name|undefined} value */
proto.ProductContent.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ProductContent.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Content summary = 2;
 * @return {?proto.Content}
 */
proto.ProductContent.prototype.getSummary = function() {
  return /** @type{?proto.Content} */ (
    jspb.Message.getWrapperField(this, proto.Content, 2));
};


/** @param {?proto.Content|undefined} value */
proto.ProductContent.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ProductContent.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Brand brand = 3;
 * @return {?proto.Brand}
 */
proto.ProductContent.prototype.getBrand = function() {
  return /** @type{?proto.Brand} */ (
    jspb.Message.getWrapperField(this, proto.Brand, 3));
};


/** @param {?proto.Brand|undefined} value */
proto.ProductContent.prototype.setBrand = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ProductContent.prototype.clearBrand = function() {
  this.setBrand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MediaItem media = 20;
 * @return {!Array.<!proto.MediaItem>}
 */
proto.ProductContent.prototype.getMediaList = function() {
  return /** @type{!Array.<!proto.MediaItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MediaItem, 20));
};


/** @param {!Array.<!proto.MediaItem>} value */
proto.ProductContent.prototype.setMediaList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.MediaItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MediaItem}
 */
proto.ProductContent.prototype.addMedia = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.MediaItem, opt_index);
};


proto.ProductContent.prototype.clearMediaList = function() {
  this.setMediaList([]);
};


/**
 * optional Content usage = 30;
 * @return {?proto.Content}
 */
proto.ProductContent.prototype.getUsage = function() {
  return /** @type{?proto.Content} */ (
    jspb.Message.getWrapperField(this, proto.Content, 30));
};


/** @param {?proto.Content|undefined} value */
proto.ProductContent.prototype.setUsage = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.ProductContent.prototype.clearUsage = function() {
  this.setUsage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasUsage = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional Content dosage = 31;
 * @return {?proto.Content}
 */
proto.ProductContent.prototype.getDosage = function() {
  return /** @type{?proto.Content} */ (
    jspb.Message.getWrapperField(this, proto.Content, 31));
};


/** @param {?proto.Content|undefined} value */
proto.ProductContent.prototype.setDosage = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.ProductContent.prototype.clearDosage = function() {
  this.setDosage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasDosage = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional Content advice = 32;
 * @return {?proto.Content}
 */
proto.ProductContent.prototype.getAdvice = function() {
  return /** @type{?proto.Content} */ (
    jspb.Message.getWrapperField(this, proto.Content, 32));
};


/** @param {?proto.Content|undefined} value */
proto.ProductContent.prototype.setAdvice = function(value) {
  jspb.Message.setWrapperField(this, 32, value);
};


proto.ProductContent.prototype.clearAdvice = function() {
  this.setAdvice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProductContent.prototype.hasAdvice = function() {
  return jspb.Message.getField(this, 32) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Address.displayName = 'proto.Address';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstLine: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondLine: jspb.Message.getFieldWithDefault(msg, 2, ""),
    city: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    zipcode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    country: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Address}
 */
proto.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Address;
  return proto.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Address}
 */
proto.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstLine(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondLine(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setZipcode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstLine();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondLine();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getZipcode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string first_line = 1;
 * @return {string}
 */
proto.Address.prototype.getFirstLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Address.prototype.setFirstLine = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string second_line = 2;
 * @return {string}
 */
proto.Address.prototype.getSecondLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Address.prototype.setSecondLine = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Address.prototype.setCity = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.Address.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Address.prototype.setState = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string zipcode = 5;
 * @return {string}
 */
proto.Address.prototype.getZipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Address.prototype.setZipcode = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string country = 6;
 * @return {string}
 */
proto.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Address.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductFlagValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProductFlagValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductFlagValue.displayName = 'proto.ProductFlagValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductFlagValue.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductFlagValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductFlagValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductFlagValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductFlagValue}
 */
proto.ProductFlagValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductFlagValue;
  return proto.ProductFlagValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductFlagValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductFlagValue}
 */
proto.ProductFlagValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProductFlag} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductFlagValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductFlagValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductFlagValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductFlagValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional ProductFlag type = 1;
 * @return {!proto.ProductFlag}
 */
proto.ProductFlagValue.prototype.getType = function() {
  return /** @type {!proto.ProductFlag} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ProductFlag} value */
proto.ProductFlagValue.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ProductFlagValue.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ProductFlagValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductFlagset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProductFlagset.repeatedFields_, null);
};
goog.inherits(proto.ProductFlagset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductFlagset.displayName = 'proto.ProductFlagset';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProductFlagset.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductFlagset.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductFlagset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductFlagset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductFlagset.toObject = function(includeInstance, msg) {
  var f, obj = {
    flagsList: jspb.Message.toObjectList(msg.getFlagsList(),
    proto.ProductFlagValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductFlagset}
 */
proto.ProductFlagset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductFlagset;
  return proto.ProductFlagset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductFlagset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductFlagset}
 */
proto.ProductFlagset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProductFlagValue;
      reader.readMessage(value,proto.ProductFlagValue.deserializeBinaryFromReader);
      msg.addFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductFlagset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductFlagset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductFlagset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductFlagset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ProductFlagValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProductFlagValue flags = 1;
 * @return {!Array.<!proto.ProductFlagValue>}
 */
proto.ProductFlagset.prototype.getFlagsList = function() {
  return /** @type{!Array.<!proto.ProductFlagValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProductFlagValue, 1));
};


/** @param {!Array.<!proto.ProductFlagValue>} value */
proto.ProductFlagset.prototype.setFlagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ProductFlagValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProductFlagValue}
 */
proto.ProductFlagset.prototype.addFlags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ProductFlagValue, opt_index);
};


proto.ProductFlagset.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlagsDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FlagsDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FlagsDescriptor.displayName = 'proto.FlagsDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlagsDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.FlagsDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlagsDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlagsDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    visible: jspb.Message.getFieldWithDefault(msg, 1, false),
    premium: jspb.Message.getFieldWithDefault(msg, 2, false),
    featured: jspb.Message.getFieldWithDefault(msg, 3, false),
    lastchance: jspb.Message.getFieldWithDefault(msg, 4, false),
    inhouse: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlagsDescriptor}
 */
proto.FlagsDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlagsDescriptor;
  return proto.FlagsDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlagsDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlagsDescriptor}
 */
proto.FlagsDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVisible(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPremium(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFeatured(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLastchance(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInhouse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlagsDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlagsDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlagsDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlagsDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPremium();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFeatured();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLastchance();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getInhouse();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bool visible = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FlagsDescriptor.prototype.getVisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.FlagsDescriptor.prototype.setVisible = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool premium = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FlagsDescriptor.prototype.getPremium = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.FlagsDescriptor.prototype.setPremium = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool featured = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FlagsDescriptor.prototype.getFeatured = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.FlagsDescriptor.prototype.setFeatured = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool lastchance = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FlagsDescriptor.prototype.getLastchance = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.FlagsDescriptor.prototype.setLastchance = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool inhouse = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FlagsDescriptor.prototype.getInhouse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.FlagsDescriptor.prototype.setInhouse = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.ProductFlag = {
  VISIBLE: 0,
  PREMIUM: 1,
  FEATURED: 2,
  LASTCHANCE: 3,
  INHOUSE: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SaleDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SaleDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SaleDescriptor.displayName = 'proto.SaleDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SaleDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.SaleDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SaleDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SaleDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    effective: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    percentageAmount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    bogoTrigger: jspb.Message.getFieldWithDefault(msg, 21, 0),
    bogoReward: jspb.Message.getFieldWithDefault(msg, 22, 0),
    loyaltyTrigger: jspb.Message.getFieldWithDefault(msg, 23, 0),
    loyaltyReward: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SaleDescriptor}
 */
proto.SaleDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SaleDescriptor;
  return proto.SaleDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SaleDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SaleDescriptor}
 */
proto.SaleDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SaleType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEffective(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPercentageAmount(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBogoTrigger(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBogoReward(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLoyaltyTrigger(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLoyaltyReward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SaleDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SaleDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SaleDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SaleDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEffective();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPercentageAmount();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getBogoTrigger();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getBogoReward();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getLoyaltyTrigger();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getLoyaltyReward();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
};


/**
 * optional SaleType type = 1;
 * @return {!proto.SaleType}
 */
proto.SaleDescriptor.prototype.getType = function() {
  return /** @type {!proto.SaleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SaleType} value */
proto.SaleDescriptor.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 effective = 2;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getEffective = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setEffective = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 expiration = 3;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setExpiration = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 percentage_amount = 20;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getPercentageAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setPercentageAmount = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional uint32 bogo_trigger = 21;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getBogoTrigger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setBogoTrigger = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional uint32 bogo_reward = 22;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getBogoReward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setBogoReward = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional uint32 loyalty_trigger = 23;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getLoyaltyTrigger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setLoyaltyTrigger = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional uint32 loyalty_reward = 24;
 * @return {number}
 */
proto.SaleDescriptor.prototype.getLoyaltyReward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.SaleDescriptor.prototype.setLoyaltyReward = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * @enum {number}
 */
proto.SaleType = {
  PERCENTAGE: 0,
  BOGO: 1,
  LOYALTY: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PricingTierAvailability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PricingTierAvailability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PricingTierAvailability.displayName = 'proto.PricingTierAvailability';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PricingTierAvailability.prototype.toObject = function(opt_includeInstance) {
  return proto.PricingTierAvailability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PricingTierAvailability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PricingTierAvailability.toObject = function(includeInstance, msg) {
  var f, obj = {
    offered: jspb.Message.getFieldWithDefault(msg, 1, false),
    available: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PricingTierAvailability}
 */
proto.PricingTierAvailability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PricingTierAvailability;
  return proto.PricingTierAvailability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PricingTierAvailability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PricingTierAvailability}
 */
proto.PricingTierAvailability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffered(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PricingTierAvailability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PricingTierAvailability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PricingTierAvailability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PricingTierAvailability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffered();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAvailable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool offered = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PricingTierAvailability.prototype.getOffered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.PricingTierAvailability.prototype.setOffered = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool available = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PricingTierAvailability.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.PricingTierAvailability.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UnitPricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UnitPricingDescriptor.repeatedFields_, null);
};
goog.inherits(proto.UnitPricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UnitPricingDescriptor.displayName = 'proto.UnitPricingDescriptor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UnitPricingDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UnitPricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.UnitPricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UnitPricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnitPricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceValue: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    status: (f = msg.getStatus()) && proto.PricingTierAvailability.toObject(includeInstance, f),
    discountsList: jspb.Message.toObjectList(msg.getDiscountsList(),
    proto.SaleDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UnitPricingDescriptor}
 */
proto.UnitPricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UnitPricingDescriptor;
  return proto.UnitPricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UnitPricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UnitPricingDescriptor}
 */
proto.UnitPricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPriceValue(value);
      break;
    case 2:
      var value = new proto.PricingTierAvailability;
      reader.readMessage(value,proto.PricingTierAvailability.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.SaleDescriptor;
      reader.readMessage(value,proto.SaleDescriptor.deserializeBinaryFromReader);
      msg.addDiscounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UnitPricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UnitPricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UnitPricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnitPricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PricingTierAvailability.serializeBinaryToWriter
    );
  }
  f = message.getDiscountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SaleDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional float price_value = 1;
 * @return {number}
 */
proto.UnitPricingDescriptor.prototype.getPriceValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.UnitPricingDescriptor.prototype.setPriceValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional PricingTierAvailability status = 2;
 * @return {?proto.PricingTierAvailability}
 */
proto.UnitPricingDescriptor.prototype.getStatus = function() {
  return /** @type{?proto.PricingTierAvailability} */ (
    jspb.Message.getWrapperField(this, proto.PricingTierAvailability, 2));
};


/** @param {?proto.PricingTierAvailability|undefined} value */
proto.UnitPricingDescriptor.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UnitPricingDescriptor.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UnitPricingDescriptor.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated SaleDescriptor discounts = 3;
 * @return {!Array.<!proto.SaleDescriptor>}
 */
proto.UnitPricingDescriptor.prototype.getDiscountsList = function() {
  return /** @type{!Array.<!proto.SaleDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SaleDescriptor, 3));
};


/** @param {!Array.<!proto.SaleDescriptor>} value */
proto.UnitPricingDescriptor.prototype.setDiscountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SaleDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SaleDescriptor}
 */
proto.UnitPricingDescriptor.prototype.addDiscounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SaleDescriptor, opt_index);
};


proto.UnitPricingDescriptor.prototype.clearDiscountsList = function() {
  this.setDiscountsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WeightedPricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WeightedPricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WeightedPricingDescriptor.displayName = 'proto.WeightedPricingDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WeightedPricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.WeightedPricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WeightedPricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WeightedPricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    weight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tier: (f = msg.getTier()) && proto.UnitPricingDescriptor.toObject(includeInstance, f),
    weightingrams: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WeightedPricingDescriptor}
 */
proto.WeightedPricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WeightedPricingDescriptor;
  return proto.WeightedPricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WeightedPricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WeightedPricingDescriptor}
 */
proto.WeightedPricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PricingWeightTier} */ (reader.readEnum());
      msg.setWeight(value);
      break;
    case 2:
      var value = new proto.UnitPricingDescriptor;
      reader.readMessage(value,proto.UnitPricingDescriptor.deserializeBinaryFromReader);
      msg.setTier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeightingrams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WeightedPricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WeightedPricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WeightedPricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WeightedPricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UnitPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getWeightingrams();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional PricingWeightTier weight = 1;
 * @return {!proto.PricingWeightTier}
 */
proto.WeightedPricingDescriptor.prototype.getWeight = function() {
  return /** @type {!proto.PricingWeightTier} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PricingWeightTier} value */
proto.WeightedPricingDescriptor.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional UnitPricingDescriptor tier = 2;
 * @return {?proto.UnitPricingDescriptor}
 */
proto.WeightedPricingDescriptor.prototype.getTier = function() {
  return /** @type{?proto.UnitPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.UnitPricingDescriptor, 2));
};


/** @param {?proto.UnitPricingDescriptor|undefined} value */
proto.WeightedPricingDescriptor.prototype.setTier = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.WeightedPricingDescriptor.prototype.clearTier = function() {
  this.setTier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WeightedPricingDescriptor.prototype.hasTier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float weightInGrams = 3;
 * @return {number}
 */
proto.WeightedPricingDescriptor.prototype.getWeightingrams = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.WeightedPricingDescriptor.prototype.setWeightingrams = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FreebiePricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FreebiePricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FreebiePricingDescriptor.displayName = 'proto.FreebiePricingDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FreebiePricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.FreebiePricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FreebiePricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FreebiePricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FreebiePricingDescriptor}
 */
proto.FreebiePricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FreebiePricingDescriptor;
  return proto.FreebiePricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FreebiePricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FreebiePricingDescriptor}
 */
proto.FreebiePricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FreebiePricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FreebiePricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FreebiePricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FreebiePricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PricingDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PricingDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PricingDescriptor.displayName = 'proto.PricingDescriptor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PricingDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.PricingDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PricingDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PricingDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unit: (f = msg.getUnit()) && proto.UnitPricingDescriptor.toObject(includeInstance, f),
    weighted: (f = msg.getWeighted()) && proto.WeightedPricingDescriptor.toObject(includeInstance, f),
    freebie: (f = msg.getFreebie()) && proto.FreebiePricingDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PricingDescriptor}
 */
proto.PricingDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PricingDescriptor;
  return proto.PricingDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PricingDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PricingDescriptor}
 */
proto.PricingDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PricingType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 20:
      var value = new proto.UnitPricingDescriptor;
      reader.readMessage(value,proto.UnitPricingDescriptor.deserializeBinaryFromReader);
      msg.setUnit(value);
      break;
    case 21:
      var value = new proto.WeightedPricingDescriptor;
      reader.readMessage(value,proto.WeightedPricingDescriptor.deserializeBinaryFromReader);
      msg.setWeighted(value);
      break;
    case 22:
      var value = new proto.FreebiePricingDescriptor;
      reader.readMessage(value,proto.FreebiePricingDescriptor.deserializeBinaryFromReader);
      msg.setFreebie(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PricingDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PricingDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PricingDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PricingDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUnit();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.UnitPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getWeighted();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.WeightedPricingDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getFreebie();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.FreebiePricingDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional PricingType type = 1;
 * @return {!proto.PricingType}
 */
proto.PricingDescriptor.prototype.getType = function() {
  return /** @type {!proto.PricingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PricingType} value */
proto.PricingDescriptor.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional UnitPricingDescriptor unit = 20;
 * @return {?proto.UnitPricingDescriptor}
 */
proto.PricingDescriptor.prototype.getUnit = function() {
  return /** @type{?proto.UnitPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.UnitPricingDescriptor, 20));
};


/** @param {?proto.UnitPricingDescriptor|undefined} value */
proto.PricingDescriptor.prototype.setUnit = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.PricingDescriptor.prototype.clearUnit = function() {
  this.setUnit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PricingDescriptor.prototype.hasUnit = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional WeightedPricingDescriptor weighted = 21;
 * @return {?proto.WeightedPricingDescriptor}
 */
proto.PricingDescriptor.prototype.getWeighted = function() {
  return /** @type{?proto.WeightedPricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.WeightedPricingDescriptor, 21));
};


/** @param {?proto.WeightedPricingDescriptor|undefined} value */
proto.PricingDescriptor.prototype.setWeighted = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.PricingDescriptor.prototype.clearWeighted = function() {
  this.setWeighted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PricingDescriptor.prototype.hasWeighted = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional FreebiePricingDescriptor freebie = 22;
 * @return {?proto.FreebiePricingDescriptor}
 */
proto.PricingDescriptor.prototype.getFreebie = function() {
  return /** @type{?proto.FreebiePricingDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.FreebiePricingDescriptor, 22));
};


/** @param {?proto.FreebiePricingDescriptor|undefined} value */
proto.PricingDescriptor.prototype.setFreebie = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.PricingDescriptor.prototype.clearFreebie = function() {
  this.setFreebie(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PricingDescriptor.prototype.hasFreebie = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductPricing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProductPricing.repeatedFields_, null);
};
goog.inherits(proto.ProductPricing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProductPricing.displayName = 'proto.ProductPricing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProductPricing.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductPricing.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductPricing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductPricing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductPricing.toObject = function(includeInstance, msg) {
  var f, obj = {
    discountsList: jspb.Message.toObjectList(msg.getDiscountsList(),
    proto.SaleDescriptor.toObject, includeInstance),
    manifestList: jspb.Message.toObjectList(msg.getManifestList(),
    proto.PricingDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductPricing}
 */
proto.ProductPricing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductPricing;
  return proto.ProductPricing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductPricing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductPricing}
 */
proto.ProductPricing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SaleDescriptor;
      reader.readMessage(value,proto.SaleDescriptor.deserializeBinaryFromReader);
      msg.addDiscounts(value);
      break;
    case 2:
      var value = new proto.PricingDescriptor;
      reader.readMessage(value,proto.PricingDescriptor.deserializeBinaryFromReader);
      msg.addManifest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductPricing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductPricing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductPricing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductPricing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SaleDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getManifestList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PricingDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SaleDescriptor discounts = 1;
 * @return {!Array.<!proto.SaleDescriptor>}
 */
proto.ProductPricing.prototype.getDiscountsList = function() {
  return /** @type{!Array.<!proto.SaleDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SaleDescriptor, 1));
};


/** @param {!Array.<!proto.SaleDescriptor>} value */
proto.ProductPricing.prototype.setDiscountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SaleDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SaleDescriptor}
 */
proto.ProductPricing.prototype.addDiscounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SaleDescriptor, opt_index);
};


proto.ProductPricing.prototype.clearDiscountsList = function() {
  this.setDiscountsList([]);
};


/**
 * repeated PricingDescriptor manifest = 2;
 * @return {!Array.<!proto.PricingDescriptor>}
 */
proto.ProductPricing.prototype.getManifestList = function() {
  return /** @type{!Array.<!proto.PricingDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PricingDescriptor, 2));
};


/** @param {!Array.<!proto.PricingDescriptor>} value */
proto.ProductPricing.prototype.setManifestList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PricingDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PricingDescriptor}
 */
proto.ProductPricing.prototype.addManifest = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PricingDescriptor, opt_index);
};


proto.ProductPricing.prototype.clearManifestList = function() {
  this.setManifestList([]);
};


/**
 * @enum {number}
 */
proto.PricingType = {
  UNIT: 0,
  WEIGHTED: 1,
  FREEBIE: 2
};

/**
 * @enum {number}
 */
proto.PricingWeightTier = {
  OTHER: 0,
  GRAM: 1,
  HALFGRAM: 2,
  QUARTERGRAM: 3,
  DUB: 4,
  EIGHTH: 5,
  QUARTER: 6,
  HALF: 7,
  OUNCE: 8,
  POUND: 9
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Flower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Flower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Flower.displayName = 'proto.Flower';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Flower.prototype.toObject = function(opt_includeInstance) {
  return proto.Flower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Flower} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Flower.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.ProductKey.toObject(includeInstance, f),
    productData: (f = msg.getProductData()) && proto.ProductContent.toObject(includeInstance, f),
    materialData: (f = msg.getMaterialData()) && proto.MaterialsData.toObject(includeInstance, f),
    flags: (f = msg.getFlags()) && proto.FlagsDescriptor.toObject(includeInstance, f),
    pricing: (f = msg.getPricing()) && proto.ProductPricing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Flower}
 */
proto.Flower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Flower;
  return proto.Flower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Flower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Flower}
 */
proto.Flower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProductKey;
      reader.readMessage(value,proto.ProductKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 20:
      var value = new proto.ProductContent;
      reader.readMessage(value,proto.ProductContent.deserializeBinaryFromReader);
      msg.setProductData(value);
      break;
    case 21:
      var value = new proto.MaterialsData;
      reader.readMessage(value,proto.MaterialsData.deserializeBinaryFromReader);
      msg.setMaterialData(value);
      break;
    case 22:
      var value = new proto.FlagsDescriptor;
      reader.readMessage(value,proto.FlagsDescriptor.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 23:
      var value = new proto.ProductPricing;
      reader.readMessage(value,proto.ProductPricing.deserializeBinaryFromReader);
      msg.setPricing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Flower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Flower.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Flower} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Flower.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProductKey.serializeBinaryToWriter
    );
  }
  f = message.getProductData();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.ProductContent.serializeBinaryToWriter
    );
  }
  f = message.getMaterialData();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.MaterialsData.serializeBinaryToWriter
    );
  }
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.FlagsDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getPricing();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.ProductPricing.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProductKey key = 1;
 * @return {?proto.ProductKey}
 */
proto.Flower.prototype.getKey = function() {
  return /** @type{?proto.ProductKey} */ (
    jspb.Message.getWrapperField(this, proto.ProductKey, 1));
};


/** @param {?proto.ProductKey|undefined} value */
proto.Flower.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Flower.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Flower.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductContent product_data = 20;
 * @return {?proto.ProductContent}
 */
proto.Flower.prototype.getProductData = function() {
  return /** @type{?proto.ProductContent} */ (
    jspb.Message.getWrapperField(this, proto.ProductContent, 20));
};


/** @param {?proto.ProductContent|undefined} value */
proto.Flower.prototype.setProductData = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.Flower.prototype.clearProductData = function() {
  this.setProductData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Flower.prototype.hasProductData = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional MaterialsData material_data = 21;
 * @return {?proto.MaterialsData}
 */
proto.Flower.prototype.getMaterialData = function() {
  return /** @type{?proto.MaterialsData} */ (
    jspb.Message.getWrapperField(this, proto.MaterialsData, 21));
};


/** @param {?proto.MaterialsData|undefined} value */
proto.Flower.prototype.setMaterialData = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.Flower.prototype.clearMaterialData = function() {
  this.setMaterialData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Flower.prototype.hasMaterialData = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional FlagsDescriptor flags = 22;
 * @return {?proto.FlagsDescriptor}
 */
proto.Flower.prototype.getFlags = function() {
  return /** @type{?proto.FlagsDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.FlagsDescriptor, 22));
};


/** @param {?proto.FlagsDescriptor|undefined} value */
proto.Flower.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.Flower.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Flower.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ProductPricing pricing = 23;
 * @return {?proto.ProductPricing}
 */
proto.Flower.prototype.getPricing = function() {
  return /** @type{?proto.ProductPricing} */ (
    jspb.Message.getWrapperField(this, proto.ProductPricing, 23));
};


/** @param {?proto.ProductPricing|undefined} value */
proto.Flower.prototype.setPricing = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.Flower.prototype.clearPricing = function() {
  this.setPricing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Flower.prototype.hasPricing = function() {
  return jspb.Message.getField(this, 23) != null;
};


