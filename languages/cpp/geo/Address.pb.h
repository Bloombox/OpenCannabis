// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo/Address.proto

#ifndef PROTOBUF_geo_2fAddress_2eproto__INCLUDED
#define PROTOBUF_geo_2fAddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;

namespace protobuf_geo_2fAddress_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geo_2fAddress_2eproto

// ===================================================================

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string first_line = 1;
  void clear_first_line();
  static const int kFirstLineFieldNumber = 1;
  const ::std::string& first_line() const;
  void set_first_line(const ::std::string& value);
  #if LANG_CXX11
  void set_first_line(::std::string&& value);
  #endif
  void set_first_line(const char* value);
  void set_first_line(const char* value, size_t size);
  ::std::string* mutable_first_line();
  ::std::string* release_first_line();
  void set_allocated_first_line(::std::string* first_line);

  // string second_line = 2;
  void clear_second_line();
  static const int kSecondLineFieldNumber = 2;
  const ::std::string& second_line() const;
  void set_second_line(const ::std::string& value);
  #if LANG_CXX11
  void set_second_line(::std::string&& value);
  #endif
  void set_second_line(const char* value);
  void set_second_line(const char* value, size_t size);
  ::std::string* mutable_second_line();
  ::std::string* release_second_line();
  void set_allocated_second_line(::std::string* second_line);

  // string city = 3;
  void clear_city();
  static const int kCityFieldNumber = 3;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string zipcode = 5;
  void clear_zipcode();
  static const int kZipcodeFieldNumber = 5;
  const ::std::string& zipcode() const;
  void set_zipcode(const ::std::string& value);
  #if LANG_CXX11
  void set_zipcode(::std::string&& value);
  #endif
  void set_zipcode(const char* value);
  void set_zipcode(const char* value, size_t size);
  ::std::string* mutable_zipcode();
  ::std::string* release_zipcode();
  void set_allocated_zipcode(::std::string* zipcode);

  // string country = 6;
  void clear_country();
  static const int kCountryFieldNumber = 6;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr first_line_;
  ::google::protobuf::internal::ArenaStringPtr second_line_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr zipcode_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  mutable int _cached_size_;
  friend struct protobuf_geo_2fAddress_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// string first_line = 1;
inline void Address::clear_first_line() {
  first_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::first_line() const {
  // @@protoc_insertion_point(field_get:Address.first_line)
  return first_line_.GetNoArena();
}
inline void Address::set_first_line(const ::std::string& value) {
  
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.first_line)
}
#if LANG_CXX11
inline void Address::set_first_line(::std::string&& value) {
  
  first_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.first_line)
}
#endif
inline void Address::set_first_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.first_line)
}
inline void Address::set_first_line(const char* value, size_t size) {
  
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.first_line)
}
inline ::std::string* Address::mutable_first_line() {
  
  // @@protoc_insertion_point(field_mutable:Address.first_line)
  return first_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_first_line() {
  // @@protoc_insertion_point(field_release:Address.first_line)
  
  return first_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_first_line(::std::string* first_line) {
  if (first_line != NULL) {
    
  } else {
    
  }
  first_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_line);
  // @@protoc_insertion_point(field_set_allocated:Address.first_line)
}

// string second_line = 2;
inline void Address::clear_second_line() {
  second_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::second_line() const {
  // @@protoc_insertion_point(field_get:Address.second_line)
  return second_line_.GetNoArena();
}
inline void Address::set_second_line(const ::std::string& value) {
  
  second_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.second_line)
}
#if LANG_CXX11
inline void Address::set_second_line(::std::string&& value) {
  
  second_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.second_line)
}
#endif
inline void Address::set_second_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  second_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.second_line)
}
inline void Address::set_second_line(const char* value, size_t size) {
  
  second_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.second_line)
}
inline ::std::string* Address::mutable_second_line() {
  
  // @@protoc_insertion_point(field_mutable:Address.second_line)
  return second_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_second_line() {
  // @@protoc_insertion_point(field_release:Address.second_line)
  
  return second_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_second_line(::std::string* second_line) {
  if (second_line != NULL) {
    
  } else {
    
  }
  second_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second_line);
  // @@protoc_insertion_point(field_set_allocated:Address.second_line)
}

// string city = 3;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.city)
}
inline ::std::string* Address::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:Address.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Address.city)
}

// string state = 4;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:Address.state)
  return state_.GetNoArena();
}
inline void Address::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.state)
}
#if LANG_CXX11
inline void Address::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.state)
}
#endif
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.state)
}
inline ::std::string* Address::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:Address.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:Address.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:Address.state)
}

// string zipcode = 5;
inline void Address::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::zipcode() const {
  // @@protoc_insertion_point(field_get:Address.zipcode)
  return zipcode_.GetNoArena();
}
inline void Address::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.zipcode)
}
#if LANG_CXX11
inline void Address::set_zipcode(::std::string&& value) {
  
  zipcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.zipcode)
}
#endif
inline void Address::set_zipcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.zipcode)
}
inline void Address::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.zipcode)
}
inline ::std::string* Address::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:Address.zipcode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_zipcode() {
  // @@protoc_insertion_point(field_release:Address.zipcode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:Address.zipcode)
}

// string country = 6;
inline void Address::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:Address.country)
  return country_.GetNoArena();
}
inline void Address::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.country)
}
#if LANG_CXX11
inline void Address::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.country)
}
#endif
inline void Address::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.country)
}
inline void Address::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.country)
}
inline ::std::string* Address::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:Address.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_country() {
  // @@protoc_insertion_point(field_release:Address.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Address.country)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geo_2fAddress_2eproto__INCLUDED
