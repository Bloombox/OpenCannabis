// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: products/Flower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "products/Flower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FlowerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Flower> {
} _Flower_default_instance_;

namespace protobuf_products_2fFlower_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, product_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, material_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Flower, pricing_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Flower)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Flower_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "products/Flower.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Flower_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_base_2fProductKey_2eproto::InitDefaults();
  ::protobuf_content_2fMaterialsData_2eproto::InitDefaults();
  ::protobuf_content_2fProductContent_2eproto::InitDefaults();
  ::protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  ::protobuf_structs_2fpricing_2fPricingDescriptor_2eproto::InitDefaults();
  _Flower_default_instance_.DefaultConstruct();
  _Flower_default_instance_.get_mutable()->key_ = const_cast< ::ProductKey*>(
      ::ProductKey::internal_default_instance());
  _Flower_default_instance_.get_mutable()->product_data_ = const_cast< ::ProductContent*>(
      ::ProductContent::internal_default_instance());
  _Flower_default_instance_.get_mutable()->material_data_ = const_cast< ::MaterialsData*>(
      ::MaterialsData::internal_default_instance());
  _Flower_default_instance_.get_mutable()->flags_ = const_cast< ::FlagsDescriptor*>(
      ::FlagsDescriptor::internal_default_instance());
  _Flower_default_instance_.get_mutable()->pricing_ = const_cast< ::ProductPricing*>(
      ::ProductPricing::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025products/Flower.proto\032\025base/ProductKey"
      ".proto\032\033content/MaterialsData.proto\032\034con"
      "tent/ProductContent.proto\032\035structs/Flags"
      "Descriptor.proto\032\'structs/pricing/Pricin"
      "gDescriptor.proto\"\263\001\n\006Flower\022\030\n\003key\030\001 \001("
      "\0132\013.ProductKey\022%\n\014product_data\030\024 \001(\0132\017.P"
      "roductContent\022%\n\rmaterial_data\030\025 \001(\0132\016.M"
      "aterialsData\022\037\n\005flags\030\026 \001(\0132\020.FlagsDescr"
      "iptor\022 \n\007pricing\030\027 \001(\0132\017.ProductPricingB"
      "2\n\032io.bloombox.schema.productB\rFlowerPro"
      "ductH\001P\000\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "products/Flower.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2fProductKey_2eproto::AddDescriptors();
  ::protobuf_content_2fMaterialsData_2eproto::AddDescriptors();
  ::protobuf_content_2fProductContent_2eproto::AddDescriptors();
  ::protobuf_structs_2fFlagsDescriptor_2eproto::AddDescriptors();
  ::protobuf_structs_2fpricing_2fPricingDescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_products_2fFlower_2eproto


// ===================================================================

void Flower::_slow_mutable_key() {
  key_ = ::google::protobuf::Arena::CreateMessage< ::ProductKey >(
      GetArenaNoVirtual());
}
::ProductKey* Flower::_slow_release_key() {
  if (key_ == NULL) {
    return NULL;
  } else {
    ::ProductKey* temp = new ::ProductKey(*key_);
    key_ = NULL;
    return temp;
  }
}
::ProductKey* Flower::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Flower.key)
  
  ::ProductKey* temp = key_;
  key_ = NULL;
  return temp;
}
void Flower::_slow_set_allocated_key(
    ::google::protobuf::Arena* message_arena, ::ProductKey** key) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*key) == NULL) {
      message_arena->Own(*key);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*key)) {
      ::ProductKey* new_key = 
            ::google::protobuf::Arena::CreateMessage< ::ProductKey >(
            message_arena);
      new_key->CopyFrom(**key);
      *key = new_key;
    }
}
void Flower::unsafe_arena_set_allocated_key(
    ::ProductKey* key) {
  if (GetArenaNoVirtual() == NULL) {
    delete key_;
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Flower.key)
}
void Flower::_slow_mutable_product_data() {
  product_data_ = ::google::protobuf::Arena::CreateMessage< ::ProductContent >(
      GetArenaNoVirtual());
}
::ProductContent* Flower::_slow_release_product_data() {
  if (product_data_ == NULL) {
    return NULL;
  } else {
    ::ProductContent* temp = new ::ProductContent(*product_data_);
    product_data_ = NULL;
    return temp;
  }
}
::ProductContent* Flower::unsafe_arena_release_product_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Flower.product_data)
  
  ::ProductContent* temp = product_data_;
  product_data_ = NULL;
  return temp;
}
void Flower::_slow_set_allocated_product_data(
    ::google::protobuf::Arena* message_arena, ::ProductContent** product_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*product_data) == NULL) {
      message_arena->Own(*product_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*product_data)) {
      ::ProductContent* new_product_data = 
            ::google::protobuf::Arena::CreateMessage< ::ProductContent >(
            message_arena);
      new_product_data->CopyFrom(**product_data);
      *product_data = new_product_data;
    }
}
void Flower::unsafe_arena_set_allocated_product_data(
    ::ProductContent* product_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete product_data_;
  }
  product_data_ = product_data;
  if (product_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Flower.product_data)
}
void Flower::_slow_mutable_material_data() {
  material_data_ = ::google::protobuf::Arena::CreateMessage< ::MaterialsData >(
      GetArenaNoVirtual());
}
::MaterialsData* Flower::_slow_release_material_data() {
  if (material_data_ == NULL) {
    return NULL;
  } else {
    ::MaterialsData* temp = new ::MaterialsData(*material_data_);
    material_data_ = NULL;
    return temp;
  }
}
::MaterialsData* Flower::unsafe_arena_release_material_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Flower.material_data)
  
  ::MaterialsData* temp = material_data_;
  material_data_ = NULL;
  return temp;
}
void Flower::_slow_set_allocated_material_data(
    ::google::protobuf::Arena* message_arena, ::MaterialsData** material_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*material_data) == NULL) {
      message_arena->Own(*material_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*material_data)) {
      ::MaterialsData* new_material_data = 
            ::google::protobuf::Arena::CreateMessage< ::MaterialsData >(
            message_arena);
      new_material_data->CopyFrom(**material_data);
      *material_data = new_material_data;
    }
}
void Flower::unsafe_arena_set_allocated_material_data(
    ::MaterialsData* material_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete material_data_;
  }
  material_data_ = material_data;
  if (material_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Flower.material_data)
}
void Flower::_slow_mutable_flags() {
  flags_ = ::google::protobuf::Arena::CreateMessage< ::FlagsDescriptor >(
      GetArenaNoVirtual());
}
::FlagsDescriptor* Flower::_slow_release_flags() {
  if (flags_ == NULL) {
    return NULL;
  } else {
    ::FlagsDescriptor* temp = new ::FlagsDescriptor(*flags_);
    flags_ = NULL;
    return temp;
  }
}
::FlagsDescriptor* Flower::unsafe_arena_release_flags() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Flower.flags)
  
  ::FlagsDescriptor* temp = flags_;
  flags_ = NULL;
  return temp;
}
void Flower::_slow_set_allocated_flags(
    ::google::protobuf::Arena* message_arena, ::FlagsDescriptor** flags) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*flags) == NULL) {
      message_arena->Own(*flags);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*flags)) {
      ::FlagsDescriptor* new_flags = 
            ::google::protobuf::Arena::CreateMessage< ::FlagsDescriptor >(
            message_arena);
      new_flags->CopyFrom(**flags);
      *flags = new_flags;
    }
}
void Flower::unsafe_arena_set_allocated_flags(
    ::FlagsDescriptor* flags) {
  if (GetArenaNoVirtual() == NULL) {
    delete flags_;
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Flower.flags)
}
void Flower::_slow_mutable_pricing() {
  pricing_ = ::google::protobuf::Arena::CreateMessage< ::ProductPricing >(
      GetArenaNoVirtual());
}
::ProductPricing* Flower::_slow_release_pricing() {
  if (pricing_ == NULL) {
    return NULL;
  } else {
    ::ProductPricing* temp = new ::ProductPricing(*pricing_);
    pricing_ = NULL;
    return temp;
  }
}
::ProductPricing* Flower::unsafe_arena_release_pricing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Flower.pricing)
  
  ::ProductPricing* temp = pricing_;
  pricing_ = NULL;
  return temp;
}
void Flower::_slow_set_allocated_pricing(
    ::google::protobuf::Arena* message_arena, ::ProductPricing** pricing) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pricing) == NULL) {
      message_arena->Own(*pricing);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pricing)) {
      ::ProductPricing* new_pricing = 
            ::google::protobuf::Arena::CreateMessage< ::ProductPricing >(
            message_arena);
      new_pricing->CopyFrom(**pricing);
      *pricing = new_pricing;
    }
}
void Flower::unsafe_arena_set_allocated_pricing(
    ::ProductPricing* pricing) {
  if (GetArenaNoVirtual() == NULL) {
    delete pricing_;
  }
  pricing_ = pricing;
  if (pricing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Flower.pricing)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Flower::kKeyFieldNumber;
const int Flower::kProductDataFieldNumber;
const int Flower::kMaterialDataFieldNumber;
const int Flower::kFlagsFieldNumber;
const int Flower::kPricingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Flower::Flower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_products_2fFlower_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Flower)
}
Flower::Flower(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_products_2fFlower_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Flower)
}
Flower::Flower(const Flower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::ProductKey(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_product_data()) {
    product_data_ = new ::ProductContent(*from.product_data_);
  } else {
    product_data_ = NULL;
  }
  if (from.has_material_data()) {
    material_data_ = new ::MaterialsData(*from.material_data_);
  } else {
    material_data_ = NULL;
  }
  if (from.has_flags()) {
    flags_ = new ::FlagsDescriptor(*from.flags_);
  } else {
    flags_ = NULL;
  }
  if (from.has_pricing()) {
    pricing_ = new ::ProductPricing(*from.pricing_);
  } else {
    pricing_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Flower)
}

void Flower::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&pricing_) -
    reinterpret_cast<char*>(&key_) + sizeof(pricing_));
  _cached_size_ = 0;
}

Flower::~Flower() {
  // @@protoc_insertion_point(destructor:Flower)
  SharedDtor();
}

void Flower::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete product_data_;
  }
  if (this != internal_default_instance()) {
    delete material_data_;
  }
  if (this != internal_default_instance()) {
    delete flags_;
  }
  if (this != internal_default_instance()) {
    delete pricing_;
  }
}

void Flower::ArenaDtor(void* object) {
  Flower* _this = reinterpret_cast< Flower* >(object);
  (void)_this;
}
void Flower::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Flower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Flower::descriptor() {
  protobuf_products_2fFlower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_products_2fFlower_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Flower& Flower::default_instance() {
  protobuf_products_2fFlower_2eproto::InitDefaults();
  return *internal_default_instance();
}

Flower* Flower::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Flower>(arena);
}

void Flower::Clear() {
// @@protoc_insertion_point(message_clear_start:Flower)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && product_data_ != NULL) {
    delete product_data_;
  }
  product_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && material_data_ != NULL) {
    delete material_data_;
  }
  material_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && flags_ != NULL) {
    delete flags_;
  }
  flags_ = NULL;
  if (GetArenaNoVirtual() == NULL && pricing_ != NULL) {
    delete pricing_;
  }
  pricing_ = NULL;
}

bool Flower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Flower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ProductKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProductContent product_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MaterialsData material_data = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_material_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FlagsDescriptor flags = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProductPricing pricing = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pricing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Flower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Flower)
  return false;
#undef DO_
}

void Flower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Flower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // .ProductContent product_data = 20;
  if (this->has_product_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->product_data_, output);
  }

  // .MaterialsData material_data = 21;
  if (this->has_material_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->material_data_, output);
  }

  // .FlagsDescriptor flags = 22;
  if (this->has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->flags_, output);
  }

  // .ProductPricing pricing = 23;
  if (this->has_pricing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->pricing_, output);
  }

  // @@protoc_insertion_point(serialize_end:Flower)
}

::google::protobuf::uint8* Flower::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Flower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // .ProductContent product_data = 20;
  if (this->has_product_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->product_data_, deterministic, target);
  }

  // .MaterialsData material_data = 21;
  if (this->has_material_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->material_data_, deterministic, target);
  }

  // .FlagsDescriptor flags = 22;
  if (this->has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->flags_, deterministic, target);
  }

  // .ProductPricing pricing = 23;
  if (this->has_pricing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->pricing_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Flower)
  return target;
}

size_t Flower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Flower)
  size_t total_size = 0;

  // .ProductKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .ProductContent product_data = 20;
  if (this->has_product_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->product_data_);
  }

  // .MaterialsData material_data = 21;
  if (this->has_material_data()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->material_data_);
  }

  // .FlagsDescriptor flags = 22;
  if (this->has_flags()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->flags_);
  }

  // .ProductPricing pricing = 23;
  if (this->has_pricing()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pricing_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Flower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Flower)
  GOOGLE_DCHECK_NE(&from, this);
  const Flower* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Flower>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Flower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Flower)
    MergeFrom(*source);
  }
}

void Flower::MergeFrom(const Flower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Flower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::ProductKey::MergeFrom(from.key());
  }
  if (from.has_product_data()) {
    mutable_product_data()->::ProductContent::MergeFrom(from.product_data());
  }
  if (from.has_material_data()) {
    mutable_material_data()->::MaterialsData::MergeFrom(from.material_data());
  }
  if (from.has_flags()) {
    mutable_flags()->::FlagsDescriptor::MergeFrom(from.flags());
  }
  if (from.has_pricing()) {
    mutable_pricing()->::ProductPricing::MergeFrom(from.pricing());
  }
}

void Flower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Flower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flower::CopyFrom(const Flower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Flower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flower::IsInitialized() const {
  return true;
}

void Flower::Swap(Flower* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Flower* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Flower::UnsafeArenaSwap(Flower* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Flower::InternalSwap(Flower* other) {
  std::swap(key_, other->key_);
  std::swap(product_data_, other->product_data_);
  std::swap(material_data_, other->material_data_);
  std::swap(flags_, other->flags_);
  std::swap(pricing_, other->pricing_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Flower::GetMetadata() const {
  protobuf_products_2fFlower_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_products_2fFlower_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Flower

// .ProductKey key = 1;
bool Flower::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void Flower::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::ProductKey& Flower::key() const {
  // @@protoc_insertion_point(field_get:Flower.key)
  return key_ != NULL ? *key_
                         : *::ProductKey::internal_default_instance();
}
::ProductKey* Flower::mutable_key() {
  
  if (key_ == NULL) {
    _slow_mutable_key();
  }
  // @@protoc_insertion_point(field_mutable:Flower.key)
  return key_;
}
::ProductKey* Flower::release_key() {
  // @@protoc_insertion_point(field_release:Flower.key)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_key();
  } else {
    ::ProductKey* temp = key_;
    key_ = NULL;
    return temp;
  }
}
 void Flower::set_allocated_key(::ProductKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key != NULL) {
    _slow_set_allocated_key(message_arena, &key);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Flower.key)
}

// .ProductContent product_data = 20;
bool Flower::has_product_data() const {
  return this != internal_default_instance() && product_data_ != NULL;
}
void Flower::clear_product_data() {
  if (GetArenaNoVirtual() == NULL && product_data_ != NULL) delete product_data_;
  product_data_ = NULL;
}
const ::ProductContent& Flower::product_data() const {
  // @@protoc_insertion_point(field_get:Flower.product_data)
  return product_data_ != NULL ? *product_data_
                         : *::ProductContent::internal_default_instance();
}
::ProductContent* Flower::mutable_product_data() {
  
  if (product_data_ == NULL) {
    _slow_mutable_product_data();
  }
  // @@protoc_insertion_point(field_mutable:Flower.product_data)
  return product_data_;
}
::ProductContent* Flower::release_product_data() {
  // @@protoc_insertion_point(field_release:Flower.product_data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_product_data();
  } else {
    ::ProductContent* temp = product_data_;
    product_data_ = NULL;
    return temp;
  }
}
 void Flower::set_allocated_product_data(::ProductContent* product_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_data_;
  }
  if (product_data != NULL) {
    _slow_set_allocated_product_data(message_arena, &product_data);
  }
  product_data_ = product_data;
  if (product_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Flower.product_data)
}

// .MaterialsData material_data = 21;
bool Flower::has_material_data() const {
  return this != internal_default_instance() && material_data_ != NULL;
}
void Flower::clear_material_data() {
  if (GetArenaNoVirtual() == NULL && material_data_ != NULL) delete material_data_;
  material_data_ = NULL;
}
const ::MaterialsData& Flower::material_data() const {
  // @@protoc_insertion_point(field_get:Flower.material_data)
  return material_data_ != NULL ? *material_data_
                         : *::MaterialsData::internal_default_instance();
}
::MaterialsData* Flower::mutable_material_data() {
  
  if (material_data_ == NULL) {
    _slow_mutable_material_data();
  }
  // @@protoc_insertion_point(field_mutable:Flower.material_data)
  return material_data_;
}
::MaterialsData* Flower::release_material_data() {
  // @@protoc_insertion_point(field_release:Flower.material_data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_material_data();
  } else {
    ::MaterialsData* temp = material_data_;
    material_data_ = NULL;
    return temp;
  }
}
 void Flower::set_allocated_material_data(::MaterialsData* material_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete material_data_;
  }
  if (material_data != NULL) {
    _slow_set_allocated_material_data(message_arena, &material_data);
  }
  material_data_ = material_data;
  if (material_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Flower.material_data)
}

// .FlagsDescriptor flags = 22;
bool Flower::has_flags() const {
  return this != internal_default_instance() && flags_ != NULL;
}
void Flower::clear_flags() {
  if (GetArenaNoVirtual() == NULL && flags_ != NULL) delete flags_;
  flags_ = NULL;
}
const ::FlagsDescriptor& Flower::flags() const {
  // @@protoc_insertion_point(field_get:Flower.flags)
  return flags_ != NULL ? *flags_
                         : *::FlagsDescriptor::internal_default_instance();
}
::FlagsDescriptor* Flower::mutable_flags() {
  
  if (flags_ == NULL) {
    _slow_mutable_flags();
  }
  // @@protoc_insertion_point(field_mutable:Flower.flags)
  return flags_;
}
::FlagsDescriptor* Flower::release_flags() {
  // @@protoc_insertion_point(field_release:Flower.flags)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_flags();
  } else {
    ::FlagsDescriptor* temp = flags_;
    flags_ = NULL;
    return temp;
  }
}
 void Flower::set_allocated_flags(::FlagsDescriptor* flags) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flags_;
  }
  if (flags != NULL) {
    _slow_set_allocated_flags(message_arena, &flags);
  }
  flags_ = flags;
  if (flags) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Flower.flags)
}

// .ProductPricing pricing = 23;
bool Flower::has_pricing() const {
  return this != internal_default_instance() && pricing_ != NULL;
}
void Flower::clear_pricing() {
  if (GetArenaNoVirtual() == NULL && pricing_ != NULL) delete pricing_;
  pricing_ = NULL;
}
const ::ProductPricing& Flower::pricing() const {
  // @@protoc_insertion_point(field_get:Flower.pricing)
  return pricing_ != NULL ? *pricing_
                         : *::ProductPricing::internal_default_instance();
}
::ProductPricing* Flower::mutable_pricing() {
  
  if (pricing_ == NULL) {
    _slow_mutable_pricing();
  }
  // @@protoc_insertion_point(field_mutable:Flower.pricing)
  return pricing_;
}
::ProductPricing* Flower::release_pricing() {
  // @@protoc_insertion_point(field_release:Flower.pricing)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pricing();
  } else {
    ::ProductPricing* temp = pricing_;
    pricing_ = NULL;
    return temp;
  }
}
 void Flower::set_allocated_pricing(::ProductPricing* pricing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pricing_;
  }
  if (pricing != NULL) {
    _slow_set_allocated_pricing(message_arena, &pricing);
  }
  pricing_ = pricing;
  if (pricing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Flower.pricing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
