// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Product.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Product.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ProductDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Product> {
} _Product_default_instance_;

namespace protobuf_Product_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Product, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Product)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Product_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Product.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Product_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_base_2fProductKey_2eproto::InitDefaults();
  ::protobuf_base_2fProductType_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  _Product_default_instance_.DefaultConstruct();
  _Product_default_instance_.get_mutable()->key_ = const_cast< ::ProductKey*>(
      ::ProductKey::internal_default_instance());
  _Product_default_instance_.get_mutable()->type_ = const_cast< ::ProductType*>(
      ::ProductType::internal_default_instance());
  _Product_default_instance_.get_mutable()->data_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rProduct.proto\032\025base/ProductKey.proto\032\026"
      "base/ProductType.proto\032\031google/protobuf/"
      "any.proto\"c\n\007Product\022\030\n\003key\030\001 \001(\0132\013.Prod"
      "uctKey\022\032\n\004type\030\002 \001(\0132\014.ProductType\022\"\n\004da"
      "ta\030\003 \001(\0132\024.google.protobuf.AnyB-\n\027io.blo"
      "ombox.schema.baseB\013BaseProductH\001P\001\370\001\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Product.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2fProductKey_2eproto::AddDescriptors();
  ::protobuf_base_2fProductType_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Product_2eproto


// ===================================================================

void Product::_slow_mutable_key() {
  key_ = ::google::protobuf::Arena::CreateMessage< ::ProductKey >(
      GetArenaNoVirtual());
}
::ProductKey* Product::_slow_release_key() {
  if (key_ == NULL) {
    return NULL;
  } else {
    ::ProductKey* temp = new ::ProductKey(*key_);
    key_ = NULL;
    return temp;
  }
}
::ProductKey* Product::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Product.key)
  
  ::ProductKey* temp = key_;
  key_ = NULL;
  return temp;
}
void Product::_slow_set_allocated_key(
    ::google::protobuf::Arena* message_arena, ::ProductKey** key) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*key) == NULL) {
      message_arena->Own(*key);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*key)) {
      ::ProductKey* new_key = 
            ::google::protobuf::Arena::CreateMessage< ::ProductKey >(
            message_arena);
      new_key->CopyFrom(**key);
      *key = new_key;
    }
}
void Product::unsafe_arena_set_allocated_key(
    ::ProductKey* key) {
  if (GetArenaNoVirtual() == NULL) {
    delete key_;
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Product.key)
}
void Product::_slow_mutable_type() {
  type_ = ::google::protobuf::Arena::CreateMessage< ::ProductType >(
      GetArenaNoVirtual());
}
::ProductType* Product::_slow_release_type() {
  if (type_ == NULL) {
    return NULL;
  } else {
    ::ProductType* temp = new ::ProductType(*type_);
    type_ = NULL;
    return temp;
  }
}
::ProductType* Product::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Product.type)
  
  ::ProductType* temp = type_;
  type_ = NULL;
  return temp;
}
void Product::_slow_set_allocated_type(
    ::google::protobuf::Arena* message_arena, ::ProductType** type) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*type) == NULL) {
      message_arena->Own(*type);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*type)) {
      ::ProductType* new_type = 
            ::google::protobuf::Arena::CreateMessage< ::ProductType >(
            message_arena);
      new_type->CopyFrom(**type);
      *type = new_type;
    }
}
void Product::unsafe_arena_set_allocated_type(
    ::ProductType* type) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_;
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Product.type)
}
void Product::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
      GetArenaNoVirtual());
}
::google::protobuf::Any* Product::_slow_release_data() {
  if (data_ == NULL) {
    return NULL;
  } else {
    ::google::protobuf::Any* temp = new ::google::protobuf::Any(*data_);
    data_ = NULL;
    return temp;
  }
}
::google::protobuf::Any* Product::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Product.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
void Product::unsafe_arena_set_allocated_data(
    ::google::protobuf::Any* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Product.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Product::kKeyFieldNumber;
const int Product::kTypeFieldNumber;
const int Product::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Product::Product()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Product_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Product)
}
Product::Product(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_Product_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Product)
}
Product::Product(const Product& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::ProductKey(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_type()) {
    type_ = new ::ProductType(*from.type_);
  } else {
    type_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::google::protobuf::Any(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Product)
}

void Product::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&key_) + sizeof(data_));
  _cached_size_ = 0;
}

Product::~Product() {
  // @@protoc_insertion_point(destructor:Product)
  SharedDtor();
}

void Product::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete type_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void Product::ArenaDtor(void* object) {
  Product* _this = reinterpret_cast< Product* >(object);
  (void)_this;
}
void Product::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Product::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Product::descriptor() {
  protobuf_Product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Product_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Product& Product::default_instance() {
  protobuf_Product_2eproto::InitDefaults();
  return *internal_default_instance();
}

Product* Product::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Product>(arena);
}

void Product::Clear() {
// @@protoc_insertion_point(message_clear_start:Product)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool Product::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Product)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ProductKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProductType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Product)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Product)
  return false;
#undef DO_
}

void Product::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // .ProductType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->type_, output);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:Product)
}

::google::protobuf::uint8* Product::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Product)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // .ProductType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->type_, deterministic, target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Product)
  return target;
}

size_t Product::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Product)
  size_t total_size = 0;

  // .ProductKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .ProductType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Product::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  const Product* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Product>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Product)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Product)
    MergeFrom(*source);
  }
}

void Product::MergeFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Product)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::ProductKey::MergeFrom(from.key());
  }
  if (from.has_type()) {
    mutable_type()->::ProductType::MergeFrom(from.type());
  }
  if (from.has_data()) {
    mutable_data()->::google::protobuf::Any::MergeFrom(from.data());
  }
}

void Product::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Product::CopyFrom(const Product& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Product)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Product::IsInitialized() const {
  return true;
}

void Product::Swap(Product* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Product* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Product::UnsafeArenaSwap(Product* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Product::InternalSwap(Product* other) {
  std::swap(key_, other->key_);
  std::swap(type_, other->type_);
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Product::GetMetadata() const {
  protobuf_Product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Product_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Product

// .ProductKey key = 1;
bool Product::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void Product::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::ProductKey& Product::key() const {
  // @@protoc_insertion_point(field_get:Product.key)
  return key_ != NULL ? *key_
                         : *::ProductKey::internal_default_instance();
}
::ProductKey* Product::mutable_key() {
  
  if (key_ == NULL) {
    _slow_mutable_key();
  }
  // @@protoc_insertion_point(field_mutable:Product.key)
  return key_;
}
::ProductKey* Product::release_key() {
  // @@protoc_insertion_point(field_release:Product.key)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_key();
  } else {
    ::ProductKey* temp = key_;
    key_ = NULL;
    return temp;
  }
}
 void Product::set_allocated_key(::ProductKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key != NULL) {
    _slow_set_allocated_key(message_arena, &key);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Product.key)
}

// .ProductType type = 2;
bool Product::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void Product::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::ProductType& Product::type() const {
  // @@protoc_insertion_point(field_get:Product.type)
  return type_ != NULL ? *type_
                         : *::ProductType::internal_default_instance();
}
::ProductType* Product::mutable_type() {
  
  if (type_ == NULL) {
    _slow_mutable_type();
  }
  // @@protoc_insertion_point(field_mutable:Product.type)
  return type_;
}
::ProductType* Product::release_type() {
  // @@protoc_insertion_point(field_release:Product.type)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_type();
  } else {
    ::ProductType* temp = type_;
    type_ = NULL;
    return temp;
  }
}
 void Product::set_allocated_type(::ProductType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type != NULL) {
    _slow_set_allocated_type(message_arena, &type);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Product.type)
}

// .google.protobuf.Any data = 3;
bool Product::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void Product::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::google::protobuf::Any& Product::data() const {
  // @@protoc_insertion_point(field_get:Product.data)
  return data_ != NULL ? *data_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* Product::mutable_data() {
  
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:Product.data)
  return data_;
}
::google::protobuf::Any* Product::release_data() {
  // @@protoc_insertion_point(field_release:Product.data)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::google::protobuf::Any* temp = data_;
    data_ = NULL;
    return temp;
  }
}
 void Product::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(data);
    }
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Product.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
