// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/Content.proto

#ifndef PROTOBUF_content_2fContent_2eproto__INCLUDED
#define PROTOBUF_content_2fContent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/Language.pb.h"
#include "base/Compression.pb.h"
// @@protoc_insertion_point(includes)
class Compression;
class CompressionDefaultTypeInternal;
extern CompressionDefaultTypeInternal _Compression_default_instance_;
class Content;
class ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;

namespace protobuf_content_2fContent_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_content_2fContent_2eproto

enum Content_Type {
  Content_Type_TEXT = 0,
  Content_Type_MARKDOWN = 1,
  Content_Type_HTML = 2,
  Content_Type_Content_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Content_Type_Content_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Content_Type_IsValid(int value);
const Content_Type Content_Type_Type_MIN = Content_Type_TEXT;
const Content_Type Content_Type_Type_MAX = Content_Type_HTML;
const int Content_Type_Type_ARRAYSIZE = Content_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Content_Type_descriptor();
inline const ::std::string& Content_Type_Name(Content_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Content_Type_descriptor(), value);
}
inline bool Content_Type_Parse(
    const ::std::string& name, Content_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Content_Type>(
    Content_Type_descriptor(), name, value);
}
enum Content_Encoding {
  Content_Encoding_UTF8 = 0,
  Content_Encoding_Content_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Content_Encoding_Content_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Content_Encoding_IsValid(int value);
const Content_Encoding Content_Encoding_Encoding_MIN = Content_Encoding_UTF8;
const Content_Encoding Content_Encoding_Encoding_MAX = Content_Encoding_UTF8;
const int Content_Encoding_Encoding_ARRAYSIZE = Content_Encoding_Encoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* Content_Encoding_descriptor();
inline const ::std::string& Content_Encoding_Name(Content_Encoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    Content_Encoding_descriptor(), value);
}
inline bool Content_Encoding_Parse(
    const ::std::string& name, Content_Encoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Content_Encoding>(
    Content_Encoding_descriptor(), name, value);
}
// ===================================================================

class Content : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Content) */ {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Content* other);

  // implements Message ----------------------------------------------

  inline Content* New() const PROTOBUF_FINAL { return New(NULL); }

  Content* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Content* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Content_Type Type;
  static const Type TEXT =
    Content_Type_TEXT;
  static const Type MARKDOWN =
    Content_Type_MARKDOWN;
  static const Type HTML =
    Content_Type_HTML;
  static inline bool Type_IsValid(int value) {
    return Content_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Content_Type_Type_MIN;
  static const Type Type_MAX =
    Content_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Content_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Content_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Content_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Content_Type_Parse(name, value);
  }

  typedef Content_Encoding Encoding;
  static const Encoding UTF8 =
    Content_Encoding_UTF8;
  static inline bool Encoding_IsValid(int value) {
    return Content_Encoding_IsValid(value);
  }
  static const Encoding Encoding_MIN =
    Content_Encoding_Encoding_MIN;
  static const Encoding Encoding_MAX =
    Content_Encoding_Encoding_MAX;
  static const int Encoding_ARRAYSIZE =
    Content_Encoding_Encoding_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Encoding_descriptor() {
    return Content_Encoding_descriptor();
  }
  static inline const ::std::string& Encoding_Name(Encoding value) {
    return Content_Encoding_Name(value);
  }
  static inline bool Encoding_Parse(const ::std::string& name,
      Encoding* value) {
    return Content_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .Compression compression = 5;
  bool has_compression() const;
  void clear_compression();
  static const int kCompressionFieldNumber = 5;
  const ::Compression& compression() const;
  ::Compression* mutable_compression();
  ::Compression* release_compression();
  void set_allocated_compression(::Compression* compression);

  // .Content.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Content_Type type() const;
  void set_type(::Content_Type value);

  // .Content.Encoding encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::Content_Encoding encoding() const;
  void set_encoding(::Content_Encoding value);

  // .Language language = 4;
  void clear_language();
  static const int kLanguageFieldNumber = 4;
  ::Language language() const;
  void set_language(::Language value);

  // @@protoc_insertion_point(class_scope:Content)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::Compression* compression_;
  int type_;
  int encoding_;
  int language_;
  mutable int _cached_size_;
  friend struct protobuf_content_2fContent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Content

// .Content.Type type = 1;
inline void Content::clear_type() {
  type_ = 0;
}
inline ::Content_Type Content::type() const {
  // @@protoc_insertion_point(field_get:Content.type)
  return static_cast< ::Content_Type >(type_);
}
inline void Content::set_type(::Content_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Content.type)
}

// .Content.Encoding encoding = 2;
inline void Content::clear_encoding() {
  encoding_ = 0;
}
inline ::Content_Encoding Content::encoding() const {
  // @@protoc_insertion_point(field_get:Content.encoding)
  return static_cast< ::Content_Encoding >(encoding_);
}
inline void Content::set_encoding(::Content_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:Content.encoding)
}

// bytes content = 3;
inline void Content::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Content::content() const {
  // @@protoc_insertion_point(field_get:Content.content)
  return content_.GetNoArena();
}
inline void Content::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Content.content)
}
#if LANG_CXX11
inline void Content::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Content.content)
}
#endif
inline void Content::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Content.content)
}
inline void Content::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Content.content)
}
inline ::std::string* Content::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Content.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Content::release_content() {
  // @@protoc_insertion_point(field_release:Content.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Content::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Content.content)
}

// .Language language = 4;
inline void Content::clear_language() {
  language_ = 0;
}
inline ::Language Content::language() const {
  // @@protoc_insertion_point(field_get:Content.language)
  return static_cast< ::Language >(language_);
}
inline void Content::set_language(::Language value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:Content.language)
}

// .Compression compression = 5;
inline bool Content::has_compression() const {
  return this != internal_default_instance() && compression_ != NULL;
}
inline void Content::clear_compression() {
  if (GetArenaNoVirtual() == NULL && compression_ != NULL) delete compression_;
  compression_ = NULL;
}
inline const ::Compression& Content::compression() const {
  // @@protoc_insertion_point(field_get:Content.compression)
  return compression_ != NULL ? *compression_
                         : *::Compression::internal_default_instance();
}
inline ::Compression* Content::mutable_compression() {
  
  if (compression_ == NULL) {
    compression_ = new ::Compression;
  }
  // @@protoc_insertion_point(field_mutable:Content.compression)
  return compression_;
}
inline ::Compression* Content::release_compression() {
  // @@protoc_insertion_point(field_release:Content.compression)
  
  ::Compression* temp = compression_;
  compression_ = NULL;
  return temp;
}
inline void Content::set_allocated_compression(::Compression* compression) {
  delete compression_;
  compression_ = compression;
  if (compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Content.compression)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Content_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Content_Type>() {
  return ::Content_Type_descriptor();
}
template <> struct is_proto_enum< ::Content_Encoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Content_Encoding>() {
  return ::Content_Encoding_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_2fContent_2eproto__INCLUDED
