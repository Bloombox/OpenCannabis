// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/MaterialsData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content/MaterialsData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MaterialsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaterialsData>
     _instance;
} _MaterialsData_default_instance_;

namespace protobuf_content_2fMaterialsData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsData, ingredients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsData, grow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsData, species_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsData, genetics_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MaterialsData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaterialsData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "content/MaterialsData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_structs_2fGrow_2eproto::InitDefaults();
  ::protobuf_structs_2fSpecies_2eproto::InitDefaults();
  ::protobuf_structs_2fGenetics_2eproto::InitDefaults();
  _MaterialsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaterialsData_default_instance_);_MaterialsData_default_instance_._instance.get_mutable()->genetics_ = const_cast< ::Genetics*>(
      ::Genetics::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033content/MaterialsData.proto\032\022structs/G"
      "row.proto\032\025structs/Species.proto\032\026struct"
      "s/Genetics.proto\"q\n\rMaterialsData\022\023\n\013ing"
      "redients\030\001 \003(\t\022\023\n\004grow\030\002 \001(\0162\005.Grow\022\031\n\007s"
      "pecies\030\003 \001(\0162\010.Species\022\033\n\010genetics\030\004 \001(\013"
      "2\t.GeneticsB5\n\032io.bloombox.schema.conten"
      "tB\020MaterialsContentH\001P\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content/MaterialsData.proto", &protobuf_RegisterTypes);
  ::protobuf_structs_2fGrow_2eproto::AddDescriptors();
  ::protobuf_structs_2fSpecies_2eproto::AddDescriptors();
  ::protobuf_structs_2fGenetics_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_content_2fMaterialsData_2eproto


// ===================================================================

void MaterialsData::_slow_mutable_genetics() {
  genetics_ = ::google::protobuf::Arena::CreateMessage< ::Genetics >(
      GetArenaNoVirtual());
}
::Genetics* MaterialsData::_slow_release_genetics() {
  if (genetics_ == NULL) {
    return NULL;
  } else {
    ::Genetics* temp = new ::Genetics(*genetics_);
    genetics_ = NULL;
    return temp;
  }
}
::Genetics* MaterialsData::unsafe_arena_release_genetics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MaterialsData.genetics)
  
  ::Genetics* temp = genetics_;
  genetics_ = NULL;
  return temp;
}
void MaterialsData::_slow_set_allocated_genetics(
    ::google::protobuf::Arena* message_arena, ::Genetics** genetics) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*genetics) == NULL) {
      message_arena->Own(*genetics);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*genetics)) {
      ::Genetics* new_genetics = 
            ::google::protobuf::Arena::CreateMessage< ::Genetics >(
            message_arena);
      new_genetics->CopyFrom(**genetics);
      *genetics = new_genetics;
    }
}
void MaterialsData::unsafe_arena_set_allocated_genetics(
    ::Genetics* genetics) {
  if (GetArenaNoVirtual() == NULL) {
    delete genetics_;
  }
  genetics_ = genetics;
  if (genetics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MaterialsData.genetics)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaterialsData::kIngredientsFieldNumber;
const int MaterialsData::kGrowFieldNumber;
const int MaterialsData::kSpeciesFieldNumber;
const int MaterialsData::kGeneticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaterialsData::MaterialsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_2fMaterialsData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaterialsData)
}
MaterialsData::MaterialsData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ingredients_(arena) {
  protobuf_content_2fMaterialsData_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MaterialsData)
}
MaterialsData::MaterialsData(const MaterialsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ingredients_(from.ingredients_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_genetics()) {
    genetics_ = new ::Genetics(*from.genetics_);
  } else {
    genetics_ = NULL;
  }
  ::memcpy(&grow_, &from.grow_,
    static_cast<size_t>(reinterpret_cast<char*>(&species_) -
    reinterpret_cast<char*>(&grow_)) + sizeof(species_));
  // @@protoc_insertion_point(copy_constructor:MaterialsData)
}

void MaterialsData::SharedCtor() {
  ::memset(&genetics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&species_) -
      reinterpret_cast<char*>(&genetics_)) + sizeof(species_));
  _cached_size_ = 0;
}

MaterialsData::~MaterialsData() {
  // @@protoc_insertion_point(destructor:MaterialsData)
  SharedDtor();
}

void MaterialsData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete genetics_;
}

void MaterialsData::ArenaDtor(void* object) {
  MaterialsData* _this = reinterpret_cast< MaterialsData* >(object);
  (void)_this;
}
void MaterialsData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaterialsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialsData::descriptor() {
  protobuf_content_2fMaterialsData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fMaterialsData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaterialsData& MaterialsData::default_instance() {
  protobuf_content_2fMaterialsData_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaterialsData* MaterialsData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MaterialsData>(arena);
}

void MaterialsData::Clear() {
// @@protoc_insertion_point(message_clear_start:MaterialsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingredients_.Clear();
  if (GetArenaNoVirtual() == NULL && genetics_ != NULL) {
    delete genetics_;
  }
  genetics_ = NULL;
  ::memset(&grow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&species_) -
      reinterpret_cast<char*>(&grow_)) + sizeof(species_));
  _internal_metadata_.Clear();
}

bool MaterialsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MaterialsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ingredients = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ingredients()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ingredients(this->ingredients_size() - 1).data(),
            static_cast<int>(this->ingredients(this->ingredients_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MaterialsData.ingredients"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Grow grow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_grow(static_cast< ::Grow >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Species species = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_species(static_cast< ::Species >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Genetics genetics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_genetics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MaterialsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MaterialsData)
  return false;
#undef DO_
}

void MaterialsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MaterialsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ingredients = 1;
  for (int i = 0, n = this->ingredients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingredients(i).data(), static_cast<int>(this->ingredients(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MaterialsData.ingredients");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ingredients(i), output);
  }

  // .Grow grow = 2;
  if (this->grow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->grow(), output);
  }

  // .Species species = 3;
  if (this->species() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->species(), output);
  }

  // .Genetics genetics = 4;
  if (this->has_genetics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->genetics_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MaterialsData)
}

::google::protobuf::uint8* MaterialsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MaterialsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ingredients = 1;
  for (int i = 0, n = this->ingredients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ingredients(i).data(), static_cast<int>(this->ingredients(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MaterialsData.ingredients");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ingredients(i), target);
  }

  // .Grow grow = 2;
  if (this->grow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->grow(), target);
  }

  // .Species species = 3;
  if (this->species() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->species(), target);
  }

  // .Genetics genetics = 4;
  if (this->has_genetics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->genetics_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaterialsData)
  return target;
}

size_t MaterialsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaterialsData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ingredients = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ingredients_size());
  for (int i = 0, n = this->ingredients_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ingredients(i));
  }

  // .Genetics genetics = 4;
  if (this->has_genetics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->genetics_);
  }

  // .Grow grow = 2;
  if (this->grow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->grow());
  }

  // .Species species = 3;
  if (this->species() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->species());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MaterialsData)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaterialsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MaterialsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MaterialsData)
    MergeFrom(*source);
  }
}

void MaterialsData::MergeFrom(const MaterialsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaterialsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingredients_.MergeFrom(from.ingredients_);
  if (from.has_genetics()) {
    mutable_genetics()->::Genetics::MergeFrom(from.genetics());
  }
  if (from.grow() != 0) {
    set_grow(from.grow());
  }
  if (from.species() != 0) {
    set_species(from.species());
  }
}

void MaterialsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MaterialsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialsData::CopyFrom(const MaterialsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaterialsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialsData::IsInitialized() const {
  return true;
}

void MaterialsData::Swap(MaterialsData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaterialsData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaterialsData::UnsafeArenaSwap(MaterialsData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaterialsData::InternalSwap(MaterialsData* other) {
  using std::swap;
  ingredients_.InternalSwap(&other->ingredients_);
  swap(genetics_, other->genetics_);
  swap(grow_, other->grow_);
  swap(species_, other->species_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaterialsData::GetMetadata() const {
  protobuf_content_2fMaterialsData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fMaterialsData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaterialsData

// repeated string ingredients = 1;
int MaterialsData::ingredients_size() const {
  return ingredients_.size();
}
void MaterialsData::clear_ingredients() {
  ingredients_.Clear();
}
const ::std::string& MaterialsData::ingredients(int index) const {
  // @@protoc_insertion_point(field_get:MaterialsData.ingredients)
  return ingredients_.Get(index);
}
::std::string* MaterialsData::mutable_ingredients(int index) {
  // @@protoc_insertion_point(field_mutable:MaterialsData.ingredients)
  return ingredients_.Mutable(index);
}
void MaterialsData::set_ingredients(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MaterialsData.ingredients)
  ingredients_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MaterialsData::set_ingredients(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:MaterialsData.ingredients)
  ingredients_.Mutable(index)->assign(std::move(value));
}
#endif
void MaterialsData::set_ingredients(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ingredients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MaterialsData.ingredients)
}
void MaterialsData::set_ingredients(int index, const char* value, size_t size) {
  ingredients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MaterialsData.ingredients)
}
::std::string* MaterialsData::add_ingredients() {
  // @@protoc_insertion_point(field_add_mutable:MaterialsData.ingredients)
  return ingredients_.Add();
}
void MaterialsData::add_ingredients(const ::std::string& value) {
  ingredients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MaterialsData.ingredients)
}
#if LANG_CXX11
void MaterialsData::add_ingredients(::std::string&& value) {
  ingredients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MaterialsData.ingredients)
}
#endif
void MaterialsData::add_ingredients(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ingredients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MaterialsData.ingredients)
}
void MaterialsData::add_ingredients(const char* value, size_t size) {
  ingredients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MaterialsData.ingredients)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MaterialsData::ingredients() const {
  // @@protoc_insertion_point(field_list:MaterialsData.ingredients)
  return ingredients_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MaterialsData::mutable_ingredients() {
  // @@protoc_insertion_point(field_mutable_list:MaterialsData.ingredients)
  return &ingredients_;
}

// .Grow grow = 2;
void MaterialsData::clear_grow() {
  grow_ = 0;
}
::Grow MaterialsData::grow() const {
  // @@protoc_insertion_point(field_get:MaterialsData.grow)
  return static_cast< ::Grow >(grow_);
}
void MaterialsData::set_grow(::Grow value) {
  
  grow_ = value;
  // @@protoc_insertion_point(field_set:MaterialsData.grow)
}

// .Species species = 3;
void MaterialsData::clear_species() {
  species_ = 0;
}
::Species MaterialsData::species() const {
  // @@protoc_insertion_point(field_get:MaterialsData.species)
  return static_cast< ::Species >(species_);
}
void MaterialsData::set_species(::Species value) {
  
  species_ = value;
  // @@protoc_insertion_point(field_set:MaterialsData.species)
}

// .Genetics genetics = 4;
bool MaterialsData::has_genetics() const {
  return this != internal_default_instance() && genetics_ != NULL;
}
void MaterialsData::clear_genetics() {
  if (GetArenaNoVirtual() == NULL && genetics_ != NULL) delete genetics_;
  genetics_ = NULL;
}
const ::Genetics& MaterialsData::genetics() const {
  const ::Genetics* p = genetics_;
  // @@protoc_insertion_point(field_get:MaterialsData.genetics)
  return p != NULL ? *p : *reinterpret_cast<const ::Genetics*>(
      &::_Genetics_default_instance_);
}
::Genetics* MaterialsData::mutable_genetics() {
  
  if (genetics_ == NULL) {
    _slow_mutable_genetics();
  }
  // @@protoc_insertion_point(field_mutable:MaterialsData.genetics)
  return genetics_;
}
::Genetics* MaterialsData::release_genetics() {
  // @@protoc_insertion_point(field_release:MaterialsData.genetics)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_genetics();
  } else {
    ::Genetics* temp = genetics_;
    genetics_ = NULL;
    return temp;
  }
}
 void MaterialsData::set_allocated_genetics(::Genetics* genetics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete genetics_;
  }
  if (genetics != NULL) {
    _slow_set_allocated_genetics(message_arena, &genetics);
  }
  genetics_ = genetics;
  if (genetics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MaterialsData.genetics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
