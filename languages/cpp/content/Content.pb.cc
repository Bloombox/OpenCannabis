// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/Content.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content/Content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Content> {
} _Content_default_instance_;

namespace protobuf_content_2fContent_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, compression_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Content)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Content_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "content/Content.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Content_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_base_2fLanguage_2eproto::InitDefaults();
  ::protobuf_base_2fCompression_2eproto::InitDefaults();
  _Content_default_instance_.DefaultConstruct();
  _Content_default_instance_.get_mutable()->compression_ = const_cast< ::Compression*>(
      ::Compression::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025content/Content.proto\032\023base/Language.p"
      "roto\032\026base/Compression.proto\"\334\001\n\007Content"
      "\022\033\n\004type\030\001 \001(\0162\r.Content.Type\022#\n\010encodin"
      "g\030\002 \001(\0162\021.Content.Encoding\022\017\n\007content\030\003 "
      "\001(\014\022\033\n\010language\030\004 \001(\0162\t.Language\022!\n\013comp"
      "ression\030\005 \001(\0132\014.Compression\"(\n\004Type\022\010\n\004T"
      "EXT\020\000\022\014\n\010MARKDOWN\020\001\022\010\n\004HTML\020\002\"\024\n\010Encodin"
      "g\022\010\n\004UTF8\020\000B3\n\032io.bloombox.schema.conten"
      "tB\016GenericContentH\001P\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content/Content.proto", &protobuf_RegisterTypes);
  ::protobuf_base_2fLanguage_2eproto::AddDescriptors();
  ::protobuf_base_2fCompression_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_content_2fContent_2eproto

const ::google::protobuf::EnumDescriptor* Content_Type_descriptor() {
  protobuf_content_2fContent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fContent_2eproto::file_level_enum_descriptors[0];
}
bool Content_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Content_Type Content::TEXT;
const Content_Type Content::MARKDOWN;
const Content_Type Content::HTML;
const Content_Type Content::Type_MIN;
const Content_Type Content::Type_MAX;
const int Content::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Content_Encoding_descriptor() {
  protobuf_content_2fContent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fContent_2eproto::file_level_enum_descriptors[1];
}
bool Content_Encoding_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Content_Encoding Content::UTF8;
const Content_Encoding Content::Encoding_MIN;
const Content_Encoding Content::Encoding_MAX;
const int Content::Encoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Content::_slow_mutable_compression() {
  compression_ = ::google::protobuf::Arena::CreateMessage< ::Compression >(
      GetArenaNoVirtual());
}
::Compression* Content::_slow_release_compression() {
  if (compression_ == NULL) {
    return NULL;
  } else {
    ::Compression* temp = new ::Compression(*compression_);
    compression_ = NULL;
    return temp;
  }
}
::Compression* Content::unsafe_arena_release_compression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Content.compression)
  
  ::Compression* temp = compression_;
  compression_ = NULL;
  return temp;
}
void Content::_slow_set_allocated_compression(
    ::google::protobuf::Arena* message_arena, ::Compression** compression) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*compression) == NULL) {
      message_arena->Own(*compression);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*compression)) {
      ::Compression* new_compression = 
            ::google::protobuf::Arena::CreateMessage< ::Compression >(
            message_arena);
      new_compression->CopyFrom(**compression);
      *compression = new_compression;
    }
}
void Content::unsafe_arena_set_allocated_compression(
    ::Compression* compression) {
  if (GetArenaNoVirtual() == NULL) {
    delete compression_;
  }
  compression_ = compression;
  if (compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Content.compression)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Content::kTypeFieldNumber;
const int Content::kEncodingFieldNumber;
const int Content::kContentFieldNumber;
const int Content::kLanguageFieldNumber;
const int Content::kCompressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Content::Content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_2fContent_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Content)
}
Content::Content(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_content_2fContent_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Content)
}
Content::Content(const Content& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content(),
      GetArenaNoVirtual());
  }
  if (from.has_compression()) {
    compression_ = new ::Compression(*from.compression_);
  } else {
    compression_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&type_) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:Content)
}

void Content::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&compression_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&compression_) + sizeof(language_));
  _cached_size_ = 0;
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:Content)
  SharedDtor();
}

void Content::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  content_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete compression_;
  }
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_content_2fContent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fContent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Content& Content::default_instance() {
  protobuf_content_2fContent_2eproto::InitDefaults();
  return *internal_default_instance();
}

Content* Content::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Content>(arena);
}

void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:Content)
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && compression_ != NULL) {
    delete compression_;
  }
  compression_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&type_) + sizeof(language_));
}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Content.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Content_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Content.Encoding encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::Content_Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Language language = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_language(static_cast< ::Language >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Compression compression = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Content.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .Content.Encoding encoding = 2;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // .Language language = 4;
  if (this->language() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->language(), output);
  }

  // .Compression compression = 5;
  if (this->has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->compression_, output);
  }

  // @@protoc_insertion_point(serialize_end:Content)
}

::google::protobuf::uint8* Content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Content.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .Content.Encoding encoding = 2;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // bytes content = 3;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // .Language language = 4;
  if (this->language() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->language(), target);
  }

  // .Compression compression = 5;
  if (this->has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->compression_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Content)
  size_t total_size = 0;

  // bytes content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .Compression compression = 5;
  if (this->has_compression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compression_);
  }

  // .Content.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .Content.Encoding encoding = 2;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // .Language language = 4;
  if (this->language() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Content)
  GOOGLE_DCHECK_NE(&from, this);
  const Content* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Content)
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    set_content(from.content());
  }
  if (from.has_compression()) {
    mutable_compression()->::Compression::MergeFrom(from.compression());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.language() != 0) {
    set_language(from.language());
  }
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::Swap(Content* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Content* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Content::UnsafeArenaSwap(Content* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Content::InternalSwap(Content* other) {
  content_.Swap(&other->content_);
  std::swap(compression_, other->compression_);
  std::swap(type_, other->type_);
  std::swap(encoding_, other->encoding_);
  std::swap(language_, other->language_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_content_2fContent_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_2fContent_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Content

// .Content.Type type = 1;
void Content::clear_type() {
  type_ = 0;
}
::Content_Type Content::type() const {
  // @@protoc_insertion_point(field_get:Content.type)
  return static_cast< ::Content_Type >(type_);
}
void Content::set_type(::Content_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Content.type)
}

// .Content.Encoding encoding = 2;
void Content::clear_encoding() {
  encoding_ = 0;
}
::Content_Encoding Content::encoding() const {
  // @@protoc_insertion_point(field_get:Content.encoding)
  return static_cast< ::Content_Encoding >(encoding_);
}
void Content::set_encoding(::Content_Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:Content.encoding)
}

// bytes content = 3;
void Content::clear_content() {
  content_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Content::content() const {
  // @@protoc_insertion_point(field_get:Content.content)
  return content_.Get();
}
void Content::set_content(const ::std::string& value) {
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Content.content)
}
void Content::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Content.content)
}
void Content::set_content(const void* value,
    size_t size) {
  
  content_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Content.content)
}
::std::string* Content::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:Content.content)
  return content_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Content::release_content() {
  // @@protoc_insertion_point(field_release:Content.content)
  
  return content_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Content::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Content.content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return content_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Content::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Content.content)
}
void Content::unsafe_arena_set_allocated_content(
    ::std::string* content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (content != NULL) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      content, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Content.content)
}

// .Language language = 4;
void Content::clear_language() {
  language_ = 0;
}
::Language Content::language() const {
  // @@protoc_insertion_point(field_get:Content.language)
  return static_cast< ::Language >(language_);
}
void Content::set_language(::Language value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:Content.language)
}

// .Compression compression = 5;
bool Content::has_compression() const {
  return this != internal_default_instance() && compression_ != NULL;
}
void Content::clear_compression() {
  if (GetArenaNoVirtual() == NULL && compression_ != NULL) delete compression_;
  compression_ = NULL;
}
const ::Compression& Content::compression() const {
  // @@protoc_insertion_point(field_get:Content.compression)
  return compression_ != NULL ? *compression_
                         : *::Compression::internal_default_instance();
}
::Compression* Content::mutable_compression() {
  
  if (compression_ == NULL) {
    _slow_mutable_compression();
  }
  // @@protoc_insertion_point(field_mutable:Content.compression)
  return compression_;
}
::Compression* Content::release_compression() {
  // @@protoc_insertion_point(field_release:Content.compression)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_compression();
  } else {
    ::Compression* temp = compression_;
    compression_ = NULL;
    return temp;
  }
}
 void Content::set_allocated_compression(::Compression* compression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compression_;
  }
  if (compression != NULL) {
    _slow_set_allocated_compression(message_arena, &compression);
  }
  compression_ = compression;
  if (compression) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Content.compression)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
