// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaType.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media/MediaType.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MediaTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MediaType> {
} _MediaType_default_instance_;
class ImageTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageType> {
} _ImageType_default_instance_;
class DocumentTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DocumentType> {
} _DocumentType_default_instance_;
class VideoTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoType> {
} _VideoType_default_instance_;

namespace protobuf_media_2fMediaType_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaType, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaType, image_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaType, document_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaType, video_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageType, kind_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentType, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentType, compressed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoType, kind_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MediaType)},
  { 9, -1, sizeof(ImageType)},
  { 15, -1, sizeof(DocumentType)},
  { 22, -1, sizeof(VideoType)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MediaType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoType_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "media/MediaType.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _MediaType_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ImageType_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DocumentType_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _VideoType_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MediaType_default_instance_.DefaultConstruct();
  _ImageType_default_instance_.DefaultConstruct();
  _DocumentType_default_instance_.DefaultConstruct();
  _VideoType_default_instance_.DefaultConstruct();
  _MediaType_default_instance_.get_mutable()->image_type_ = const_cast< ::ImageType*>(
      ::ImageType::internal_default_instance());
  _MediaType_default_instance_.get_mutable()->document_type_ = const_cast< ::DocumentType*>(
      ::DocumentType::internal_default_instance());
  _MediaType_default_instance_.get_mutable()->video_type_ = const_cast< ::VideoType*>(
      ::VideoType::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025media/MediaType.proto\"\310\001\n\tMediaType\022\035\n"
      "\004kind\030\001 \001(\0162\017.MediaType.Kind\022\036\n\nimage_ty"
      "pe\030e \001(\0132\n.ImageType\022%\n\rdocument_type\030\311\001"
      " \001(\0132\r.DocumentType\022\037\n\nvideo_type\030\255\002 \001(\013"
      "2\n.VideoType\"4\n\004Kind\022\010\n\004LINK\020\000\022\t\n\005IMAGE\020"
      "\001\022\014\n\010DOCUMENT\020\002\022\t\n\005VIDEO\020\003\"j\n\tImageType\022"
      "\"\n\004kind\030\001 \001(\0162\024.ImageType.ImageKind\"9\n\tI"
      "mageKind\022\007\n\003PNG\020\000\022\007\n\003JPG\020\001\022\007\n\003GIF\020\002\022\007\n\003S"
      "VG\020\003\022\010\n\004WEBP\020\004\"\206\001\n\014DocumentType\022(\n\004kind\030"
      "\001 \001(\0162\032.DocumentType.DocumentKind\022\022\n\ncom"
      "pressed\030\002 \001(\010\"8\n\014DocumentKind\022\007\n\003TXT\020\000\022\010"
      "\n\004HTML\020\001\022\007\n\003PDF\020\002\022\014\n\010MARKDOWN\020\003\"W\n\tVideo"
      "Type\022\"\n\004kind\030\001 \001(\0162\024.VideoType.VideoKind"
      "\"&\n\tVideoKind\022\007\n\003MP4\020\000\022\007\n\003FLV\020\001\022\007\n\003HLS\020\002"
      "B\034\n\030io.bloombox.schema.mediaP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media/MediaType.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_media_2fMediaType_2eproto

const ::google::protobuf::EnumDescriptor* MediaType_Kind_descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_enum_descriptors[0];
}
bool MediaType_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MediaType_Kind MediaType::LINK;
const MediaType_Kind MediaType::IMAGE;
const MediaType_Kind MediaType::DOCUMENT;
const MediaType_Kind MediaType::VIDEO;
const MediaType_Kind MediaType::Kind_MIN;
const MediaType_Kind MediaType::Kind_MAX;
const int MediaType::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImageType_ImageKind_descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_enum_descriptors[1];
}
bool ImageType_ImageKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageType_ImageKind ImageType::PNG;
const ImageType_ImageKind ImageType::JPG;
const ImageType_ImageKind ImageType::GIF;
const ImageType_ImageKind ImageType::SVG;
const ImageType_ImageKind ImageType::WEBP;
const ImageType_ImageKind ImageType::ImageKind_MIN;
const ImageType_ImageKind ImageType::ImageKind_MAX;
const int ImageType::ImageKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocumentType_DocumentKind_descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_enum_descriptors[2];
}
bool DocumentType_DocumentKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentType_DocumentKind DocumentType::TXT;
const DocumentType_DocumentKind DocumentType::HTML;
const DocumentType_DocumentKind DocumentType::PDF;
const DocumentType_DocumentKind DocumentType::MARKDOWN;
const DocumentType_DocumentKind DocumentType::DocumentKind_MIN;
const DocumentType_DocumentKind DocumentType::DocumentKind_MAX;
const int DocumentType::DocumentKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VideoType_VideoKind_descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_enum_descriptors[3];
}
bool VideoType_VideoKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoType_VideoKind VideoType::MP4;
const VideoType_VideoKind VideoType::FLV;
const VideoType_VideoKind VideoType::HLS;
const VideoType_VideoKind VideoType::VideoKind_MIN;
const VideoType_VideoKind VideoType::VideoKind_MAX;
const int VideoType::VideoKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaType::kKindFieldNumber;
const int MediaType::kImageTypeFieldNumber;
const int MediaType::kDocumentTypeFieldNumber;
const int MediaType::kVideoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaType::MediaType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_media_2fMediaType_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MediaType)
}
MediaType::MediaType(const MediaType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_type()) {
    image_type_ = new ::ImageType(*from.image_type_);
  } else {
    image_type_ = NULL;
  }
  if (from.has_document_type()) {
    document_type_ = new ::DocumentType(*from.document_type_);
  } else {
    document_type_ = NULL;
  }
  if (from.has_video_type()) {
    video_type_ = new ::VideoType(*from.video_type_);
  } else {
    video_type_ = NULL;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:MediaType)
}

void MediaType::SharedCtor() {
  ::memset(&image_type_, 0, reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&image_type_) + sizeof(kind_));
  _cached_size_ = 0;
}

MediaType::~MediaType() {
  // @@protoc_insertion_point(destructor:MediaType)
  SharedDtor();
}

void MediaType::SharedDtor() {
  if (this != internal_default_instance()) {
    delete image_type_;
  }
  if (this != internal_default_instance()) {
    delete document_type_;
  }
  if (this != internal_default_instance()) {
    delete video_type_;
  }
}

void MediaType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaType::descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaType& MediaType::default_instance() {
  protobuf_media_2fMediaType_2eproto::InitDefaults();
  return *internal_default_instance();
}

MediaType* MediaType::New(::google::protobuf::Arena* arena) const {
  MediaType* n = new MediaType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaType::Clear() {
// @@protoc_insertion_point(message_clear_start:MediaType)
  if (GetArenaNoVirtual() == NULL && image_type_ != NULL) {
    delete image_type_;
  }
  image_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && document_type_ != NULL) {
    delete document_type_;
  }
  document_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && video_type_ != NULL) {
    delete video_type_;
  }
  video_type_ = NULL;
  kind_ = 0;
}

bool MediaType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MediaType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MediaType.Kind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::MediaType_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ImageType image_type = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DocumentType document_type = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1610u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VideoType video_type = 301;
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MediaType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MediaType)
  return false;
#undef DO_
}

void MediaType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MediaType.Kind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // .ImageType image_type = 101;
  if (this->has_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->image_type_, output);
  }

  // .DocumentType document_type = 201;
  if (this->has_document_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, *this->document_type_, output);
  }

  // .VideoType video_type = 301;
  if (this->has_video_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *this->video_type_, output);
  }

  // @@protoc_insertion_point(serialize_end:MediaType)
}

::google::protobuf::uint8* MediaType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MediaType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MediaType.Kind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // .ImageType image_type = 101;
  if (this->has_image_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *this->image_type_, deterministic, target);
  }

  // .DocumentType document_type = 201;
  if (this->has_document_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        201, *this->document_type_, deterministic, target);
  }

  // .VideoType video_type = 301;
  if (this->has_video_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        301, *this->video_type_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MediaType)
  return target;
}

size_t MediaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MediaType)
  size_t total_size = 0;

  // .ImageType image_type = 101;
  if (this->has_image_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_type_);
  }

  // .DocumentType document_type = 201;
  if (this->has_document_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_type_);
  }

  // .VideoType video_type = 301;
  if (this->has_video_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_type_);
  }

  // .MediaType.Kind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MediaType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MediaType)
    MergeFrom(*source);
  }
}

void MediaType::MergeFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_type()) {
    mutable_image_type()->::ImageType::MergeFrom(from.image_type());
  }
  if (from.has_document_type()) {
    mutable_document_type()->::DocumentType::MergeFrom(from.document_type());
  }
  if (from.has_video_type()) {
    mutable_video_type()->::VideoType::MergeFrom(from.video_type());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void MediaType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaType::CopyFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaType::IsInitialized() const {
  return true;
}

void MediaType::Swap(MediaType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaType::InternalSwap(MediaType* other) {
  std::swap(image_type_, other->image_type_);
  std::swap(document_type_, other->document_type_);
  std::swap(video_type_, other->video_type_);
  std::swap(kind_, other->kind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaType::GetMetadata() const {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaType

// .MediaType.Kind kind = 1;
void MediaType::clear_kind() {
  kind_ = 0;
}
::MediaType_Kind MediaType::kind() const {
  // @@protoc_insertion_point(field_get:MediaType.kind)
  return static_cast< ::MediaType_Kind >(kind_);
}
void MediaType::set_kind(::MediaType_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:MediaType.kind)
}

// .ImageType image_type = 101;
bool MediaType::has_image_type() const {
  return this != internal_default_instance() && image_type_ != NULL;
}
void MediaType::clear_image_type() {
  if (GetArenaNoVirtual() == NULL && image_type_ != NULL) delete image_type_;
  image_type_ = NULL;
}
const ::ImageType& MediaType::image_type() const {
  // @@protoc_insertion_point(field_get:MediaType.image_type)
  return image_type_ != NULL ? *image_type_
                         : *::ImageType::internal_default_instance();
}
::ImageType* MediaType::mutable_image_type() {
  
  if (image_type_ == NULL) {
    image_type_ = new ::ImageType;
  }
  // @@protoc_insertion_point(field_mutable:MediaType.image_type)
  return image_type_;
}
::ImageType* MediaType::release_image_type() {
  // @@protoc_insertion_point(field_release:MediaType.image_type)
  
  ::ImageType* temp = image_type_;
  image_type_ = NULL;
  return temp;
}
void MediaType::set_allocated_image_type(::ImageType* image_type) {
  delete image_type_;
  image_type_ = image_type;
  if (image_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaType.image_type)
}

// .DocumentType document_type = 201;
bool MediaType::has_document_type() const {
  return this != internal_default_instance() && document_type_ != NULL;
}
void MediaType::clear_document_type() {
  if (GetArenaNoVirtual() == NULL && document_type_ != NULL) delete document_type_;
  document_type_ = NULL;
}
const ::DocumentType& MediaType::document_type() const {
  // @@protoc_insertion_point(field_get:MediaType.document_type)
  return document_type_ != NULL ? *document_type_
                         : *::DocumentType::internal_default_instance();
}
::DocumentType* MediaType::mutable_document_type() {
  
  if (document_type_ == NULL) {
    document_type_ = new ::DocumentType;
  }
  // @@protoc_insertion_point(field_mutable:MediaType.document_type)
  return document_type_;
}
::DocumentType* MediaType::release_document_type() {
  // @@protoc_insertion_point(field_release:MediaType.document_type)
  
  ::DocumentType* temp = document_type_;
  document_type_ = NULL;
  return temp;
}
void MediaType::set_allocated_document_type(::DocumentType* document_type) {
  delete document_type_;
  document_type_ = document_type;
  if (document_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaType.document_type)
}

// .VideoType video_type = 301;
bool MediaType::has_video_type() const {
  return this != internal_default_instance() && video_type_ != NULL;
}
void MediaType::clear_video_type() {
  if (GetArenaNoVirtual() == NULL && video_type_ != NULL) delete video_type_;
  video_type_ = NULL;
}
const ::VideoType& MediaType::video_type() const {
  // @@protoc_insertion_point(field_get:MediaType.video_type)
  return video_type_ != NULL ? *video_type_
                         : *::VideoType::internal_default_instance();
}
::VideoType* MediaType::mutable_video_type() {
  
  if (video_type_ == NULL) {
    video_type_ = new ::VideoType;
  }
  // @@protoc_insertion_point(field_mutable:MediaType.video_type)
  return video_type_;
}
::VideoType* MediaType::release_video_type() {
  // @@protoc_insertion_point(field_release:MediaType.video_type)
  
  ::VideoType* temp = video_type_;
  video_type_ = NULL;
  return temp;
}
void MediaType::set_allocated_video_type(::VideoType* video_type) {
  delete video_type_;
  video_type_ = video_type;
  if (video_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaType.video_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageType::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageType::ImageType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_media_2fMediaType_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImageType)
}
ImageType::ImageType(const ImageType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:ImageType)
}

void ImageType::SharedCtor() {
  kind_ = 0;
  _cached_size_ = 0;
}

ImageType::~ImageType() {
  // @@protoc_insertion_point(destructor:ImageType)
  SharedDtor();
}

void ImageType::SharedDtor() {
}

void ImageType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageType::descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageType& ImageType::default_instance() {
  protobuf_media_2fMediaType_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageType* ImageType::New(::google::protobuf::Arena* arena) const {
  ImageType* n = new ImageType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageType::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageType)
  kind_ = 0;
}

bool ImageType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImageType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ImageType.ImageKind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::ImageType_ImageKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImageType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImageType)
  return false;
#undef DO_
}

void ImageType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImageType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ImageType.ImageKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // @@protoc_insertion_point(serialize_end:ImageType)
}

::google::protobuf::uint8* ImageType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImageType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ImageType.ImageKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ImageType)
  return target;
}

size_t ImageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageType)
  size_t total_size = 0;

  // .ImageType.ImageKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImageType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImageType)
    MergeFrom(*source);
  }
}

void ImageType::MergeFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void ImageType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageType::CopyFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageType::IsInitialized() const {
  return true;
}

void ImageType::Swap(ImageType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageType::InternalSwap(ImageType* other) {
  std::swap(kind_, other->kind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageType::GetMetadata() const {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageType

// .ImageType.ImageKind kind = 1;
void ImageType::clear_kind() {
  kind_ = 0;
}
::ImageType_ImageKind ImageType::kind() const {
  // @@protoc_insertion_point(field_get:ImageType.kind)
  return static_cast< ::ImageType_ImageKind >(kind_);
}
void ImageType::set_kind(::ImageType_ImageKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:ImageType.kind)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentType::kKindFieldNumber;
const int DocumentType::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentType::DocumentType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_media_2fMediaType_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DocumentType)
}
DocumentType::DocumentType(const DocumentType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&kind_) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:DocumentType)
}

void DocumentType::SharedCtor() {
  ::memset(&kind_, 0, reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&kind_) + sizeof(compressed_));
  _cached_size_ = 0;
}

DocumentType::~DocumentType() {
  // @@protoc_insertion_point(destructor:DocumentType)
  SharedDtor();
}

void DocumentType::SharedDtor() {
}

void DocumentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentType::descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentType& DocumentType::default_instance() {
  protobuf_media_2fMediaType_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentType* DocumentType::New(::google::protobuf::Arena* arena) const {
  DocumentType* n = new DocumentType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentType::Clear() {
// @@protoc_insertion_point(message_clear_start:DocumentType)
  ::memset(&kind_, 0, reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&kind_) + sizeof(compressed_));
}

bool DocumentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DocumentType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DocumentType.DocumentKind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::DocumentType_DocumentKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool compressed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DocumentType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DocumentType)
  return false;
#undef DO_
}

void DocumentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DocumentType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DocumentType.DocumentKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // bool compressed = 2;
  if (this->compressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->compressed(), output);
  }

  // @@protoc_insertion_point(serialize_end:DocumentType)
}

::google::protobuf::uint8* DocumentType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DocumentType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DocumentType.DocumentKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // bool compressed = 2;
  if (this->compressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->compressed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DocumentType)
  return target;
}

size_t DocumentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DocumentType)
  size_t total_size = 0;

  // .DocumentType.DocumentKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // bool compressed = 2;
  if (this->compressed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DocumentType)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DocumentType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DocumentType)
    MergeFrom(*source);
  }
}

void DocumentType::MergeFrom(const DocumentType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DocumentType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.compressed() != 0) {
    set_compressed(from.compressed());
  }
}

void DocumentType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DocumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentType::CopyFrom(const DocumentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DocumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentType::IsInitialized() const {
  return true;
}

void DocumentType::Swap(DocumentType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentType::InternalSwap(DocumentType* other) {
  std::swap(kind_, other->kind_);
  std::swap(compressed_, other->compressed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentType::GetMetadata() const {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentType

// .DocumentType.DocumentKind kind = 1;
void DocumentType::clear_kind() {
  kind_ = 0;
}
::DocumentType_DocumentKind DocumentType::kind() const {
  // @@protoc_insertion_point(field_get:DocumentType.kind)
  return static_cast< ::DocumentType_DocumentKind >(kind_);
}
void DocumentType::set_kind(::DocumentType_DocumentKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:DocumentType.kind)
}

// bool compressed = 2;
void DocumentType::clear_compressed() {
  compressed_ = false;
}
bool DocumentType::compressed() const {
  // @@protoc_insertion_point(field_get:DocumentType.compressed)
  return compressed_;
}
void DocumentType::set_compressed(bool value) {
  
  compressed_ = value;
  // @@protoc_insertion_point(field_set:DocumentType.compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoType::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoType::VideoType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_media_2fMediaType_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VideoType)
}
VideoType::VideoType(const VideoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:VideoType)
}

void VideoType::SharedCtor() {
  kind_ = 0;
  _cached_size_ = 0;
}

VideoType::~VideoType() {
  // @@protoc_insertion_point(destructor:VideoType)
  SharedDtor();
}

void VideoType::SharedDtor() {
}

void VideoType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoType::descriptor() {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoType& VideoType::default_instance() {
  protobuf_media_2fMediaType_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoType* VideoType::New(::google::protobuf::Arena* arena) const {
  VideoType* n = new VideoType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoType::Clear() {
// @@protoc_insertion_point(message_clear_start:VideoType)
  kind_ = 0;
}

bool VideoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VideoType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VideoType.VideoKind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::VideoType_VideoKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VideoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VideoType)
  return false;
#undef DO_
}

void VideoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VideoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VideoType.VideoKind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // @@protoc_insertion_point(serialize_end:VideoType)
}

::google::protobuf::uint8* VideoType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:VideoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VideoType.VideoKind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VideoType)
  return target;
}

size_t VideoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VideoType)
  size_t total_size = 0;

  // .VideoType.VideoKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VideoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VideoType)
    MergeFrom(*source);
  }
}

void VideoType::MergeFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void VideoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoType::CopyFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoType::IsInitialized() const {
  return true;
}

void VideoType::Swap(VideoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoType::InternalSwap(VideoType* other) {
  std::swap(kind_, other->kind_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoType::GetMetadata() const {
  protobuf_media_2fMediaType_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaType_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoType

// .VideoType.VideoKind kind = 1;
void VideoType::clear_kind() {
  kind_ = 0;
}
::VideoType_VideoKind VideoType::kind() const {
  // @@protoc_insertion_point(field_get:VideoType.kind)
  return static_cast< ::VideoType_VideoKind >(kind_);
}
void VideoType::set_kind(::VideoType_VideoKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:VideoType.kind)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
