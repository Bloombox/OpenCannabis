// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media/MediaItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MediaItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MediaItem>
     _instance;
} _MediaItem_default_instance_;

namespace protobuf_media_2fMediaItem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaItem, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaItem, name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(MediaItem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MediaItem_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "media/MediaItem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_media_2fMediaKey_2eproto::InitDefaults();
  ::protobuf_media_2fMediaType_2eproto::InitDefaults();
  _MediaItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MediaItem_default_instance_);_MediaItem_default_instance_._instance.get_mutable()->key_ = const_cast< ::MediaKey*>(
      ::MediaKey::internal_default_instance());
  _MediaItem_default_instance_._instance.get_mutable()->type_ = const_cast< ::MediaType*>(
      ::MediaType::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025media/MediaItem.proto\032\024media/MediaKey."
      "proto\032\025media/MediaType.proto\"K\n\tMediaIte"
      "m\022\026\n\003key\030\001 \001(\0132\t.MediaKey\022\030\n\004type\030\002 \001(\0132"
      "\n.MediaType\022\014\n\004name\030\003 \001(\tB0\n\030io.bloombox"
      ".schema.mediaB\rAttachedMediaH\001P\001\370\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media/MediaItem.proto", &protobuf_RegisterTypes);
  ::protobuf_media_2fMediaKey_2eproto::AddDescriptors();
  ::protobuf_media_2fMediaType_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_media_2fMediaItem_2eproto


// ===================================================================

void MediaItem::_slow_mutable_key() {
  key_ = ::google::protobuf::Arena::CreateMessage< ::MediaKey >(
      GetArenaNoVirtual());
}
::MediaKey* MediaItem::_slow_release_key() {
  if (key_ == NULL) {
    return NULL;
  } else {
    ::MediaKey* temp = new ::MediaKey(*key_);
    key_ = NULL;
    return temp;
  }
}
::MediaKey* MediaItem::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MediaItem.key)
  
  ::MediaKey* temp = key_;
  key_ = NULL;
  return temp;
}
void MediaItem::_slow_set_allocated_key(
    ::google::protobuf::Arena* message_arena, ::MediaKey** key) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*key) == NULL) {
      message_arena->Own(*key);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*key)) {
      ::MediaKey* new_key = 
            ::google::protobuf::Arena::CreateMessage< ::MediaKey >(
            message_arena);
      new_key->CopyFrom(**key);
      *key = new_key;
    }
}
void MediaItem::unsafe_arena_set_allocated_key(
    ::MediaKey* key) {
  if (GetArenaNoVirtual() == NULL) {
    delete key_;
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaItem.key)
}
void MediaItem::_slow_mutable_type() {
  type_ = ::google::protobuf::Arena::CreateMessage< ::MediaType >(
      GetArenaNoVirtual());
}
::MediaType* MediaItem::_slow_release_type() {
  if (type_ == NULL) {
    return NULL;
  } else {
    ::MediaType* temp = new ::MediaType(*type_);
    type_ = NULL;
    return temp;
  }
}
::MediaType* MediaItem::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MediaItem.type)
  
  ::MediaType* temp = type_;
  type_ = NULL;
  return temp;
}
void MediaItem::_slow_set_allocated_type(
    ::google::protobuf::Arena* message_arena, ::MediaType** type) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*type) == NULL) {
      message_arena->Own(*type);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*type)) {
      ::MediaType* new_type = 
            ::google::protobuf::Arena::CreateMessage< ::MediaType >(
            message_arena);
      new_type->CopyFrom(**type);
      *type = new_type;
    }
}
void MediaItem::unsafe_arena_set_allocated_type(
    ::MediaType* type) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_;
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaItem.type)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaItem::kKeyFieldNumber;
const int MediaItem::kTypeFieldNumber;
const int MediaItem::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaItem::MediaItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_media_2fMediaItem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MediaItem)
}
MediaItem::MediaItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_media_2fMediaItem_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MediaItem)
}
MediaItem::MediaItem(const MediaItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_key()) {
    key_ = new ::MediaKey(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_type()) {
    type_ = new ::MediaType(*from.type_);
  } else {
    type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MediaItem)
}

void MediaItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(type_));
  _cached_size_ = 0;
}

MediaItem::~MediaItem() {
  // @@protoc_insertion_point(destructor:MediaItem)
  SharedDtor();
}

void MediaItem::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete type_;
}

void MediaItem::ArenaDtor(void* object) {
  MediaItem* _this = reinterpret_cast< MediaItem* >(object);
  (void)_this;
}
void MediaItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MediaItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaItem::descriptor() {
  protobuf_media_2fMediaItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaItem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MediaItem& MediaItem::default_instance() {
  protobuf_media_2fMediaItem_2eproto::InitDefaults();
  return *internal_default_instance();
}

MediaItem* MediaItem::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MediaItem>(arena);
}

void MediaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:MediaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
  _internal_metadata_.Clear();
}

bool MediaItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MediaItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MediaKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MediaType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MediaItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MediaItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MediaItem)
  return false;
#undef DO_
}

void MediaItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MediaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MediaKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // .MediaType type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->type_, output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MediaItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:MediaItem)
}

::google::protobuf::uint8* MediaItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MediaItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MediaKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // .MediaType type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->type_, deterministic, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MediaItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MediaItem)
  return target;
}

size_t MediaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MediaItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .MediaKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .MediaType type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MediaItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MediaItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MediaItem)
    MergeFrom(*source);
  }
}

void MediaItem::MergeFrom(const MediaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MediaItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_key()) {
    mutable_key()->::MediaKey::MergeFrom(from.key());
  }
  if (from.has_type()) {
    mutable_type()->::MediaType::MergeFrom(from.type());
  }
}

void MediaItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MediaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaItem::CopyFrom(const MediaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MediaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaItem::IsInitialized() const {
  return true;
}

void MediaItem::Swap(MediaItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MediaItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MediaItem::UnsafeArenaSwap(MediaItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MediaItem::InternalSwap(MediaItem* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(key_, other->key_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaItem::GetMetadata() const {
  protobuf_media_2fMediaItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_media_2fMediaItem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaItem

// .MediaKey key = 1;
bool MediaItem::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void MediaItem::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::MediaKey& MediaItem::key() const {
  const ::MediaKey* p = key_;
  // @@protoc_insertion_point(field_get:MediaItem.key)
  return p != NULL ? *p : *reinterpret_cast<const ::MediaKey*>(
      &::_MediaKey_default_instance_);
}
::MediaKey* MediaItem::mutable_key() {
  
  if (key_ == NULL) {
    _slow_mutable_key();
  }
  // @@protoc_insertion_point(field_mutable:MediaItem.key)
  return key_;
}
::MediaKey* MediaItem::release_key() {
  // @@protoc_insertion_point(field_release:MediaItem.key)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_key();
  } else {
    ::MediaKey* temp = key_;
    key_ = NULL;
    return temp;
  }
}
 void MediaItem::set_allocated_key(::MediaKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key != NULL) {
    _slow_set_allocated_key(message_arena, &key);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaItem.key)
}

// .MediaType type = 2;
bool MediaItem::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
void MediaItem::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::MediaType& MediaItem::type() const {
  const ::MediaType* p = type_;
  // @@protoc_insertion_point(field_get:MediaItem.type)
  return p != NULL ? *p : *reinterpret_cast<const ::MediaType*>(
      &::_MediaType_default_instance_);
}
::MediaType* MediaItem::mutable_type() {
  
  if (type_ == NULL) {
    _slow_mutable_type();
  }
  // @@protoc_insertion_point(field_mutable:MediaItem.type)
  return type_;
}
::MediaType* MediaItem::release_type() {
  // @@protoc_insertion_point(field_release:MediaItem.type)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_type();
  } else {
    ::MediaType* temp = type_;
    type_ = NULL;
    return temp;
  }
}
 void MediaItem::set_allocated_type(::MediaType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type != NULL) {
    _slow_set_allocated_type(message_arena, &type);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaItem.type)
}

// string name = 3;
void MediaItem::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MediaItem::name() const {
  // @@protoc_insertion_point(field_get:MediaItem.name)
  return name_.Get();
}
void MediaItem::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MediaItem.name)
}
#if LANG_CXX11
void MediaItem::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:MediaItem.name)
}
#endif
void MediaItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MediaItem.name)
}
void MediaItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MediaItem.name)
}
::std::string* MediaItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MediaItem.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MediaItem::release_name() {
  // @@protoc_insertion_point(field_release:MediaItem.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MediaItem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MediaItem.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MediaItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MediaItem.name)
}
void MediaItem::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaItem.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
