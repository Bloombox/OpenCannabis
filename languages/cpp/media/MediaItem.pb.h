// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaItem.proto

#ifndef PROTOBUF_media_2fMediaItem_2eproto__INCLUDED
#define PROTOBUF_media_2fMediaItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "media/MediaKey.pb.h"
#include "media/MediaType.pb.h"
// @@protoc_insertion_point(includes)
class MediaItem;
class MediaItemDefaultTypeInternal;
extern MediaItemDefaultTypeInternal _MediaItem_default_instance_;

namespace protobuf_media_2fMediaItem_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_media_2fMediaItem_2eproto

// ===================================================================

class MediaItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MediaItem) */ {
 public:
  MediaItem();
  virtual ~MediaItem();

  MediaItem(const MediaItem& from);

  inline MediaItem& operator=(const MediaItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MediaItem(MediaItem&& from) noexcept
    : MediaItem() {
    *this = ::std::move(from);
  }

  inline MediaItem& operator=(MediaItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaItem& default_instance();

  static inline const MediaItem* internal_default_instance() {
    return reinterpret_cast<const MediaItem*>(
               &_MediaItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MediaItem* other);
  void Swap(MediaItem* other);
  friend void swap(MediaItem& a, MediaItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MediaItem* New() const PROTOBUF_FINAL { return New(NULL); }

  MediaItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MediaItem& from);
  void MergeFrom(const MediaItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MediaItem* other);
  protected:
  explicit MediaItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // .MediaKey key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  private:
  void _slow_mutable_key();
  void _slow_set_allocated_key(
      ::google::protobuf::Arena* message_arena, ::MediaKey** key);
  ::MediaKey* _slow_release_key();
  public:
  const ::MediaKey& key() const;
  ::MediaKey* mutable_key();
  ::MediaKey* release_key();
  void set_allocated_key(::MediaKey* key);
  ::MediaKey* unsafe_arena_release_key();
  void unsafe_arena_set_allocated_key(
      ::MediaKey* key);

  // .MediaType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  void _slow_mutable_type();
  void _slow_set_allocated_type(
      ::google::protobuf::Arena* message_arena, ::MediaType** type);
  ::MediaType* _slow_release_type();
  public:
  const ::MediaType& type() const;
  ::MediaType* mutable_type();
  ::MediaType* release_type();
  void set_allocated_type(::MediaType* type);
  ::MediaType* unsafe_arena_release_type();
  void unsafe_arena_set_allocated_type(
      ::MediaType* type);

  // @@protoc_insertion_point(class_scope:MediaItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::MediaKey* key_;
  ::MediaType* type_;
  mutable int _cached_size_;
  friend struct protobuf_media_2fMediaItem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaItem

// .MediaKey key = 1;
inline bool MediaItem::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void MediaItem::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::MediaKey& MediaItem::key() const {
  const ::MediaKey* p = key_;
  // @@protoc_insertion_point(field_get:MediaItem.key)
  return p != NULL ? *p : *reinterpret_cast<const ::MediaKey*>(
      &::_MediaKey_default_instance_);
}
inline ::MediaKey* MediaItem::mutable_key() {
  
  if (key_ == NULL) {
    _slow_mutable_key();
  }
  // @@protoc_insertion_point(field_mutable:MediaItem.key)
  return key_;
}
inline ::MediaKey* MediaItem::release_key() {
  // @@protoc_insertion_point(field_release:MediaItem.key)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_key();
  } else {
    ::MediaKey* temp = key_;
    key_ = NULL;
    return temp;
  }
}
inline  void MediaItem::set_allocated_key(::MediaKey* key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_;
  }
  if (key != NULL) {
    _slow_set_allocated_key(message_arena, &key);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaItem.key)
}

// .MediaType type = 2;
inline bool MediaItem::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void MediaItem::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
inline const ::MediaType& MediaItem::type() const {
  const ::MediaType* p = type_;
  // @@protoc_insertion_point(field_get:MediaItem.type)
  return p != NULL ? *p : *reinterpret_cast<const ::MediaType*>(
      &::_MediaType_default_instance_);
}
inline ::MediaType* MediaItem::mutable_type() {
  
  if (type_ == NULL) {
    _slow_mutable_type();
  }
  // @@protoc_insertion_point(field_mutable:MediaItem.type)
  return type_;
}
inline ::MediaType* MediaItem::release_type() {
  // @@protoc_insertion_point(field_release:MediaItem.type)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_type();
  } else {
    ::MediaType* temp = type_;
    type_ = NULL;
    return temp;
  }
}
inline  void MediaItem::set_allocated_type(::MediaType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type != NULL) {
    _slow_set_allocated_type(message_arena, &type);
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MediaItem.type)
}

// string name = 3;
inline void MediaItem::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MediaItem::name() const {
  // @@protoc_insertion_point(field_get:MediaItem.name)
  return name_.Get();
}
inline void MediaItem::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:MediaItem.name)
}
#if LANG_CXX11
inline void MediaItem::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:MediaItem.name)
}
#endif
inline void MediaItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:MediaItem.name)
}
inline void MediaItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:MediaItem.name)
}
inline ::std::string* MediaItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MediaItem.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MediaItem::release_name() {
  // @@protoc_insertion_point(field_release:MediaItem.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MediaItem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MediaItem.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:MediaItem.name)
}
inline void MediaItem::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MediaItem.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_media_2fMediaItem_2eproto__INCLUDED
