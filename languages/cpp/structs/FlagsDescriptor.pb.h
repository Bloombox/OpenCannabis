// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/FlagsDescriptor.proto

#ifndef PROTOBUF_structs_2fFlagsDescriptor_2eproto__INCLUDED
#define PROTOBUF_structs_2fFlagsDescriptor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class FlagsDescriptor;
class FlagsDescriptorDefaultTypeInternal;
extern FlagsDescriptorDefaultTypeInternal _FlagsDescriptor_default_instance_;
class ProductFlagValue;
class ProductFlagValueDefaultTypeInternal;
extern ProductFlagValueDefaultTypeInternal _ProductFlagValue_default_instance_;
class ProductFlagset;
class ProductFlagsetDefaultTypeInternal;
extern ProductFlagsetDefaultTypeInternal _ProductFlagset_default_instance_;

namespace protobuf_structs_2fFlagsDescriptor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_structs_2fFlagsDescriptor_2eproto

enum ProductFlag {
  VISIBLE = 0,
  PREMIUM = 1,
  FEATURED = 2,
  LASTCHANCE = 3,
  INHOUSE = 4,
  ProductFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProductFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProductFlag_IsValid(int value);
const ProductFlag ProductFlag_MIN = VISIBLE;
const ProductFlag ProductFlag_MAX = INHOUSE;
const int ProductFlag_ARRAYSIZE = ProductFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProductFlag_descriptor();
inline const ::std::string& ProductFlag_Name(ProductFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductFlag_descriptor(), value);
}
inline bool ProductFlag_Parse(
    const ::std::string& name, ProductFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductFlag>(
    ProductFlag_descriptor(), name, value);
}
// ===================================================================

class ProductFlagValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProductFlagValue) */ {
 public:
  ProductFlagValue();
  virtual ~ProductFlagValue();

  ProductFlagValue(const ProductFlagValue& from);

  inline ProductFlagValue& operator=(const ProductFlagValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductFlagValue(ProductFlagValue&& from) noexcept
    : ProductFlagValue() {
    *this = ::std::move(from);
  }

  inline ProductFlagValue& operator=(ProductFlagValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductFlagValue& default_instance();

  static inline const ProductFlagValue* internal_default_instance() {
    return reinterpret_cast<const ProductFlagValue*>(
               &_ProductFlagValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ProductFlagValue* other);
  void Swap(ProductFlagValue* other);
  friend void swap(ProductFlagValue& a, ProductFlagValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductFlagValue* New() const PROTOBUF_FINAL { return New(NULL); }

  ProductFlagValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProductFlagValue& from);
  void MergeFrom(const ProductFlagValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProductFlagValue* other);
  protected:
  explicit ProductFlagValue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ProductFlag type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ProductFlag type() const;
  void set_type(::ProductFlag value);

  // bool value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:ProductFlagValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  bool value_;
  mutable int _cached_size_;
  friend struct protobuf_structs_2fFlagsDescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProductFlagset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProductFlagset) */ {
 public:
  ProductFlagset();
  virtual ~ProductFlagset();

  ProductFlagset(const ProductFlagset& from);

  inline ProductFlagset& operator=(const ProductFlagset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductFlagset(ProductFlagset&& from) noexcept
    : ProductFlagset() {
    *this = ::std::move(from);
  }

  inline ProductFlagset& operator=(ProductFlagset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductFlagset& default_instance();

  static inline const ProductFlagset* internal_default_instance() {
    return reinterpret_cast<const ProductFlagset*>(
               &_ProductFlagset_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ProductFlagset* other);
  void Swap(ProductFlagset* other);
  friend void swap(ProductFlagset& a, ProductFlagset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductFlagset* New() const PROTOBUF_FINAL { return New(NULL); }

  ProductFlagset* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProductFlagset& from);
  void MergeFrom(const ProductFlagset& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProductFlagset* other);
  protected:
  explicit ProductFlagset(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProductFlagValue flags = 1;
  int flags_size() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  const ::ProductFlagValue& flags(int index) const;
  ::ProductFlagValue* mutable_flags(int index);
  ::ProductFlagValue* add_flags();
  ::google::protobuf::RepeatedPtrField< ::ProductFlagValue >*
      mutable_flags();
  const ::google::protobuf::RepeatedPtrField< ::ProductFlagValue >&
      flags() const;

  // @@protoc_insertion_point(class_scope:ProductFlagset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::ProductFlagValue > flags_;
  mutable int _cached_size_;
  friend struct protobuf_structs_2fFlagsDescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlagsDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FlagsDescriptor) */ {
 public:
  FlagsDescriptor();
  virtual ~FlagsDescriptor();

  FlagsDescriptor(const FlagsDescriptor& from);

  inline FlagsDescriptor& operator=(const FlagsDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlagsDescriptor(FlagsDescriptor&& from) noexcept
    : FlagsDescriptor() {
    *this = ::std::move(from);
  }

  inline FlagsDescriptor& operator=(FlagsDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagsDescriptor& default_instance();

  static inline const FlagsDescriptor* internal_default_instance() {
    return reinterpret_cast<const FlagsDescriptor*>(
               &_FlagsDescriptor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(FlagsDescriptor* other);
  void Swap(FlagsDescriptor* other);
  friend void swap(FlagsDescriptor& a, FlagsDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlagsDescriptor* New() const PROTOBUF_FINAL { return New(NULL); }

  FlagsDescriptor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlagsDescriptor& from);
  void MergeFrom(const FlagsDescriptor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlagsDescriptor* other);
  protected:
  explicit FlagsDescriptor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // bool premium = 2;
  void clear_premium();
  static const int kPremiumFieldNumber = 2;
  bool premium() const;
  void set_premium(bool value);

  // bool featured = 3;
  void clear_featured();
  static const int kFeaturedFieldNumber = 3;
  bool featured() const;
  void set_featured(bool value);

  // bool lastchance = 4;
  void clear_lastchance();
  static const int kLastchanceFieldNumber = 4;
  bool lastchance() const;
  void set_lastchance(bool value);

  // bool inhouse = 5;
  void clear_inhouse();
  static const int kInhouseFieldNumber = 5;
  bool inhouse() const;
  void set_inhouse(bool value);

  // @@protoc_insertion_point(class_scope:FlagsDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool visible_;
  bool premium_;
  bool featured_;
  bool lastchance_;
  bool inhouse_;
  mutable int _cached_size_;
  friend struct protobuf_structs_2fFlagsDescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductFlagValue

// .ProductFlag type = 1;
inline void ProductFlagValue::clear_type() {
  type_ = 0;
}
inline ::ProductFlag ProductFlagValue::type() const {
  // @@protoc_insertion_point(field_get:ProductFlagValue.type)
  return static_cast< ::ProductFlag >(type_);
}
inline void ProductFlagValue::set_type(::ProductFlag value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ProductFlagValue.type)
}

// bool value = 2;
inline void ProductFlagValue::clear_value() {
  value_ = false;
}
inline bool ProductFlagValue::value() const {
  // @@protoc_insertion_point(field_get:ProductFlagValue.value)
  return value_;
}
inline void ProductFlagValue::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ProductFlagValue.value)
}

// -------------------------------------------------------------------

// ProductFlagset

// repeated .ProductFlagValue flags = 1;
inline int ProductFlagset::flags_size() const {
  return flags_.size();
}
inline void ProductFlagset::clear_flags() {
  flags_.Clear();
}
inline const ::ProductFlagValue& ProductFlagset::flags(int index) const {
  // @@protoc_insertion_point(field_get:ProductFlagset.flags)
  return flags_.Get(index);
}
inline ::ProductFlagValue* ProductFlagset::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:ProductFlagset.flags)
  return flags_.Mutable(index);
}
inline ::ProductFlagValue* ProductFlagset::add_flags() {
  // @@protoc_insertion_point(field_add:ProductFlagset.flags)
  return flags_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ProductFlagValue >*
ProductFlagset::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:ProductFlagset.flags)
  return &flags_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ProductFlagValue >&
ProductFlagset::flags() const {
  // @@protoc_insertion_point(field_list:ProductFlagset.flags)
  return flags_;
}

// -------------------------------------------------------------------

// FlagsDescriptor

// bool visible = 1;
inline void FlagsDescriptor::clear_visible() {
  visible_ = false;
}
inline bool FlagsDescriptor::visible() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.visible)
  return visible_;
}
inline void FlagsDescriptor::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.visible)
}

// bool premium = 2;
inline void FlagsDescriptor::clear_premium() {
  premium_ = false;
}
inline bool FlagsDescriptor::premium() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.premium)
  return premium_;
}
inline void FlagsDescriptor::set_premium(bool value) {
  
  premium_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.premium)
}

// bool featured = 3;
inline void FlagsDescriptor::clear_featured() {
  featured_ = false;
}
inline bool FlagsDescriptor::featured() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.featured)
  return featured_;
}
inline void FlagsDescriptor::set_featured(bool value) {
  
  featured_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.featured)
}

// bool lastchance = 4;
inline void FlagsDescriptor::clear_lastchance() {
  lastchance_ = false;
}
inline bool FlagsDescriptor::lastchance() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.lastchance)
  return lastchance_;
}
inline void FlagsDescriptor::set_lastchance(bool value) {
  
  lastchance_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.lastchance)
}

// bool inhouse = 5;
inline void FlagsDescriptor::clear_inhouse() {
  inhouse_ = false;
}
inline bool FlagsDescriptor::inhouse() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.inhouse)
  return inhouse_;
}
inline void FlagsDescriptor::set_inhouse(bool value) {
  
  inhouse_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.inhouse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProductFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProductFlag>() {
  return ::ProductFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structs_2fFlagsDescriptor_2eproto__INCLUDED
