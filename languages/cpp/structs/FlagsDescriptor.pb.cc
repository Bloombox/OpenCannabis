// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/FlagsDescriptor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "structs/FlagsDescriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ProductFlagValueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProductFlagValue>
     _instance;
} _ProductFlagValue_default_instance_;
class ProductFlagsetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProductFlagset>
     _instance;
} _ProductFlagset_default_instance_;
class FlagsDescriptorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FlagsDescriptor>
     _instance;
} _FlagsDescriptor_default_instance_;

namespace protobuf_structs_2fFlagsDescriptor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFlagValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFlagValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFlagValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFlagset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductFlagset, flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, premium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, featured_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, lastchance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagsDescriptor, inhouse_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ProductFlagValue)},
  { 7, -1, sizeof(ProductFlagset)},
  { 13, -1, sizeof(FlagsDescriptor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProductFlagValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProductFlagset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlagsDescriptor_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "structs/FlagsDescriptor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProductFlagValue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProductFlagValue_default_instance_);_ProductFlagset_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProductFlagset_default_instance_);_FlagsDescriptor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FlagsDescriptor_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035structs/FlagsDescriptor.proto\"=\n\020Produ"
      "ctFlagValue\022\032\n\004type\030\001 \001(\0162\014.ProductFlag\022"
      "\r\n\005value\030\002 \001(\010\"2\n\016ProductFlagset\022 \n\005flag"
      "s\030\001 \003(\0132\021.ProductFlagValue\"j\n\017FlagsDescr"
      "iptor\022\017\n\007visible\030\001 \001(\010\022\017\n\007premium\030\002 \001(\010\022"
      "\020\n\010featured\030\003 \001(\010\022\022\n\nlastchance\030\004 \001(\010\022\017\n"
      "\007inhouse\030\005 \001(\010*R\n\013ProductFlag\022\013\n\007VISIBLE"
      "\020\000\022\013\n\007PREMIUM\020\001\022\014\n\010FEATURED\020\002\022\016\n\nLASTCHA"
      "NCE\020\003\022\013\n\007INHOUSE\020\004B7\n!io.bloombox.schema"
      ".product.structB\013BaseStructsH\001P\001\370\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "structs/FlagsDescriptor.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_structs_2fFlagsDescriptor_2eproto

const ::google::protobuf::EnumDescriptor* ProductFlag_descriptor() {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_enum_descriptors[0];
}
bool ProductFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductFlagValue::kTypeFieldNumber;
const int ProductFlagValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductFlagValue::ProductFlagValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProductFlagValue)
}
ProductFlagValue::ProductFlagValue(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductFlagValue)
}
ProductFlagValue::ProductFlagValue(const ProductFlagValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:ProductFlagValue)
}

void ProductFlagValue::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _cached_size_ = 0;
}

ProductFlagValue::~ProductFlagValue() {
  // @@protoc_insertion_point(destructor:ProductFlagValue)
  SharedDtor();
}

void ProductFlagValue::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void ProductFlagValue::ArenaDtor(void* object) {
  ProductFlagValue* _this = reinterpret_cast< ProductFlagValue* >(object);
  (void)_this;
}
void ProductFlagValue::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ProductFlagValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductFlagValue::descriptor() {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductFlagValue& ProductFlagValue::default_instance() {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProductFlagValue* ProductFlagValue::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ProductFlagValue>(arena);
}

void ProductFlagValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductFlagValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool ProductFlagValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProductFlagValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ProductFlag type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ProductFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProductFlagValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProductFlagValue)
  return false;
#undef DO_
}

void ProductFlagValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProductFlagValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductFlag type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProductFlagValue)
}

::google::protobuf::uint8* ProductFlagValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProductFlagValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProductFlag type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductFlagValue)
  return target;
}

size_t ProductFlagValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductFlagValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ProductFlag type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductFlagValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductFlagValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductFlagValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductFlagValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductFlagValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductFlagValue)
    MergeFrom(*source);
  }
}

void ProductFlagValue::MergeFrom(const ProductFlagValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductFlagValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ProductFlagValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductFlagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductFlagValue::CopyFrom(const ProductFlagValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductFlagValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductFlagValue::IsInitialized() const {
  return true;
}

void ProductFlagValue::Swap(ProductFlagValue* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ProductFlagValue* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ProductFlagValue::UnsafeArenaSwap(ProductFlagValue* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ProductFlagValue::InternalSwap(ProductFlagValue* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductFlagValue::GetMetadata() const {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductFlagValue

// .ProductFlag type = 1;
void ProductFlagValue::clear_type() {
  type_ = 0;
}
::ProductFlag ProductFlagValue::type() const {
  // @@protoc_insertion_point(field_get:ProductFlagValue.type)
  return static_cast< ::ProductFlag >(type_);
}
void ProductFlagValue::set_type(::ProductFlag value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ProductFlagValue.type)
}

// bool value = 2;
void ProductFlagValue::clear_value() {
  value_ = false;
}
bool ProductFlagValue::value() const {
  // @@protoc_insertion_point(field_get:ProductFlagValue.value)
  return value_;
}
void ProductFlagValue::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ProductFlagValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductFlagset::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductFlagset::ProductFlagset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProductFlagset)
}
ProductFlagset::ProductFlagset(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  flags_(arena) {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductFlagset)
}
ProductFlagset::ProductFlagset(const ProductFlagset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      flags_(from.flags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProductFlagset)
}

void ProductFlagset::SharedCtor() {
  _cached_size_ = 0;
}

ProductFlagset::~ProductFlagset() {
  // @@protoc_insertion_point(destructor:ProductFlagset)
  SharedDtor();
}

void ProductFlagset::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void ProductFlagset::ArenaDtor(void* object) {
  ProductFlagset* _this = reinterpret_cast< ProductFlagset* >(object);
  (void)_this;
}
void ProductFlagset::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ProductFlagset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductFlagset::descriptor() {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductFlagset& ProductFlagset::default_instance() {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProductFlagset* ProductFlagset::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ProductFlagset>(arena);
}

void ProductFlagset::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductFlagset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flags_.Clear();
  _internal_metadata_.Clear();
}

bool ProductFlagset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProductFlagset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProductFlagValue flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProductFlagset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProductFlagset)
  return false;
#undef DO_
}

void ProductFlagset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProductFlagset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProductFlagValue flags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flags(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProductFlagset)
}

::google::protobuf::uint8* ProductFlagset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProductFlagset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProductFlagValue flags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->flags(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductFlagset)
  return target;
}

size_t ProductFlagset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductFlagset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ProductFlagValue flags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->flags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flags(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductFlagset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductFlagset)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductFlagset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductFlagset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductFlagset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductFlagset)
    MergeFrom(*source);
  }
}

void ProductFlagset::MergeFrom(const ProductFlagset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductFlagset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flags_.MergeFrom(from.flags_);
}

void ProductFlagset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductFlagset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductFlagset::CopyFrom(const ProductFlagset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductFlagset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductFlagset::IsInitialized() const {
  return true;
}

void ProductFlagset::Swap(ProductFlagset* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ProductFlagset* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ProductFlagset::UnsafeArenaSwap(ProductFlagset* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ProductFlagset::InternalSwap(ProductFlagset* other) {
  using std::swap;
  flags_.InternalSwap(&other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductFlagset::GetMetadata() const {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductFlagset

// repeated .ProductFlagValue flags = 1;
int ProductFlagset::flags_size() const {
  return flags_.size();
}
void ProductFlagset::clear_flags() {
  flags_.Clear();
}
const ::ProductFlagValue& ProductFlagset::flags(int index) const {
  // @@protoc_insertion_point(field_get:ProductFlagset.flags)
  return flags_.Get(index);
}
::ProductFlagValue* ProductFlagset::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:ProductFlagset.flags)
  return flags_.Mutable(index);
}
::ProductFlagValue* ProductFlagset::add_flags() {
  // @@protoc_insertion_point(field_add:ProductFlagset.flags)
  return flags_.Add();
}
::google::protobuf::RepeatedPtrField< ::ProductFlagValue >*
ProductFlagset::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:ProductFlagset.flags)
  return &flags_;
}
const ::google::protobuf::RepeatedPtrField< ::ProductFlagValue >&
ProductFlagset::flags() const {
  // @@protoc_insertion_point(field_list:ProductFlagset.flags)
  return flags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlagsDescriptor::kVisibleFieldNumber;
const int FlagsDescriptor::kPremiumFieldNumber;
const int FlagsDescriptor::kFeaturedFieldNumber;
const int FlagsDescriptor::kLastchanceFieldNumber;
const int FlagsDescriptor::kInhouseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlagsDescriptor::FlagsDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlagsDescriptor)
}
FlagsDescriptor::FlagsDescriptor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FlagsDescriptor)
}
FlagsDescriptor::FlagsDescriptor(const FlagsDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&visible_, &from.visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&inhouse_) -
    reinterpret_cast<char*>(&visible_)) + sizeof(inhouse_));
  // @@protoc_insertion_point(copy_constructor:FlagsDescriptor)
}

void FlagsDescriptor::SharedCtor() {
  ::memset(&visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inhouse_) -
      reinterpret_cast<char*>(&visible_)) + sizeof(inhouse_));
  _cached_size_ = 0;
}

FlagsDescriptor::~FlagsDescriptor() {
  // @@protoc_insertion_point(destructor:FlagsDescriptor)
  SharedDtor();
}

void FlagsDescriptor::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void FlagsDescriptor::ArenaDtor(void* object) {
  FlagsDescriptor* _this = reinterpret_cast< FlagsDescriptor* >(object);
  (void)_this;
}
void FlagsDescriptor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FlagsDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagsDescriptor::descriptor() {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlagsDescriptor& FlagsDescriptor::default_instance() {
  protobuf_structs_2fFlagsDescriptor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlagsDescriptor* FlagsDescriptor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<FlagsDescriptor>(arena);
}

void FlagsDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:FlagsDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inhouse_) -
      reinterpret_cast<char*>(&visible_)) + sizeof(inhouse_));
  _internal_metadata_.Clear();
}

bool FlagsDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlagsDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool premium = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &premium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool featured = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featured_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lastchance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastchance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inhouse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inhouse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlagsDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlagsDescriptor)
  return false;
#undef DO_
}

void FlagsDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlagsDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool visible = 1;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  // bool premium = 2;
  if (this->premium() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->premium(), output);
  }

  // bool featured = 3;
  if (this->featured() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->featured(), output);
  }

  // bool lastchance = 4;
  if (this->lastchance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->lastchance(), output);
  }

  // bool inhouse = 5;
  if (this->inhouse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->inhouse(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:FlagsDescriptor)
}

::google::protobuf::uint8* FlagsDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FlagsDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool visible = 1;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  // bool premium = 2;
  if (this->premium() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->premium(), target);
  }

  // bool featured = 3;
  if (this->featured() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->featured(), target);
  }

  // bool lastchance = 4;
  if (this->lastchance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lastchance(), target);
  }

  // bool inhouse = 5;
  if (this->inhouse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->inhouse(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlagsDescriptor)
  return target;
}

size_t FlagsDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlagsDescriptor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool visible = 1;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // bool premium = 2;
  if (this->premium() != 0) {
    total_size += 1 + 1;
  }

  // bool featured = 3;
  if (this->featured() != 0) {
    total_size += 1 + 1;
  }

  // bool lastchance = 4;
  if (this->lastchance() != 0) {
    total_size += 1 + 1;
  }

  // bool inhouse = 5;
  if (this->inhouse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagsDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlagsDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FlagsDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlagsDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlagsDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlagsDescriptor)
    MergeFrom(*source);
  }
}

void FlagsDescriptor::MergeFrom(const FlagsDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlagsDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.premium() != 0) {
    set_premium(from.premium());
  }
  if (from.featured() != 0) {
    set_featured(from.featured());
  }
  if (from.lastchance() != 0) {
    set_lastchance(from.lastchance());
  }
  if (from.inhouse() != 0) {
    set_inhouse(from.inhouse());
  }
}

void FlagsDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlagsDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagsDescriptor::CopyFrom(const FlagsDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlagsDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagsDescriptor::IsInitialized() const {
  return true;
}

void FlagsDescriptor::Swap(FlagsDescriptor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FlagsDescriptor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FlagsDescriptor::UnsafeArenaSwap(FlagsDescriptor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FlagsDescriptor::InternalSwap(FlagsDescriptor* other) {
  using std::swap;
  swap(visible_, other->visible_);
  swap(premium_, other->premium_);
  swap(featured_, other->featured_);
  swap(lastchance_, other->lastchance_);
  swap(inhouse_, other->inhouse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlagsDescriptor::GetMetadata() const {
  protobuf_structs_2fFlagsDescriptor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_structs_2fFlagsDescriptor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlagsDescriptor

// bool visible = 1;
void FlagsDescriptor::clear_visible() {
  visible_ = false;
}
bool FlagsDescriptor::visible() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.visible)
  return visible_;
}
void FlagsDescriptor::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.visible)
}

// bool premium = 2;
void FlagsDescriptor::clear_premium() {
  premium_ = false;
}
bool FlagsDescriptor::premium() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.premium)
  return premium_;
}
void FlagsDescriptor::set_premium(bool value) {
  
  premium_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.premium)
}

// bool featured = 3;
void FlagsDescriptor::clear_featured() {
  featured_ = false;
}
bool FlagsDescriptor::featured() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.featured)
  return featured_;
}
void FlagsDescriptor::set_featured(bool value) {
  
  featured_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.featured)
}

// bool lastchance = 4;
void FlagsDescriptor::clear_lastchance() {
  lastchance_ = false;
}
bool FlagsDescriptor::lastchance() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.lastchance)
  return lastchance_;
}
void FlagsDescriptor::set_lastchance(bool value) {
  
  lastchance_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.lastchance)
}

// bool inhouse = 5;
void FlagsDescriptor::clear_inhouse() {
  inhouse_ = false;
}
bool FlagsDescriptor::inhouse() const {
  // @@protoc_insertion_point(field_get:FlagsDescriptor.inhouse)
  return inhouse_;
}
void FlagsDescriptor::set_inhouse(bool value) {
  
  inhouse_ = value;
  // @@protoc_insertion_point(field_set:FlagsDescriptor.inhouse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
