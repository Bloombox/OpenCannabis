// Code generated by protoc-gen-go. DO NOT EDIT.
// source: structs/pricing/SaleDescriptor.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SaleType int32

const (
	SaleType_PERCENTAGE SaleType = 0
	SaleType_BOGO       SaleType = 1
	SaleType_LOYALTY    SaleType = 2
)

var SaleType_name = map[int32]string{
	0: "PERCENTAGE",
	1: "BOGO",
	2: "LOYALTY",
}
var SaleType_value = map[string]int32{
	"PERCENTAGE": 0,
	"BOGO":       1,
	"LOYALTY":    2,
}

func (x SaleType) String() string {
	return proto.EnumName(SaleType_name, int32(x))
}
func (SaleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

type SaleDescriptor struct {
	// sale metadata
	Type       SaleType `protobuf:"varint,1,opt,name=type,enum=SaleType" json:"type,omitempty"`
	Effective  uint64   `protobuf:"varint,2,opt,name=effective" json:"effective,omitempty"`
	Expiration uint64   `protobuf:"varint,3,opt,name=expiration" json:"expiration,omitempty"`
	// sale amount and trigger properties
	PercentageAmount uint32 `protobuf:"varint,20,opt,name=percentage_amount,json=percentageAmount" json:"percentage_amount,omitempty"`
	BogoTrigger      uint32 `protobuf:"varint,21,opt,name=bogo_trigger,json=bogoTrigger" json:"bogo_trigger,omitempty"`
	BogoReward       uint32 `protobuf:"varint,22,opt,name=bogo_reward,json=bogoReward" json:"bogo_reward,omitempty"`
	LoyaltyTrigger   uint32 `protobuf:"varint,23,opt,name=loyalty_trigger,json=loyaltyTrigger" json:"loyalty_trigger,omitempty"`
	LoyaltyReward    uint32 `protobuf:"varint,24,opt,name=loyalty_reward,json=loyaltyReward" json:"loyalty_reward,omitempty"`
}

func (m *SaleDescriptor) Reset()                    { *m = SaleDescriptor{} }
func (m *SaleDescriptor) String() string            { return proto.CompactTextString(m) }
func (*SaleDescriptor) ProtoMessage()               {}
func (*SaleDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

func (m *SaleDescriptor) GetType() SaleType {
	if m != nil {
		return m.Type
	}
	return SaleType_PERCENTAGE
}

func (m *SaleDescriptor) GetEffective() uint64 {
	if m != nil {
		return m.Effective
	}
	return 0
}

func (m *SaleDescriptor) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *SaleDescriptor) GetPercentageAmount() uint32 {
	if m != nil {
		return m.PercentageAmount
	}
	return 0
}

func (m *SaleDescriptor) GetBogoTrigger() uint32 {
	if m != nil {
		return m.BogoTrigger
	}
	return 0
}

func (m *SaleDescriptor) GetBogoReward() uint32 {
	if m != nil {
		return m.BogoReward
	}
	return 0
}

func (m *SaleDescriptor) GetLoyaltyTrigger() uint32 {
	if m != nil {
		return m.LoyaltyTrigger
	}
	return 0
}

func (m *SaleDescriptor) GetLoyaltyReward() uint32 {
	if m != nil {
		return m.LoyaltyReward
	}
	return 0
}

func init() {
	proto.RegisterType((*SaleDescriptor)(nil), "SaleDescriptor")
	proto.RegisterEnum("SaleType", SaleType_name, SaleType_value)
}

func init() { proto.RegisterFile("structs/pricing/SaleDescriptor.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd1, 0x5d, 0x4f, 0xea, 0x30,
	0x1c, 0x06, 0xf0, 0x33, 0x0e, 0x39, 0x07, 0xfe, 0x1c, 0xc6, 0x4e, 0xe3, 0xcb, 0x2e, 0x7c, 0x01,
	0xa3, 0x91, 0x68, 0x32, 0xa2, 0x26, 0xde, 0x83, 0x10, 0x6e, 0x88, 0x90, 0xb9, 0x1b, 0xae, 0x48,
	0x57, 0xfe, 0xcc, 0x26, 0x63, 0x6d, 0xba, 0xa2, 0xec, 0x4b, 0xf9, 0x19, 0xcd, 0x3a, 0x26, 0x7a,
	0xd9, 0xdf, 0xf3, 0xe4, 0x49, 0xda, 0xc2, 0x65, 0xaa, 0xd5, 0x86, 0xe9, 0xb4, 0x27, 0x15, 0x67,
	0x3c, 0x89, 0x7a, 0x2f, 0x34, 0xc6, 0x21, 0xa6, 0x4c, 0x71, 0xa9, 0x85, 0xf2, 0xa4, 0x12, 0x5a,
	0x5c, 0x7c, 0x54, 0xc0, 0xfe, 0x19, 0x90, 0x53, 0xa8, 0xea, 0x4c, 0xa2, 0x6b, 0xb5, 0xad, 0xae,
	0x7d, 0x5f, 0xf7, 0xf2, 0x38, 0xc8, 0x24, 0xfa, 0x86, 0xc9, 0x09, 0xd4, 0x71, 0xb5, 0x42, 0xa6,
	0xf9, 0x1b, 0xba, 0x95, 0xb6, 0xd5, 0xad, 0xfa, 0x7b, 0x20, 0x67, 0x00, 0xb8, 0x95, 0x5c, 0x51,
	0xcd, 0x45, 0xe2, 0xfe, 0x36, 0xf1, 0x37, 0x21, 0xb7, 0xf0, 0x5f, 0xa2, 0x62, 0x98, 0x68, 0x1a,
	0xe1, 0x82, 0xae, 0xc5, 0x26, 0xd1, 0xee, 0x41, 0xdb, 0xea, 0x36, 0x7d, 0x67, 0x1f, 0xf4, 0x8d,
	0x93, 0x0e, 0xfc, 0x0b, 0x45, 0x24, 0x16, 0x5a, 0xf1, 0x28, 0x42, 0xe5, 0x1e, 0x9a, 0x5e, 0x23,
	0xb7, 0xa0, 0x20, 0x72, 0x0e, 0xe6, 0xb8, 0x50, 0xf8, 0x4e, 0xd5, 0xd2, 0x3d, 0x32, 0x0d, 0xc8,
	0xc9, 0x37, 0x42, 0xae, 0xa1, 0x15, 0x8b, 0x8c, 0xc6, 0x3a, 0xfb, 0x9a, 0x39, 0x36, 0x25, 0x7b,
	0xc7, 0xe5, 0xd2, 0x15, 0x94, 0x52, 0x8e, 0xb9, 0xa6, 0xd7, 0xdc, 0x69, 0xb1, 0x77, 0x73, 0x07,
	0xb5, 0xf2, 0x41, 0x88, 0x0d, 0x30, 0x1b, 0xf9, 0x4f, 0xa3, 0xe7, 0xa0, 0x3f, 0x1e, 0x39, 0xbf,
	0x48, 0x0d, 0xaa, 0x83, 0xe9, 0x78, 0xea, 0x58, 0xa4, 0x01, 0x7f, 0x27, 0xd3, 0x79, 0x7f, 0x12,
	0xcc, 0x9d, 0xca, 0xe0, 0x11, 0x3a, 0x5c, 0x78, 0x61, 0x2c, 0xc4, 0x3a, 0x14, 0x5b, 0x2f, 0x65,
	0xaf, 0xb8, 0xa6, 0xf9, 0xfb, 0x2f, 0x37, 0x4c, 0x7b, 0xc5, 0x37, 0x0d, 0x5a, 0xb3, 0xe2, 0x3c,
	0xe4, 0x29, 0xcb, 0x2f, 0x3f, 0xb3, 0xc2, 0x3f, 0xe6, 0x8b, 0x1e, 0x3e, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x1f, 0xb2, 0x16, 0x66, 0xca, 0x01, 0x00, 0x00,
}
