// Code generated by protoc-gen-go. DO NOT EDIT.
// source: structs/FlagsDescriptor.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProductFlag int32

const (
	ProductFlag_VISIBLE    ProductFlag = 0
	ProductFlag_PREMIUM    ProductFlag = 1
	ProductFlag_FEATURED   ProductFlag = 2
	ProductFlag_LASTCHANCE ProductFlag = 3
	ProductFlag_INHOUSE    ProductFlag = 4
)

var ProductFlag_name = map[int32]string{
	0: "VISIBLE",
	1: "PREMIUM",
	2: "FEATURED",
	3: "LASTCHANCE",
	4: "INHOUSE",
}
var ProductFlag_value = map[string]int32{
	"VISIBLE":    0,
	"PREMIUM":    1,
	"FEATURED":   2,
	"LASTCHANCE": 3,
	"INHOUSE":    4,
}

func (x ProductFlag) String() string {
	return proto.EnumName(ProductFlag_name, int32(x))
}
func (ProductFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

type ProductFlagValue struct {
	Type  ProductFlag `protobuf:"varint,1,opt,name=type,enum=ProductFlag" json:"type,omitempty"`
	Value bool        `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ProductFlagValue) Reset()                    { *m = ProductFlagValue{} }
func (m *ProductFlagValue) String() string            { return proto.CompactTextString(m) }
func (*ProductFlagValue) ProtoMessage()               {}
func (*ProductFlagValue) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *ProductFlagValue) GetType() ProductFlag {
	if m != nil {
		return m.Type
	}
	return ProductFlag_VISIBLE
}

func (m *ProductFlagValue) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ProductFlagset struct {
	Flags []*ProductFlagValue `protobuf:"bytes,1,rep,name=flags" json:"flags,omitempty"`
}

func (m *ProductFlagset) Reset()                    { *m = ProductFlagset{} }
func (m *ProductFlagset) String() string            { return proto.CompactTextString(m) }
func (*ProductFlagset) ProtoMessage()               {}
func (*ProductFlagset) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *ProductFlagset) GetFlags() []*ProductFlagValue {
	if m != nil {
		return m.Flags
	}
	return nil
}

type FlagsDescriptor struct {
	Visible    bool `protobuf:"varint,1,opt,name=visible" json:"visible,omitempty"`
	Premium    bool `protobuf:"varint,2,opt,name=premium" json:"premium,omitempty"`
	Featured   bool `protobuf:"varint,3,opt,name=featured" json:"featured,omitempty"`
	Lastchance bool `protobuf:"varint,4,opt,name=lastchance" json:"lastchance,omitempty"`
	Inhouse    bool `protobuf:"varint,5,opt,name=inhouse" json:"inhouse,omitempty"`
}

func (m *FlagsDescriptor) Reset()                    { *m = FlagsDescriptor{} }
func (m *FlagsDescriptor) String() string            { return proto.CompactTextString(m) }
func (*FlagsDescriptor) ProtoMessage()               {}
func (*FlagsDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *FlagsDescriptor) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *FlagsDescriptor) GetPremium() bool {
	if m != nil {
		return m.Premium
	}
	return false
}

func (m *FlagsDescriptor) GetFeatured() bool {
	if m != nil {
		return m.Featured
	}
	return false
}

func (m *FlagsDescriptor) GetLastchance() bool {
	if m != nil {
		return m.Lastchance
	}
	return false
}

func (m *FlagsDescriptor) GetInhouse() bool {
	if m != nil {
		return m.Inhouse
	}
	return false
}

func init() {
	proto.RegisterType((*ProductFlagValue)(nil), "ProductFlagValue")
	proto.RegisterType((*ProductFlagset)(nil), "ProductFlagset")
	proto.RegisterType((*FlagsDescriptor)(nil), "FlagsDescriptor")
	proto.RegisterEnum("ProductFlag", ProductFlag_name, ProductFlag_value)
}

func init() { proto.RegisterFile("structs/FlagsDescriptor.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x2d, 0x7f, 0x64, 0x79, 0x47, 0x70, 0x36, 0x1e, 0x16, 0x13, 0xcd, 0xe4, 0x22, 0xf1,
	0x30, 0x13, 0x3c, 0x18, 0x8f, 0x0c, 0x46, 0x98, 0x01, 0x24, 0x1b, 0x70, 0xef, 0x46, 0x91, 0x25,
	0x1b, 0x5d, 0xda, 0x8e, 0xe8, 0x67, 0xf1, 0x8b, 0x7a, 0x34, 0xdd, 0xc0, 0x2c, 0xdc, 0xf6, 0xdb,
	0xef, 0x49, 0xdf, 0x27, 0x79, 0xe0, 0x4e, 0x48, 0x9e, 0x47, 0x52, 0x3c, 0x8f, 0x13, 0xf2, 0x29,
	0x46, 0x54, 0x44, 0x3c, 0xce, 0x24, 0xe3, 0x76, 0xc6, 0x99, 0x64, 0xdd, 0x77, 0x30, 0x16, 0x9c,
	0x6d, 0xf2, 0x48, 0x2a, 0xbf, 0x26, 0x49, 0x4e, 0xb1, 0x05, 0x0d, 0xf9, 0x9d, 0x51, 0x13, 0x59,
	0xa8, 0xd7, 0xe9, 0xb7, 0xed, 0x4a, 0xc0, 0x2f, 0x0c, 0xbe, 0x81, 0xe6, 0x41, 0x45, 0xcd, 0x9a,
	0x85, 0x7a, 0x9a, 0x5f, 0x42, 0xf7, 0x0d, 0x3a, 0x95, 0xa8, 0xa0, 0x12, 0x3f, 0x42, 0x73, 0xab,
	0x3e, 0x4d, 0x64, 0xd5, 0x7b, 0x7a, 0xff, 0xda, 0x3e, 0xbf, 0xe5, 0x97, 0xbe, 0xfb, 0x83, 0xe0,
	0xea, 0xac, 0x20, 0x36, 0xa1, 0x75, 0x88, 0x45, 0x1c, 0x26, 0x65, 0x13, 0xcd, 0x3f, 0xa1, 0x32,
	0x19, 0xa7, 0x69, 0x9c, 0xa7, 0xc7, 0x02, 0x27, 0xc4, 0xb7, 0xa0, 0x6d, 0x29, 0x91, 0x39, 0xa7,
	0x1b, 0xb3, 0x5e, 0xa8, 0x7f, 0xc6, 0xf7, 0x00, 0x09, 0x11, 0x32, 0xda, 0x91, 0x7d, 0x44, 0xcd,
	0x46, 0x61, 0x2b, 0x7f, 0xd4, 0xab, 0xf1, 0x7e, 0xc7, 0x72, 0x41, 0xcd, 0x66, 0xf9, 0xea, 0x11,
	0x9f, 0x7c, 0xd0, 0x2b, 0xc5, 0xb1, 0x0e, 0xad, 0xb5, 0x17, 0x78, 0xce, 0xd4, 0x35, 0x2e, 0x14,
	0x2c, 0x7c, 0x77, 0xe6, 0xad, 0x66, 0x06, 0xc2, 0x6d, 0xd0, 0xc6, 0xee, 0x60, 0xb9, 0xf2, 0xdd,
	0x91, 0x51, 0xc3, 0x1d, 0x80, 0xe9, 0x20, 0x58, 0x0e, 0x27, 0x83, 0xf9, 0xd0, 0x35, 0xea, 0x2a,
	0xea, 0xcd, 0x27, 0x1f, 0xab, 0xc0, 0x35, 0x1a, 0xce, 0x2b, 0x3c, 0xc4, 0xcc, 0x0e, 0x13, 0xc6,
	0xd2, 0x90, 0x7d, 0xd9, 0x22, 0xda, 0xd1, 0x94, 0xa8, 0x51, 0xd4, 0x19, 0xbb, 0x1c, 0xcd, 0xd1,
	0x1d, 0x22, 0x68, 0x50, 0x0e, 0x38, 0x41, 0x0b, 0xf4, 0x8b, 0x50, 0x78, 0x59, 0x0c, 0xf7, 0xf2,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x4e, 0x00, 0x49, 0xd9, 0x01, 0x00, 0x00,
}
