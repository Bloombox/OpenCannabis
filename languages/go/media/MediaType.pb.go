// Code generated by protoc-gen-go. DO NOT EDIT.
// source: media/MediaType.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MediaType_Kind int32

const (
	MediaType_LINK     MediaType_Kind = 0
	MediaType_IMAGE    MediaType_Kind = 1
	MediaType_DOCUMENT MediaType_Kind = 2
	MediaType_VIDEO    MediaType_Kind = 3
)

var MediaType_Kind_name = map[int32]string{
	0: "LINK",
	1: "IMAGE",
	2: "DOCUMENT",
	3: "VIDEO",
}
var MediaType_Kind_value = map[string]int32{
	"LINK":     0,
	"IMAGE":    1,
	"DOCUMENT": 2,
	"VIDEO":    3,
}

func (x MediaType_Kind) String() string {
	return proto.EnumName(MediaType_Kind_name, int32(x))
}
func (MediaType_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0, 0} }

type ImageType_ImageKind int32

const (
	ImageType_PNG  ImageType_ImageKind = 0
	ImageType_JPG  ImageType_ImageKind = 1
	ImageType_GIF  ImageType_ImageKind = 2
	ImageType_SVG  ImageType_ImageKind = 3
	ImageType_WEBP ImageType_ImageKind = 4
)

var ImageType_ImageKind_name = map[int32]string{
	0: "PNG",
	1: "JPG",
	2: "GIF",
	3: "SVG",
	4: "WEBP",
}
var ImageType_ImageKind_value = map[string]int32{
	"PNG":  0,
	"JPG":  1,
	"GIF":  2,
	"SVG":  3,
	"WEBP": 4,
}

func (x ImageType_ImageKind) String() string {
	return proto.EnumName(ImageType_ImageKind_name, int32(x))
}
func (ImageType_ImageKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{1, 0} }

type DocumentType_DocumentKind int32

const (
	DocumentType_TXT      DocumentType_DocumentKind = 0
	DocumentType_HTML     DocumentType_DocumentKind = 1
	DocumentType_PDF      DocumentType_DocumentKind = 2
	DocumentType_MARKDOWN DocumentType_DocumentKind = 3
)

var DocumentType_DocumentKind_name = map[int32]string{
	0: "TXT",
	1: "HTML",
	2: "PDF",
	3: "MARKDOWN",
}
var DocumentType_DocumentKind_value = map[string]int32{
	"TXT":      0,
	"HTML":     1,
	"PDF":      2,
	"MARKDOWN": 3,
}

func (x DocumentType_DocumentKind) String() string {
	return proto.EnumName(DocumentType_DocumentKind_name, int32(x))
}
func (DocumentType_DocumentKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor13, []int{2, 0}
}

type VideoType_VideoKind int32

const (
	VideoType_MP4 VideoType_VideoKind = 0
	VideoType_FLV VideoType_VideoKind = 1
	VideoType_HLS VideoType_VideoKind = 2
)

var VideoType_VideoKind_name = map[int32]string{
	0: "MP4",
	1: "FLV",
	2: "HLS",
}
var VideoType_VideoKind_value = map[string]int32{
	"MP4": 0,
	"FLV": 1,
	"HLS": 2,
}

func (x VideoType_VideoKind) String() string {
	return proto.EnumName(VideoType_VideoKind_name, int32(x))
}
func (VideoType_VideoKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{3, 0} }

// -- Media Type: Top-level -- //
type MediaType struct {
	Kind         MediaType_Kind `protobuf:"varint,1,opt,name=kind,enum=MediaType_Kind" json:"kind,omitempty"`
	ImageType    *ImageType     `protobuf:"bytes,101,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	DocumentType *DocumentType  `protobuf:"bytes,201,opt,name=document_type,json=documentType" json:"document_type,omitempty"`
	VideoType    *VideoType     `protobuf:"bytes,301,opt,name=video_type,json=videoType" json:"video_type,omitempty"`
}

func (m *MediaType) Reset()                    { *m = MediaType{} }
func (m *MediaType) String() string            { return proto.CompactTextString(m) }
func (*MediaType) ProtoMessage()               {}
func (*MediaType) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *MediaType) GetKind() MediaType_Kind {
	if m != nil {
		return m.Kind
	}
	return MediaType_LINK
}

func (m *MediaType) GetImageType() *ImageType {
	if m != nil {
		return m.ImageType
	}
	return nil
}

func (m *MediaType) GetDocumentType() *DocumentType {
	if m != nil {
		return m.DocumentType
	}
	return nil
}

func (m *MediaType) GetVideoType() *VideoType {
	if m != nil {
		return m.VideoType
	}
	return nil
}

// -- Media Type: Images -- //
type ImageType struct {
	Kind ImageType_ImageKind `protobuf:"varint,1,opt,name=kind,enum=ImageType_ImageKind" json:"kind,omitempty"`
}

func (m *ImageType) Reset()                    { *m = ImageType{} }
func (m *ImageType) String() string            { return proto.CompactTextString(m) }
func (*ImageType) ProtoMessage()               {}
func (*ImageType) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *ImageType) GetKind() ImageType_ImageKind {
	if m != nil {
		return m.Kind
	}
	return ImageType_PNG
}

// -- Media Type: Document -- //
type DocumentType struct {
	Kind       DocumentType_DocumentKind `protobuf:"varint,1,opt,name=kind,enum=DocumentType_DocumentKind" json:"kind,omitempty"`
	Compressed bool                      `protobuf:"varint,2,opt,name=compressed" json:"compressed,omitempty"`
}

func (m *DocumentType) Reset()                    { *m = DocumentType{} }
func (m *DocumentType) String() string            { return proto.CompactTextString(m) }
func (*DocumentType) ProtoMessage()               {}
func (*DocumentType) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *DocumentType) GetKind() DocumentType_DocumentKind {
	if m != nil {
		return m.Kind
	}
	return DocumentType_TXT
}

func (m *DocumentType) GetCompressed() bool {
	if m != nil {
		return m.Compressed
	}
	return false
}

// -- Media Type: Video -- //
type VideoType struct {
	Kind VideoType_VideoKind `protobuf:"varint,1,opt,name=kind,enum=VideoType_VideoKind" json:"kind,omitempty"`
}

func (m *VideoType) Reset()                    { *m = VideoType{} }
func (m *VideoType) String() string            { return proto.CompactTextString(m) }
func (*VideoType) ProtoMessage()               {}
func (*VideoType) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *VideoType) GetKind() VideoType_VideoKind {
	if m != nil {
		return m.Kind
	}
	return VideoType_MP4
}

func init() {
	proto.RegisterType((*MediaType)(nil), "MediaType")
	proto.RegisterType((*ImageType)(nil), "ImageType")
	proto.RegisterType((*DocumentType)(nil), "DocumentType")
	proto.RegisterType((*VideoType)(nil), "VideoType")
	proto.RegisterEnum("MediaType_Kind", MediaType_Kind_name, MediaType_Kind_value)
	proto.RegisterEnum("ImageType_ImageKind", ImageType_ImageKind_name, ImageType_ImageKind_value)
	proto.RegisterEnum("DocumentType_DocumentKind", DocumentType_DocumentKind_name, DocumentType_DocumentKind_value)
	proto.RegisterEnum("VideoType_VideoKind", VideoType_VideoKind_name, VideoType_VideoKind_value)
}

func init() { proto.RegisterFile("media/MediaType.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x8f, 0x94, 0x40,
	0x10, 0x9d, 0x06, 0x54, 0x28, 0x19, 0xed, 0x74, 0x34, 0x21, 0x1e, 0xcc, 0x06, 0x13, 0x33, 0x7a,
	0x68, 0xcd, 0xee, 0x1e, 0xf4, 0xb8, 0x23, 0x2c, 0x83, 0x03, 0x0c, 0x61, 0x91, 0xf5, 0x62, 0xcc,
	0xcc, 0xd0, 0x51, 0xa2, 0x4c, 0x93, 0x1d, 0xdc, 0xb8, 0xff, 0xc4, 0x3f, 0xe1, 0x0f, 0xf1, 0xef,
	0x78, 0xf2, 0x68, 0x9a, 0xe6, 0x6b, 0xb2, 0x17, 0xf2, 0xfa, 0x55, 0x15, 0xef, 0xd5, 0x4b, 0xc1,
	0xe3, 0x92, 0xe5, 0xc5, 0xfa, 0x55, 0x28, 0xbe, 0xe9, 0x4d, 0xc5, 0x68, 0x75, 0xc5, 0x6b, 0x6e,
	0xff, 0x45, 0x60, 0xf4, 0x1c, 0x79, 0x06, 0xda, 0xb7, 0x62, 0x97, 0x5b, 0xe8, 0x08, 0xcd, 0x1e,
	0x1c, 0x3f, 0xa4, 0x43, 0xf7, 0xb2, 0xd8, 0xe5, 0x49, 0x53, 0x24, 0x2f, 0x00, 0x8a, 0x72, 0xfd,
	0x85, 0x7d, 0xae, 0x6f, 0x2a, 0x66, 0xb1, 0x23, 0x34, 0xbb, 0x7f, 0x0c, 0xd4, 0x17, 0x94, 0x68,
	0x4d, 0x8c, 0xa2, 0x83, 0xe4, 0x04, 0xa6, 0x39, 0xdf, 0xfe, 0x28, 0xd9, 0xae, 0x96, 0xdd, 0x7f,
	0x50, 0xd3, 0x3e, 0xa5, 0x4e, 0x4b, 0x37, 0x13, 0x66, 0x3e, 0x7a, 0x91, 0x97, 0x00, 0xd7, 0x45,
	0xce, 0xb8, 0x9c, 0xf8, 0xad, 0xb4, 0x02, 0x99, 0xe0, 0xa4, 0xc0, 0x75, 0x07, 0xed, 0x53, 0xd0,
	0x84, 0x33, 0xa2, 0x83, 0x16, 0xf8, 0xd1, 0x12, 0x4f, 0x88, 0x01, 0x77, 0xfc, 0xf0, 0xcc, 0x73,
	0x31, 0x22, 0x26, 0xe8, 0xce, 0xea, 0xdd, 0x87, 0xd0, 0x8d, 0x52, 0xac, 0x88, 0x42, 0xe6, 0x3b,
	0xee, 0x0a, 0xab, 0x76, 0x05, 0x46, 0x6f, 0x97, 0xcc, 0x0e, 0x76, 0x7e, 0x34, 0x2c, 0x22, 0xd1,
	0xb0, 0xb8, 0xfd, 0xb6, 0x1d, 0x6b, 0x14, 0xef, 0x81, 0x1a, 0x47, 0x1e, 0x9e, 0x08, 0xf0, 0x3e,
	0xf6, 0x30, 0x12, 0xc0, 0xf3, 0xcf, 0xb1, 0x22, 0xc0, 0x45, 0xe6, 0x61, 0x55, 0xb8, 0xba, 0x74,
	0xe7, 0x31, 0xd6, 0xec, 0x5f, 0x08, 0xcc, 0xf1, 0xca, 0x84, 0x1e, 0xa8, 0x3e, 0x39, 0xc8, 0xa3,
	0x7f, 0x8c, 0x42, 0x7f, 0x0a, 0xb0, 0xe5, 0x65, 0x75, 0xc5, 0xf6, 0x7b, 0x96, 0x5b, 0x22, 0x13,
	0x3d, 0x19, 0x31, 0xf6, 0x9b, 0xe1, 0xff, 0x9d, 0xbd, 0xf4, 0x63, 0x8a, 0x27, 0xc2, 0xc3, 0x22,
	0x0d, 0x03, 0xe9, 0x2f, 0x76, 0x84, 0x3f, 0x13, 0xf4, 0xf0, 0x2c, 0x59, 0x3a, 0xab, 0xcb, 0x08,
	0xab, 0xf6, 0x27, 0x30, 0xfa, 0x68, 0x6f, 0x85, 0xd1, 0x57, 0x24, 0x1a, 0x85, 0xf1, 0xbc, 0x1d,
	0xeb, 0xd4, 0xc2, 0xf8, 0x54, 0x86, 0x71, 0x1e, 0x64, 0x52, 0x6c, 0x11, 0x5c, 0x60, 0x65, 0xfe,
	0x1a, 0xac, 0x82, 0xd3, 0xcd, 0x77, 0xce, 0xcb, 0x0d, 0xff, 0x49, 0xf7, 0xdb, 0xaf, 0xac, 0x5c,
	0xd3, 0xe6, 0x18, 0xe7, 0xd3, 0xe6, 0xbe, 0xfc, 0x9a, 0x95, 0x42, 0x62, 0x81, 0x62, 0xf4, 0x0f,
	0xa1, 0xcd, 0xdd, 0xe6, 0x32, 0x4f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x34, 0xa1, 0xba, 0x36,
	0xb2, 0x02, 0x00, 0x00,
}
