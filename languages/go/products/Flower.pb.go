// Code generated by protoc-gen-go. DO NOT EDIT.
// source: products/Flower.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Flower struct {
	// -- Object Key
	Key *ProductKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// -- Basic Product & Materials Data
	ProductData  *ProductContent `protobuf:"bytes,20,opt,name=product_data,json=productData" json:"product_data,omitempty"`
	MaterialData *MaterialsData  `protobuf:"bytes,21,opt,name=material_data,json=materialData" json:"material_data,omitempty"`
	// -- Flags and Pricing
	Flags   *FlagsDescriptor `protobuf:"bytes,22,opt,name=flags" json:"flags,omitempty"`
	Pricing *ProductPricing  `protobuf:"bytes,23,opt,name=pricing" json:"pricing,omitempty"`
}

func (m *Flower) Reset()                    { *m = Flower{} }
func (m *Flower) String() string            { return proto.CompactTextString(m) }
func (*Flower) ProtoMessage()               {}
func (*Flower) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *Flower) GetKey() *ProductKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Flower) GetProductData() *ProductContent {
	if m != nil {
		return m.ProductData
	}
	return nil
}

func (m *Flower) GetMaterialData() *MaterialsData {
	if m != nil {
		return m.MaterialData
	}
	return nil
}

func (m *Flower) GetFlags() *FlagsDescriptor {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *Flower) GetPricing() *ProductPricing {
	if m != nil {
		return m.Pricing
	}
	return nil
}

func init() {
	proto.RegisterType((*Flower)(nil), "Flower")
}

func init() { proto.RegisterFile("products/Flower.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x0d, 0xe2, 0x84, 0x6c, 0x53, 0x29, 0x56, 0xcb, 0x74, 0x20, 0x5e, 0xf8, 0xe7, 0x26,
	0x85, 0xee, 0x0d, 0xe6, 0x10, 0x41, 0x84, 0x92, 0x17, 0x90, 0x34, 0x8b, 0x33, 0xd8, 0xf6, 0x94,
	0x24, 0xa2, 0x7b, 0x5e, 0x5f, 0xc2, 0x4b, 0x69, 0x72, 0x82, 0x74, 0x57, 0x21, 0xe7, 0xfb, 0x3e,
	0xce, 0xf7, 0x3b, 0x34, 0xed, 0x0c, 0xac, 0x3f, 0xa5, 0xb3, 0xf9, 0x63, 0x0d, 0x5f, 0xca, 0xb0,
	0xce, 0x80, 0x83, 0x59, 0x5a, 0x09, 0xab, 0xf2, 0x32, 0x68, 0xcf, 0x6a, 0x8b, 0xe3, 0x0b, 0x09,
	0xad, 0x53, 0xad, 0xcb, 0x5f, 0x84, 0x53, 0x46, 0x8b, 0xda, 0xae, 0x84, 0x13, 0x28, 0x5e, 0x46,
	0x11, 0x63, 0x0f, 0xe1, 0x8b, 0xea, 0xdc, 0x3a, 0x83, 0x7b, 0xc4, 0xc6, 0xae, 0x94, 0x95, 0x46,
	0x77, 0x0e, 0xe2, 0xc2, 0xdb, 0x28, 0x77, 0x46, 0x4b, 0xdd, 0x6e, 0xf2, 0x32, 0xbc, 0xbb, 0xc6,
	0xeb, 0x1f, 0x42, 0x47, 0xa1, 0x6a, 0x32, 0xa7, 0xfb, 0x1f, 0x6a, 0x9b, 0x91, 0x2b, 0x72, 0x37,
	0x2e, 0xc6, 0xec, 0xbf, 0x2d, 0xef, 0xe7, 0x49, 0x41, 0x27, 0x08, 0xf7, 0xba, 0x16, 0x4e, 0x64,
	0xa7, 0xde, 0x77, 0xcc, 0x86, 0xf5, 0xf8, 0x18, 0x4d, 0x3d, 0x49, 0xb2, 0xa0, 0xd3, 0x06, 0xd1,
	0x42, 0x28, 0xf5, 0xa1, 0x23, 0x36, 0x00, 0xe6, 0x93, 0x68, 0xf2, 0xa1, 0x1b, 0x7a, 0xf0, 0xd6,
	0x43, 0x65, 0x67, 0xde, 0x7c, 0xc2, 0x76, 0x10, 0x79, 0x90, 0x93, 0x7b, 0x7a, 0x88, 0x74, 0xd9,
	0xf9, 0xb0, 0x0b, 0xc2, 0xf2, 0xa8, 0x2f, 0x0b, 0x3a, 0xd3, 0xc0, 0xaa, 0x1a, 0xa0, 0xa9, 0xe0,
	0x9b, 0x59, 0xf9, 0xae, 0x1a, 0x7f, 0xe7, 0xde, 0xbd, 0x9c, 0x86, 0x03, 0x60, 0xf8, 0x89, 0x94,
	0x7b, 0xbf, 0x84, 0x54, 0x23, 0x7f, 0xa0, 0xc5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0xf9,
	0xea, 0x90, 0xd3, 0x01, 0x00, 0x00,
}
