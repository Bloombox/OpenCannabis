// Code generated by protoc-gen-go. DO NOT EDIT.
// source: content/Content.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Content_Type int32

const (
	Content_TEXT     Content_Type = 0
	Content_MARKDOWN Content_Type = 1
	Content_HTML     Content_Type = 2
)

var Content_Type_name = map[int32]string{
	0: "TEXT",
	1: "MARKDOWN",
	2: "HTML",
}
var Content_Type_value = map[string]int32{
	"TEXT":     0,
	"MARKDOWN": 1,
	"HTML":     2,
}

func (x Content_Type) String() string {
	return proto.EnumName(Content_Type_name, int32(x))
}
func (Content_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type Content_Encoding int32

const (
	Content_UTF8 Content_Encoding = 0
)

var Content_Encoding_name = map[int32]string{
	0: "UTF8",
}
var Content_Encoding_value = map[string]int32{
	"UTF8": 0,
}

func (x Content_Encoding) String() string {
	return proto.EnumName(Content_Encoding_name, int32(x))
}
func (Content_Encoding) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

type Content struct {
	Type        Content_Type     `protobuf:"varint,1,opt,name=type,enum=Content_Type" json:"type,omitempty"`
	Encoding    Content_Encoding `protobuf:"varint,2,opt,name=encoding,enum=Content_Encoding" json:"encoding,omitempty"`
	Content     []byte           `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Language    Language         `protobuf:"varint,4,opt,name=language,enum=Language" json:"language,omitempty"`
	Compression *Compression     `protobuf:"bytes,5,opt,name=compression" json:"compression,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Content) GetType() Content_Type {
	if m != nil {
		return m.Type
	}
	return Content_TEXT
}

func (m *Content) GetEncoding() Content_Encoding {
	if m != nil {
		return m.Encoding
	}
	return Content_UTF8
}

func (m *Content) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Content) GetLanguage() Language {
	if m != nil {
		return m.Language
	}
	return Language_ENGLISH
}

func (m *Content) GetCompression() *Compression {
	if m != nil {
		return m.Compression
	}
	return nil
}

func init() {
	proto.RegisterType((*Content)(nil), "Content")
	proto.RegisterEnum("Content_Type", Content_Type_name, Content_Type_value)
	proto.RegisterEnum("Content_Encoding", Content_Encoding_name, Content_Encoding_value)
}

func init() { proto.RegisterFile("content/Content.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x5d, 0x4b, 0xc3, 0x30,
	0x14, 0x86, 0x97, 0x59, 0x5d, 0x3d, 0xab, 0xa3, 0xc6, 0x0f, 0xc2, 0xae, 0x6a, 0x41, 0xe8, 0x8d,
	0x19, 0xcc, 0x1b, 0x6f, 0xdd, 0x9c, 0x0a, 0x6e, 0x2a, 0xa1, 0xa2, 0xb7, 0x6d, 0x0d, 0xb5, 0xb0,
	0xe6, 0x94, 0xb6, 0x82, 0xfb, 0x0f, 0xfe, 0x68, 0x69, 0x96, 0xd6, 0x5d, 0x85, 0x3c, 0xef, 0x9b,
	0xc3, 0x73, 0x02, 0x67, 0x09, 0xaa, 0x5a, 0xaa, 0x7a, 0x32, 0xdf, 0x9e, 0xbc, 0x28, 0xb1, 0xc6,
	0xf1, 0x49, 0x1c, 0x55, 0x72, 0xb2, 0x8c, 0x54, 0xfa, 0x1d, 0xa5, 0xd2, 0xc0, 0x73, 0x0d, 0xe7,
	0x98, 0x17, 0xa5, 0xac, 0xaa, 0x0c, 0xd5, 0x96, 0xfb, 0xbf, 0x7d, 0x18, 0x98, 0xe7, 0xf4, 0x02,
	0xac, 0x7a, 0x53, 0x48, 0x46, 0x3c, 0x12, 0x8c, 0xa6, 0x47, 0xbc, 0x1d, 0x1b, 0x6e, 0x0a, 0x29,
	0x74, 0x44, 0xaf, 0xc0, 0x96, 0x2a, 0xc1, 0xcf, 0x4c, 0xa5, 0xac, 0xaf, 0x6b, 0xc7, 0x5d, 0x6d,
	0x61, 0x02, 0xd1, 0x55, 0x28, 0x83, 0x81, 0x71, 0x64, 0x7b, 0x1e, 0x09, 0x1c, 0xd1, 0x5e, 0xe9,
	0x25, 0xd8, 0x6b, 0x63, 0xc8, 0x2c, 0x3d, 0xe8, 0x90, 0xb7, 0xca, 0xa2, 0x8b, 0x28, 0x87, 0x61,
	0xf2, 0xef, 0xcc, 0xf6, 0x3d, 0x12, 0x0c, 0xa7, 0x0e, 0xdf, 0xd9, 0x43, 0xec, 0x16, 0xfc, 0x00,
	0xac, 0xc6, 0x96, 0xda, 0x60, 0x85, 0x8b, 0x8f, 0xd0, 0xed, 0x51, 0x07, 0xec, 0xd5, 0xad, 0x78,
	0xba, 0x7b, 0x79, 0x7f, 0x76, 0x49, 0xc3, 0x1f, 0xc3, 0xd5, 0xd2, 0xed, 0xfb, 0xa7, 0x60, 0xb7,
	0xc2, 0x0d, 0x7d, 0x0b, 0xef, 0x6f, 0xdc, 0xde, 0x8c, 0xc3, 0x38, 0x43, 0x1e, 0xaf, 0x11, 0xf3,
	0x18, 0x7f, 0x78, 0x95, 0x7c, 0xc9, 0x3c, 0xe2, 0x46, 0x7a, 0x36, 0x7a, 0x90, 0x4a, 0x96, 0x59,
	0x62, 0x36, 0x7e, 0x25, 0xf1, 0x81, 0xfe, 0xc5, 0xeb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0x0d, 0x36, 0xfe, 0x8b, 0x01, 0x00, 0x00,
}
