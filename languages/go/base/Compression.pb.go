// Code generated by protoc-gen-go. DO NOT EDIT.
// source: base/Compression.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Compression_Type int32

const (
	Compression_GZIP Compression_Type = 0
)

var Compression_Type_name = map[int32]string{
	0: "GZIP",
}
var Compression_Type_value = map[string]int32{
	"GZIP": 0,
}

func (x Compression_Type) String() string {
	return proto.EnumName(Compression_Type_name, int32(x))
}
func (Compression_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Compression struct {
	Enabled bool             `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Type    Compression_Type `protobuf:"varint,2,opt,name=type,enum=Compression_Type" json:"type,omitempty"`
}

func (m *Compression) Reset()                    { *m = Compression{} }
func (m *Compression) String() string            { return proto.CompactTextString(m) }
func (*Compression) ProtoMessage()               {}
func (*Compression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Compression) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Compression) GetType() Compression_Type {
	if m != nil {
		return m.Type
	}
	return Compression_GZIP
}

func init() {
	proto.RegisterType((*Compression)(nil), "Compression")
	proto.RegisterEnum("Compression_Type", Compression_Type_name, Compression_Type_value)
}

func init() { proto.RegisterFile("base/Compression.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x4a, 0x2c, 0x4e,
	0xd5, 0x77, 0xce, 0xcf, 0x2d, 0x28, 0x4a, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x57, 0x4a, 0xe0, 0xe2, 0x46, 0x12, 0x14, 0x92, 0xe0, 0x62, 0x4f, 0xcd, 0x4b, 0x4c,
	0xca, 0x49, 0x4d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x82, 0x71, 0x85, 0x54, 0xb9, 0x58,
	0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x04, 0xf5, 0x90, 0x8d, 0x0a,
	0xa9, 0x2c, 0x48, 0x0d, 0x02, 0x4b, 0x2b, 0x09, 0x70, 0xb1, 0x80, 0x78, 0x42, 0x1c, 0x5c, 0x2c,
	0xee, 0x51, 0x9e, 0x01, 0x02, 0x0c, 0x4e, 0x86, 0x5c, 0xe2, 0x99, 0xf9, 0x7a, 0x49, 0x39, 0xf9,
	0xf9, 0xb9, 0x49, 0xf9, 0x15, 0x7a, 0xc5, 0xc9, 0x19, 0xa9, 0xb9, 0x89, 0x7a, 0x20, 0xe7, 0x38,
	0xf1, 0x3b, 0x25, 0x16, 0xa7, 0x22, 0x19, 0xe4, 0xc1, 0x18, 0xc0, 0xf8, 0x83, 0x91, 0x31, 0x89,
	0x0d, 0xec, 0x36, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x4a, 0x09, 0x25, 0xb5, 0x00,
	0x00, 0x00,
}
