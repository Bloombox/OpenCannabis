// OpenCannabis Protocol
//
// Copyright $today.year (c) OpenCannabis Authors. All rights reserved.
// https://rfc.opencannabis.info - https://github.com/opencannabis/protocol
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// The source programming code in this file is licensed for open source use
// under the terms of the Apache License 2.0. Please see NOTICE.txt and
// LICENSE.txt at the root of this repository, or at the GitHub URL listed at
// the top of this file, for more information.

/**
 * Specifies structures that relate to data modeling and the structure of the data. Enumerates collection mode and field
 * type.
 */
syntax = "proto3";
package core;

import "google/protobuf/descriptor.proto";
import "content/Colors.proto";


// Sets the visibility of a given object and its constituent properties, in circumstances where the object is served to
// a frontend client/agent. Depending on the visibility of a given property, it may or may not be emitted by an API
// service, or made available (or not) in the JS context.
enum Visibility {
  // Default visibility: the property or item is public.
  PUBLIC = 0;

  // Private visibility: only usable and addressable by itself, or associated items.
  PRIVATE = 1;

  // Protected visibility: children and other associated objects can access or address this item.
  PROTECTED = 2;

  // Package visibility: items or objects in the same package can access and address this item.
  PACKAGE = 3;

  // Export visibility: expose this item to the outer invoking context.
  EXPORT = 4;
}


// Specifies how a sub-object in a particular message should be persisted.
enum CollectionMode {
  // `NESTED` mode stores the specified collection within the parent document.
  NESTED = 0;

  // `COLLECTION` mode stores the specified collection as a sub-collection under the parent document.
  COLLECTION = 1;

  // `GROUP` mode stores the specified collection at the root of the data system.
  GROUP = 2;
}


// Enumerates field handling special-cases. Fields may be annotated with these special types to change the way they are
// handled by the model mapping layer.
enum FieldType {
  // This is a standard field (default value).
  STANDARD = 0;

  // This is a key field (a primary key submessage) for a GROUP or COLLECTION-mode message.
  KEY = 1;

  // This is an ID field that should be used as the final name of this document.
  ID = 2;

  // This is a tags-style field.
  TAGS = 3;

  // Store this object as a special flags-style mapping.
  FLAGS = 4;
}


// Options specified for a given datamodel point (which can be a message, a field, an enum, and so on), which describe
// how the object or field may be validated in various circumstances, and how it should be handled with regard to
// exposure visibility to invoking code.
message DatapointOptions {
  // Sets the visibility options for this data point. Depending on these options, a property or model may be exposed to
  // invoking code, protected from rewriting, and so on.
  Visibility visibility = 1;

  // Whether this data point (model or field or enum, etc) should be considered "required" for this model to be valid.
  // This setting is applied in various circumstances, usually when data crosses API boundaries.
  bool required = 2;
}


// Specifies options related to persistence of underlying model data associated with this particular message type. This
// includes settings related to Firestore and other data engines.
message PersistenceOptions {
  // Specifies the storage mode for this entity.
  CollectionMode mode = 1;

  // Data path for a given message, with items in the URL corresponding to parameters in the item's key path.
  string path = 2;
}

// Options specific to model integration with table-style engines, where there can be a table name and/or description
// that should be mapped to a particular message structure.
message TableOptions {
  // Name of the table bound to this model.
  string name = 1;

  // Description for the table bound to this model.
  string description = 2;
}

// Specifies options related to storing a sub-message.
message SubmessageOptions {
  // Collection storage mode for the given sub-message field.
  CollectionMode mode = 1;

  // Data path for the given sub-message field.
  string path = 3;
}

// Persistence/data engine options specific to an individual message field.
message FieldPersistenceOptions {
  // Field type, for special-case fields.
  FieldType type = 1;

  // String description of this field included in schemas.
  string description = 2;
}

// Specifies options specific to storing this field in a tabular-style data engine.
message TableFieldOptions {
  // Marks this field as `REQUIRED` in tabular schemas.
  bool require = 1;

  // Marks this field as ignored for serialization in tabular circumstances.
  bool ignore = 2;

  // Overrides the BigQuery type associated with the exported form of this message.
  string bqtype = 3;
}

// Specifies mappings for an arbitrary protobuf message object.
message ObjectMapping {
  // Maps an enumeration instance to this object. Enumeration membership is contextual.
  repeated string instance = 1;
}


extend google.protobuf.MessageOptions {
  // Settings specific to how a particular message entity is stored in the underlying persistence engine. For Bloombox,
  // this generally means Cloud Firestore.
  PersistenceOptions db = 6000;

  // Table-specific configuration for this message. Kicks in when engines are in play that observe or couch data in a
  // table/row-style pattern. Usually used for integration with BigQuery.
  TableOptions table = 6001;

  // Settings that determine meta-mappings between this message object and enumerated states, declared in a foreign
  // structure. Foreign structure mappings are contextually defined by the invoking application.
  ObjectMapping map = 6002;

  // Settings that specify state for this message, which may include settings related to visibility or handling, and
  // validation of this object in various circumstances.
  DatapointOptions msg = 6003;
}


extend google.protobuf.FieldOptions {
  // Database engine persistence options specific to an individual document field.
  FieldPersistenceOptions field = 7000;

  // Specifies options related to storage of this field in a tabular-style data engine.
  TableFieldOptions column = 7001;

  // Specifies options related to storage of a submessage-typed field.
  SubmessageOptions collection = 7002;

  // Settings that specify state for this field, including validation settings, as applicable.
  DatapointOptions opts = 7003;
}


extend google.protobuf.EnumValueOptions {
  // Human-readable label for a given enumeration value state. Optional, can be used by invoking code to generate labels
  // for states in forms or other UI.
  string label = 8003;

  // Color code value for a given enumerated value state. Optional, can be used by invoking code to generate UI schemes.
  opencannabis.content.Color color = 8004;

  // Settings that specify state for this enum value, including validation settings, as applicable.
  DatapointOptions value = 8007;
}


extend google.protobuf.EnumOptions {
  // Settings that specify state for this enum value, including validation settings, as applicable.
  DatapointOptions enumeration = 9001;
}
