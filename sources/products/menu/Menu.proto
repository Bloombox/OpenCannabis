// OpenCannabis Protocol
//
// Copyright $today.year (c) OpenCannabis Authors. All rights reserved.
// https://rfc.opencannabis.info - https://github.com/opencannabis/protocol
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// The source programming code in this file is licensed for open source use
// under the terms of the Apache License 2.0. Please see NOTICE.txt and
// LICENSE.txt at the root of this repository, or at the GitHub URL listed at
// the top of this file, for more information.

/**
 * Specifies structures that, together, form a composed menu product catalog, which is defined as a payload that
 * specifies individual product entries, enumerated by type or section. Usually, catalog structures are used to present
 * menu data in one way or another, but are also employed for synchronizing data between systems.
 */
syntax = "proto3";

package opencannabis.products.menu;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.menu";
option java_multiple_files = true;

import "core/Datamodel.proto";

import "base/ProductKey.proto";
import "temporal/Instant.proto";
import "products/menu/Section.proto";
import "crypto/primitives/Integrity.proto";

import "products/Apothecary.proto";
import "products/Cartridge.proto";
import "products/Edible.proto";
import "products/Extract.proto";
import "products/Flower.proto";
import "products/Merchandise.proto";
import "products/Plant.proto";
import "products/Preroll.proto";


// Enumerates statuses a menu may assume.
enum Status {
  // Indicates that a menu revision is not yet published.
  UNPUBLISHED = 0;

  // Indicates that a menu revision has been published and is considered live.
  LIVE = 1;
}


// Enumerates flags that can be set on a menu.
enum Flag {
  // Indicates that this entire menu is considered a draft.
  DRAFT = 0;

  // Indicates that the underlying menu data is currently private and should not be exposed publicly.
  PRIVATE = 1;

  // Indicates that the underlying menu data is known to be out-of-date.
  OUT_OF_DATE = 2;
}


// Specifies settings used to generate a menu, or used as input when generating menus.
message MenuSettings {
  // Flag indicating a full menu, including hidden/out-of-stock items.
  bool full = 1;

  // Only include menu keys, no detail data.
  bool keys_only = 2;

  // Don't return the menu if it's identical to this fingerprint.
  opencannabis.crypto.Hash snapshot = 3;

  // Bloom filter to consider when returning or processing menu items.
  opencannabis.crypto.Hash fingerprint = 4;

  // Sections to include in the menu. If unspecified, include all sections.
  repeated opencannabis.products.menu.section.Section section = 5;

  // Hint for other available sections. Included on a sectioned menu payload with only one section.
  repeated opencannabis.products.menu.section.Section available_section = 6;
}


// Specifies metadata for a package of menu data.
message Metadata {
  // Partner location that owns this menu data.
  string scope = 1;

  // Version number, or publish timestamp, of this data.
  uint64 version = 2;

  // Status of this menu data.
  Status status = 3;

  // Flags attached to this menu data.
  repeated Flag flags = 4;

  // When this menu data was published.
  opencannabis.temporal.Instant published = 5;

  // Settings that produced this menu data.
  MenuSettings settings = 6;
}


// Specifies the concept of a tag that may be arbitrarily created and attached to menu products, in a many-to-many-style
// relationship, for the purpose of categorically sorting/managing items.
message ProductTag {
  // ID for the tag. Usually a shortened version of the display name.
  string id = 1;

  // Display text for the tag.
  string display = 2;

  // Color code, in hex, for the tag.
  string color = 3;
}


// Specifies a foreign reference for a given menu product. A foreign reference is a unique ID or link between a product
// and that same product in some foreign computer system.
message ForeignReference {
  // Foreign key value for a reference between an in-network product and an out-of-network representation of that same
  // product in a different computer system.
  string key = 1;

  // Domain for the integrating system. This is usually set to a unique domain value that corresponds to the foreign
  // system, and can be used to identify it later.
  string domain = 2;

  // URL to this product in the foreign system, if applicable. Can also be a link to a REST URL payload representing
  // this product's data in the foreign system.
  string link = 3;

  // Timestamp for when this foreign reference was attached to a given menu product. This timestamp should only be set
  // once, upon original creation/linking of the foreign reference.
  opencannabis.temporal.Instant attached = 4;

  // Timestamp indicating when this foreign product reference was last validated with the foreign system. Each time an
  // item is fetched or otherwise synchronized, this should be updated.
  opencannabis.temporal.Instant validated = 5;
}


// Menu product payload stanza. Specifies a single product as a member of a menu section. This generic record is used to
// wrap concrete menu product structures to make them generically usable. In V2 data stores, menu products are stored
// generically as a top-level entity (as opposed to V1, in which this model is synthesized from raw map data).
message MenuProduct {
  option (core.db) = {
    mode: GROUP
    path: "products"
  };

  // Key record uniquely identifying this menu product. Keys for saved items are lifted to this property from the
  // attached concrete record below.
  opencannabis.base.ProductKey key = 1 [
    (core.field).type = KEY
  ];

  // Product tags attached to this entry. Product tags are arbitrary phrases or strings that may be attached to product
  // records to help categorize them or facilitate their management. They are not generally end-user-visible.
  repeated ProductTag tag = 2;

  // Set of foreign references for this product, or, instances in which this product exists in an out-of-network system,
  // in a uniquely identifiable way.
  repeated ForeignReference ref = 3;

  // Content and materials data for this menu product.
  oneof product {
    // Apothecary product.
    opencannabis.products.Apothecary apothecary = 10;

    // Cartridge product.
    opencannabis.products.Cartridge cartridge = 11;

    // Edible product.
    opencannabis.products.Edible edible = 12;

    // Extract product.
    opencannabis.products.Extract extract = 13;

    // Flower product.
    opencannabis.products.Flower flower = 14;

    // Merchandise product.
    opencannabis.products.Merchandise merchandise = 15;

    // Plant product.
    opencannabis.products.Plant plant = 16;

    // Preroll product.
    opencannabis.products.Preroll preroll = 17;
  }
}


// Specifies an inner menu payload which contains menu data for a given menu section.
message SectionData {
  // Count of products included in this menu section data.
  int32 count = 1;

  // Section that this data is attached to.
  opencannabis.products.menu.section.SectionSpec section = 2;

  // Menu products attached to this section.
  repeated MenuProduct product = 3;
}


// Specifies a menu split into section-level chunks.
message SectionedMenu {
  // Count of all products included in this menu, all sections considered.
  int32 count = 1;

  // Specifies a payload of sectioned menu data.
  repeated SectionData payload = 2;
}


// Specifies an inner menu payload which contains mapped data, where each map key is a section name, lower-cased, and
// each map value is itself a product, and each map is addressed at a typed property name.
message StaticMenu {
  // Specifies APOTHECARY products attached to this menu.
  map<string, opencannabis.products.Apothecary> apothecary = 1;

  // Specifies CARTRIDGE products attached to this menu.
  map<string, opencannabis.products.Cartridge> cartridges = 2;

  // Specifies EDIBLE products attached to this menu.
  map<string, opencannabis.products.Edible> edibles = 3;

  // Specifies EXTRACT products attached to this menu.
  map<string, opencannabis.products.Extract> extracts = 4;

  // Specifies FLOWER products attached to this menu.
  map<string, opencannabis.products.Flower> flowers = 5;

  // Specifies MERCHANDISE products attached to this menu.
  map<string, opencannabis.products.Merchandise> merchandise = 6;

  // Specifies PLANT products attached to this menu.
  map<string, opencannabis.products.Plant> plants = 7;

  // Specifies PREROLL products attached to this menu.
  map<string, opencannabis.products.Preroll> prerolls = 8;
}


// Holds a full specification for a revision of menu data, segmented into sections, by the categories member products
// are filed in. Categories are enumerated in `menu.Section`.
message Menu {
  // Metadata for the menu.
  Metadata metadata = 1;

  // Specifies menu content, either in repeated section data, or with a static map.
  oneof content {
    // Data payloads attached to this menu.
    SectionedMenu payload = 3;

    // Specifies a static menu, where each section is specified as a typed map, with keys mapped to products.
    StaticMenu menu = 4;
  }
}
