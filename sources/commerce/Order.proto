// OpenCannabis Protocol
//
// Copyright $today.year (c) OpenCannabis Authors. All rights reserved.
// https://rfc.opencannabis.info - https://github.com/opencannabis/protocol
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// The source programming code in this file is licensed for open source use
// under the terms of the Apache License 2.0. Please see NOTICE.txt and
// LICENSE.txt at the root of this repository, or at the GitHub URL listed at
// the top of this file, for more information.

/**
 * Specifies the notion of a Commercial Order, which is a request to purchase a set of products, by a customer (which is
 * defined as a person in a transactional context). Orders are composed of Items which reference menu products.
 */
syntax = "proto3";

package opencannabis.commerce;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.commerce";
option java_multiple_files = false;
option java_outer_classname = "CommercialOrder";

import "bq_field.proto";

import "commerce/Item.proto";
import "commerce/Delivery.proto";
import "commerce/Customer.proto";
import "commerce/payments/Payment.proto";

import "temporal/Instant.proto";


// Specifies the type of order requested.
enum OrderType {
  // Express pickup order.
  PICKUP = 0;

  // Delivery order.
  DELIVERY = 1;
}


// Specifies the types of delivery timing.
enum SchedulingType {
  // As soon as possible.
  ASAP = 0;

  // Desired time.
  TIMED = 1;
}


// Specifies the desired timing of the delivery order.
message OrderScheduling {
  // Scheduling type, either 'ASAP' or a target time.
  SchedulingType scheduling = 1 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "Scheduling type, either 'ASAP' or a target time."
  ];

  // Desired delivery time, if specified.
  opencannabis.temporal.Instant desired_time = 2 [
    (gen_bq_schema.description) = "Desired delivery time, if specified."
  ];
}


// Enumeration for current status of order
enum OrderStatus {
  // Order has been submitted and is not yet approved.
  PENDING = 0;

  // Order has been approved for fulfillment.
  APPROVED = 1;

  // Order could not be fulfilled for some reason.
  REJECTED = 2;

  // Order has been assigned.
  ASSIGNED = 3;

  // Order is en-route to the user (for delivery).
  EN_ROUTE = 4;

  // Order has been fulfilled and is considered complete.
  FULFILLED = 5;
}


// Information about payment status and info for an order.
message OrderPayment {
  // Status of payment for this order.
  PaymentStatus status = 1 [
    (gen_bq_schema.description) = "Status of payment for this order."
  ];

  // Method of payment used on this order.
  PaymentMethod method = 2 [
    (gen_bq_schema.description) = "Method of payment used on this order."
  ];

  // Amount of tax added to the subtotal.
  double tax = 3 [
    (gen_bq_schema.description) = "Amount of tax added to the subtotal."
  ];

  // Amount the user has paid so far for this order.
  double paid = 4 [
    (gen_bq_schema.description) = "Amount the user has paid so far for this order."
  ];
}


// Specifies a moment at which an order changed status, when it happened, and, optionally, why.
message StatusCheckin {
  // Status the order moved to.
  OrderStatus status = 1;

  // Instant the order was moved to this status.
  temporal.Instant instant = 2;

  // Message or reason given for this status change, if any.
  string message = 3;
}


// Specifies a unique key for a commercial order.
message OrderKey {
  // Order ID, assigned by the server upon creation.
  string id = 1 [
    (gen_bq_schema.description) = "Order ID, assigned by the server upon creation."
  ];
}


// Represents a full order submitted to the server for fulfillment, from an end-user, for delivery or express pickup.
message Order {
  // ID assigned to the order by the server, and potentially nominated by the client.
  string id = 1 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "ID assigned to the order by the server, and potentially nominated by the client."
  ];

  // Type of order requested - either PICKUP or DELIVERY.
  OrderType type = 2 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "Type of order requested - either PICKUP or DELIVERY."
  ];

  // Current status of this order.
  OrderStatus status = 3 [
    (gen_bq_schema.ignore) = true
  ];

  // Customer that submitted this order.
  Customer customer = 4 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "Customer that submitted this order."
  ];

  // Scheduling spec for this order.
  OrderScheduling scheduling = 5 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "Scheduling spec for this order."
  ];

  // Location for delivery, if applicable.
  DeliveryDestination destination = 6 [
    (gen_bq_schema.description) = "Location for delivery, if applicable."
  ];

  // User-provided notes or questions, if any.
  string notes = 7 [
    (gen_bq_schema.ignore) = true
  ];

  // Items being ordered.
  repeated Item item = 8 [
    (gen_bq_schema.ignore) = true
  ];

  // Actions taken on this order.
  repeated StatusCheckin action_log = 9 [
    (gen_bq_schema.ignore) = true
  ];

  // When this order was created.
  opencannabis.temporal.Instant created_at = 10 [
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "When this order was created."
  ];

  // Order subtotal.
  double subtotal = 11 [
    (gen_bq_schema.description) = "Order subtotal."
  ];

  // When this order was created.
  opencannabis.temporal.Instant updated_at = 12 [
    (gen_bq_schema.ignore) = true
  ];

  // Session ID that was active when this order was submitted.
  string sid = 13 [
    (gen_bq_schema.description) = "Session ID that was active when this order was submitted."
  ];

  // Payment information/metadata for this order, if applicable.
  OrderPayment payment = 14 [
    (gen_bq_schema.description) = "Payment information/metadata for this order, if applicable."
  ];
}
