// OpenCannabis Protocol
//
// Copyright $today.year (c) OpenCannabis Authors. All rights reserved.
// https://rfc.opencannabis.info - https://github.com/opencannabis/protocol
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// The source programming code in this file is licensed for open source use
// under the terms of the Apache License 2.0. Please see NOTICE.txt and
// LICENSE.txt at the root of this repository, or at the GitHub URL listed at
// the top of this file, for more information.

/**
 * Specifies structures that reference specific products at their unique key or name.
 */
syntax = "proto3";

package opencannabis.base;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.base";
option java_multiple_files = false;
option java_outer_classname = "BaseProductKey";

import "bq_field.proto";
import "core/Datamodel.proto";

import "content/Name.proto";
import "base/ProductKind.proto";


// Specifies a reference to a product.
message ProductReference {
  // Specifies the name of a product.
  opencannabis.content.Name name = 1 [
    (gen_bq_schema.description) = "Specifies the name of a product."
  ];

  // Specifies the key, if known, of a product.
  ProductKey key = 2 [
    (gen_bq_schema.description) = "Specifies the key, if known, of a product."
  ];
}


// Specifies a general key for a product, which is the combined specification of a product ID and type, which is
// enumerated in `base.ProductType`.
message ProductKey {
  // Product ID, an opaque string that is usually autogenerated. Within the scope of an implementing system, this may
  // also be a stringified integer such as an auto-incrementing ID, for relational-type systems. The product ID is
  // expected to be globally addressable and unique across all product categories.
  string id = 1 [
    (core.field).type = ID,
    (gen_bq_schema.require) = true,
    (gen_bq_schema.description) = "Product ID, an opaque string that is usually autogenerated."
  ];

  // Type of product the ID is referring to. In most cases this entry can be omitted.
  ProductKind type = 2 [
    (gen_bq_schema.description) = "Type of product the ID is referring to. In most cases this entry can be omitted."
  ];
}
